Return-Path: <linux-kernel-owner@vger.kernel.org>
X-Original-To: lists+linux-kernel@lfdr.de
Delivered-To: lists+linux-kernel@lfdr.de
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.lfdr.de (Postfix) with ESMTP id 188A65648C
	for <lists+linux-kernel@lfdr.de>; Wed, 26 Jun 2019 10:27:17 +0200 (CEST)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726862AbfFZI1O (ORCPT <rfc822;lists+linux-kernel@lfdr.de>);
        Wed, 26 Jun 2019 04:27:14 -0400
Received: from mx2.suse.de ([195.135.220.15]:60352 "EHLO mx1.suse.de"
        rhost-flags-OK-OK-OK-FAIL) by vger.kernel.org with ESMTP
        id S1726604AbfFZI1N (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 26 Jun 2019 04:27:13 -0400
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (unknown [195.135.220.254])
        by mx1.suse.de (Postfix) with ESMTP id 04FA3AD7E;
        Wed, 26 Jun 2019 08:27:11 +0000 (UTC)
Date:   Wed, 26 Jun 2019 10:27:11 +0200
Message-ID: <s5himsssqe8.wl-tiwai@suse.de>
From:   Takashi Iwai <tiwai@suse.de>
To:     "Evan Green" <evgreen@chromium.org>
Cc:     <alsa-devel@alsa-project.org>,
        "Thomas Gleixner" <tglx@linutronix.de>,
        "Amadeusz S*awi*ski" <amadeuszx.slawinski@linux.intel.com>,
        "Greg Kroah-Hartman" <gregkh@linuxfoundation.org>,
        "Jaroslav Kysela" <perex@perex.cz>, <linux-kernel@vger.kernel.org>
Subject: Re: [PATCH] ALSA: hda: Use correct start/count for sysfs init
In-Reply-To: <20190625215418.17548-1-evgreen@chromium.org>
References: <20190625215418.17548-1-evgreen@chromium.org>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI/1.14.6 (Maruoka)
 FLIM/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL/10.8 Emacs/25.3
 (x86_64-suse-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI 1.14.6 - "Maruoka")
Content-Type: text/plain; charset=US-ASCII
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Tue, 25 Jun 2019 23:54:18 +0200,
Evan Green wrote:
> 
> The normal flow through the widget sysfs codepath is that
> snd_hdac_refresh_widgets() is called once without the sysfs bool set
> to set up codec->num_nodes and friends, then another time with the
> bool set to actually allocate all the sysfs widgets. However, during
> the first time allocation, hda_widget_sysfs_reinit() ignores the new
> num_nodes passed in via parameter and just calls hda_widget_sysfs_init(),
> using whatever was in codec->num_nodes before the update. This is not
> correct in cases where num_nodes changes. Here's an example:
> 
> Sometime earlier:
> snd_hdac_refresh_widgets(hdac, false)
>   sets codec->num_nodes to 2, widgets is still not allocated
> 
> Now:
> snd_hdac_refresh_widgets(hdac, true)
>   hda_widget_sysfs_reinit(num_nodes=7)
>     hda_widget_sysfs_init()
>       widget_tree_create()
>         alloc(codec->num_nodes) // this is still 2
>   codec->num_nodes = 7
> 
> Pass num_nodes and start_nid down into widget_tree_create() so that
> the right number of nodes are allocated in all cases.
> 
> Signed-off-by: Evan Green <evgreen@chromium.org>

Thanks for the patch.  That's indeed a problem, but I guess a simpler
approach is just to return if sysfs didn't exist.  If the sysfs
entries aren't present at the second call with sysfs=true, it implies
that the codec object will be exposed anyway later, and the sysfs will
be created there.  So, something like below would work instead?


thanks,

Takashi

--- a/sound/hda/hdac_sysfs.c
+++ b/sound/hda/hdac_sysfs.c
@@ -428,7 +428,7 @@ int hda_widget_sysfs_reinit(struct hdac_device *codec,
 	int i;
 
 	if (!codec->widgets)
-		return hda_widget_sysfs_init(codec);
+		return 0;
 
 	tree = kmemdup(codec->widgets, sizeof(*tree), GFP_KERNEL);
 	if (!tree)
