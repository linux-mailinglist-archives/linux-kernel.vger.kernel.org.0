Return-Path: <linux-kernel-owner@vger.kernel.org>
X-Original-To: lists+linux-kernel@lfdr.de
Delivered-To: lists+linux-kernel@lfdr.de
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.lfdr.de (Postfix) with ESMTP id 7BF3211DD33
	for <lists+linux-kernel@lfdr.de>; Fri, 13 Dec 2019 05:41:31 +0100 (CET)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1731937AbfLMEla (ORCPT <rfc822;lists+linux-kernel@lfdr.de>);
        Thu, 12 Dec 2019 23:41:30 -0500
Received: from relmlor1.renesas.com ([210.160.252.171]:14605 "EHLO
        relmlie5.idc.renesas.com" rhost-flags-OK-OK-OK-FAIL)
        by vger.kernel.org with ESMTP id S1731720AbfLMEla (ORCPT
        <rfc822;linux-kernel@vger.kernel.org>);
        Thu, 12 Dec 2019 23:41:30 -0500
Date:   13 Dec 2019 13:41:27 +0900
X-IronPort-AV: E=Sophos;i="5.69,308,1571670000"; 
   d="scan'208";a="34307335"
Received: from unknown (HELO relmlir6.idc.renesas.com) ([10.200.68.152])
  by relmlie5.idc.renesas.com with ESMTP; 13 Dec 2019 13:41:27 +0900
Received: from morimoto-PC.renesas.com (unknown [10.166.18.140])
        by relmlir6.idc.renesas.com (Postfix) with ESMTP id 4C22F4186681;
        Fri, 13 Dec 2019 13:41:27 +0900 (JST)
Message-ID: <87wob04z2g.wl-kuninori.morimoto.gx@renesas.com>
From:   Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
To:     Stephen Boyd <sboyd@kernel.org>
Cc:     "Enrico Weigelt, metux IT consult" <lkml@metux.net>,
        Michael Turquette <mturquette@baylibre.com>,
        linux-clk@vger.kernel.org, linux-kernel@vger.kernel.org
Subject: Re: CONFIG_COMMON_CLK vs CONFIG_HAVE_CLK
In-Reply-To: <20191212215114.1F84B21556@mail.kernel.org>
References: <871rtae1m5.wl-kuninori.morimoto.gx@renesas.com>
        <741ff2c5-56b3-5ba0-3d52-39f77d468739@metux.net>
        <20191212215114.1F84B21556@mail.kernel.org>
User-Agent: Wanderlust/2.15.9 Emacs/24.5 Mule/6.0
MIME-Version: 1.0 (generated by SEMI-EPG 1.14.7 - "Harue")
Content-Type: text/plain; charset=US-ASCII
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org


Hi

> > >       --- clk.h ---
> > > =>    #ifdef CONFIG_HAVE_CLK
> > >       ...
> > >       int clk_set_min_rate(struct clk *clk, unsigned long rate);
> > >       ...
> > >       #else /* !CONFIG_HAVE_CLK */
> > >       static inline int clk_set_min_rate(struct clk *clk, unsigned long rate)
> > >       ...
> > >       -------------
(snip)
> > >       --- Makefile ---
> > >       ...
> > > =>    obj-$(CONFIG_COMMON_CLK)        += clk.o
> > 
> > You've got CONFIG_HAVE_CLK enabled, but CONFIG_COMMON_CLK disabled ?
> > 
> > hmm, the whole CONFIG_HAVE_CLK looks a bit weird to me. I wonder what's
> > the actual purpose of having this arch-specific.
> > 
> > IMHO, we should sort out whether there are some things that some arch
> > really *needs*, and what could be optional - then split that into
> > separate modules along this line.
> > 
> > It seems that clk_set_min_rate() belongs to CONFIG_COMMON_CLK, and
> > tegra30-devfreq.c needds to depend on CONFIG_COMMON_CLK.
> > 
> 
> Years ago there wasn't a common clk framework. Just CONFIG_HAVE_CLK and
> architectures implementing the API defined in the clk.h header file.
> Then the common clk framework was created and we got CONFIG_COMMON_CLK.
> When new clk API features are added to the common clk framework, we
> typically limit their implementation and scope to CONFIG_COMMON_CLK so
> that architectures are encouraged to migrate to the common clk
> framework. I'm not really tracking the other implementations of the clk
> API, but I thought we were down to a handful of implementations that
> haven't migrated. I suppose SH is one of the big ones.

I investigated about SH / HAVE_CLK / COMMON_CLK.

In clk.h, some functions are defined under HAVE_CLK.
For example clk_enable().

	--- include/linux/clk.h ---
	...
=>	#ifdef CONFIG_HAVE_CLK
	...
	int clk_set_rate(struct clk *clk, unsigned long rate);
	...
	---------------------------

But, it is implementated under COMMON_CLK.

	--- drivers/clk/clk.c ---
	...
	int clk_set_rate(struct clk *clk, unsigned long rate)
	...
	--- drivers/clk/Makefiles ---
	...
=>	obj-$(CONFIG_COMMON_CLK)	+= clk.o
	...
	-----------------------------

OTOH, SH has HAVE_CLK, but not have COMMON_CLK.
And, it has own clock implementation at drivers/sh/clk/core.c.

	--- drivers/sh/clk/core.c ---
	...
	int clk_set_rate(struct clk *clk, unsigned long rate)
	...
	--- drivers/sh/clk/Makefile ---
	...
=>	obj-y	:= core.o
	...
	-------------------------------

These mean, HAVE_CLK vs COMMON_CLK mismatch under clk.h
is very matching to SH own clock.
In other words, if we correct clk.h HAVE_CLK vs COMMON_CLK,
It breaks SH clk.
It is very confusable for me.
But difficult to solve it.

So far, I will add "depends on COMMON_CLK" to driver side.

Thank you for your help !!
Best regards
---
Kuninori Morimoto
