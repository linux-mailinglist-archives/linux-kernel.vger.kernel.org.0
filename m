Return-Path: <linux-kernel-owner@vger.kernel.org>
X-Original-To: lists+linux-kernel@lfdr.de
Delivered-To: lists+linux-kernel@lfdr.de
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.lfdr.de (Postfix) with ESMTP id 4078C1811DD
	for <lists+linux-kernel@lfdr.de>; Wed, 11 Mar 2020 08:25:42 +0100 (CET)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1728412AbgCKHYx (ORCPT <rfc822;lists+linux-kernel@lfdr.de>);
        Wed, 11 Mar 2020 03:24:53 -0400
Received: from mx2.suse.de ([195.135.220.15]:41650 "EHLO mx2.suse.de"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1726672AbgCKHYx (ORCPT <rfc822;linux-kernel@vger.kernel.org>);
        Wed, 11 Mar 2020 03:24:53 -0400
X-Virus-Scanned: by amavisd-new at test-mx.suse.de
Received: from relay2.suse.de (unknown [195.135.220.254])
        by mx2.suse.de (Postfix) with ESMTP id 89652AC69;
        Wed, 11 Mar 2020 07:24:51 +0000 (UTC)
Date:   Wed, 11 Mar 2020 08:24:51 +0100
Message-ID: <s5hh7yv9wvw.wl-tiwai@suse.de>
From:   Takashi Iwai <tiwai@suse.de>
To:     Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Cc:     "Rafael J . Wysocki" <rafael@kernel.org>,
        linux-kernel@vger.kernel.org
Subject: Re: [PATCH] drivers/base/cpu: Use scnprintf() for avoiding potential buffer overflow
In-Reply-To: <20200311071935.GA3656396@kroah.com>
References: <20200311071200.4024-1-tiwai@suse.de>
        <20200311071935.GA3656396@kroah.com>
User-Agent: Wanderlust/2.15.9 (Almost Unreal) SEMI/1.14.6 (Maruoka)
 FLIM/1.14.9 (=?UTF-8?B?R29qxY0=?=) APEL/10.8 Emacs/25.3
 (x86_64-suse-linux-gnu) MULE/6.0 (HANACHIRUSATO)
MIME-Version: 1.0 (generated by SEMI 1.14.6 - "Maruoka")
Content-Type: text/plain; charset=US-ASCII
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

On Wed, 11 Mar 2020 08:19:35 +0100,
Greg Kroah-Hartman wrote:
> 
> On Wed, Mar 11, 2020 at 08:12:00AM +0100, Takashi Iwai wrote:
> > Since snprintf() returns the would-be-output size instead of the
> > actual output size, the succeeding calls may go beyond the given
> > buffer limit.  Fix it by replacing with scnprintf().
> > 
> > Signed-off-by: Takashi Iwai <tiwai@suse.de>
> > ---
> >  drivers/base/cpu.c | 8 ++++----
> >  1 file changed, 4 insertions(+), 4 deletions(-)
> > 
> > diff --git a/drivers/base/cpu.c b/drivers/base/cpu.c
> > index 6265871a4af2..0abcd9d68714 100644
> > --- a/drivers/base/cpu.c
> > +++ b/drivers/base/cpu.c
> > @@ -231,7 +231,7 @@ static struct cpu_attr cpu_attrs[] = {
> >  static ssize_t print_cpus_kernel_max(struct device *dev,
> >  				     struct device_attribute *attr, char *buf)
> >  {
> > -	int n = snprintf(buf, PAGE_SIZE-2, "%d\n", NR_CPUS - 1);
> > +	int n = scnprintf(buf, PAGE_SIZE-2, "%d\n", NR_CPUS - 1);
> 
> This should just be "sprintf()" as we "know" that fitting a single
> number will work.
> 
> >  	return n;
> >  }
> >  static DEVICE_ATTR(kernel_max, 0444, print_cpus_kernel_max, NULL);
> > @@ -258,13 +258,13 @@ static ssize_t print_cpus_offline(struct device *dev,
> >  			buf[n++] = ',';
> >  
> >  		if (nr_cpu_ids == total_cpus-1)
> > -			n += snprintf(&buf[n], len - n, "%u", nr_cpu_ids);
> > +			n += scnprintf(&buf[n], len - n, "%u", nr_cpu_ids);
> >  		else
> > -			n += snprintf(&buf[n], len - n, "%u-%d",
> > +			n += scnprintf(&buf[n], len - n, "%u-%d",
> >  						      nr_cpu_ids, total_cpus-1);
> >  	}
> >  
> > -	n += snprintf(&buf[n], len - n, "\n");
> > +	n += scnprintf(&buf[n], len - n, "\n");
> 
> this part looks sane, can you respin this?

OK, will do it.

Thanks for a quick review!


Takashi
