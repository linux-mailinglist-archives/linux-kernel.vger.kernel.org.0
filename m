Return-Path: <linux-kernel-owner@vger.kernel.org>
X-Original-To: lists+linux-kernel@lfdr.de
Delivered-To: lists+linux-kernel@lfdr.de
Received: from vger.kernel.org (vger.kernel.org [209.132.180.67])
	by mail.lfdr.de (Postfix) with ESMTP id 5F81472830
	for <lists+linux-kernel@lfdr.de>; Wed, 24 Jul 2019 08:23:21 +0200 (CEST)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S1726087AbfGXGXQ (ORCPT <rfc822;lists+linux-kernel@lfdr.de>);
        Wed, 24 Jul 2019 02:23:16 -0400
Received: from mga11.intel.com ([192.55.52.93]:10882 "EHLO mga11.intel.com"
        rhost-flags-OK-OK-OK-OK) by vger.kernel.org with ESMTP
        id S1725882AbfGXGXP (ORCPT <rfc822;Linux-kernel@vger.kernel.org>);
        Wed, 24 Jul 2019 02:23:15 -0400
X-Amp-Result: UNKNOWN
X-Amp-Original-Verdict: FILE UNKNOWN
X-Amp-File-Uploaded: False
Received: from fmsmga008.fm.intel.com ([10.253.24.58])
  by fmsmga102.fm.intel.com with ESMTP/TLS/DHE-RSA-AES256-GCM-SHA384; 23 Jul 2019 23:23:06 -0700
X-ExtLoop1: 1
X-IronPort-AV: E=Sophos;i="5.64,300,1559545200"; 
   d="scan'208,223";a="169834336"
Received: from haiyan.sh.intel.com (HELO [10.239.48.70]) ([10.239.48.70])
  by fmsmga008.fm.intel.com with ESMTP; 23 Jul 2019 23:23:02 -0700
Subject: Re: [PATCH v2] perf vendor events: Add Icelake V1.00 event file
To:     acme@kernel.org, jolsa@kernel.org, peterz@infradead.org,
        mingo@redhat.com, alexander.shishkin@linux.intel.com
Cc:     Linux-kernel@vger.kernel.org, ak@linux.intel.com,
        kan.liang@intel.com, yao.jin@intel.com
References: <20190724022744.5374-1-haiyanx.song@intel.com>
From:   Haiyan Song <haiyanx.song@intel.com>
Message-ID: <8859095e-5b02-d6b7-fbdc-3f42b714bae0@intel.com>
Date:   Wed, 24 Jul 2019 14:32:27 +0800
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
 Thunderbird/60.5.1
MIME-Version: 1.0
In-Reply-To: <20190724022744.5374-1-haiyanx.song@intel.com>
Content-Type: multipart/mixed;
 boundary="------------B6D82FEC6D7B90C545327241"
Content-Language: en-US
Sender: linux-kernel-owner@vger.kernel.org
Precedence: bulk
List-ID: <linux-kernel.vger.kernel.org>
X-Mailing-List: linux-kernel@vger.kernel.org

This is a multi-part message in MIME format.
--------------B6D82FEC6D7B90C545327241
Content-Type: text/plain; charset=utf-8; format=flowed
Content-Transfer-Encoding: base64

SGksDQoNClRoaXMgcGF0Y2ggY29udGFpbnMgbGluZXMgdGhhdCBsb25nZXIgdGhhbiA5OTgg
Y2hhcmFjdGVycywNCkkndmUgc2VudCBpdCBieSAnZ2l0IHNlbmQtZW1haWwnLCBidXQgd2hl
biBhcHBseSBpdCwNCnByb21wdCBpbmZvcm1hdGlvbiAiZXJyb3I6IGNvcnJ1cHQgcGF0Y2gg
YXQgbGluZSAyNTU4Ii4NCg0KICAgIGh0dHBzOi8vbGttbC5vcmcvbGttbC8yMDE5LzYvMjQv
MTI3OA0KDQpJIGNoZWNrZWQgdGhlIGxpbmUgYXQgMjU1OCwgaXQgaXMgdmVyeSBzaG9ydCBs
aW5lLg0KU28gdGhlIHBhdGNoIG1heSBiZSB0cnVuY2F0ZWQgYmVmb3JlIGFwcGx5aW5nIGl0
Lg0KDQpDb3VsZCB5b3UgbGV0IG1lIHRvIHNlbmQgdGhpcyBwYXRjaCBhcyBhdHRhY2htZW50
PyBQbGVhc2UgY2hlY2sgdGhlIA0KYXR0YWNobWVudCBpbiB0aGlzIG1haWwuDQoNCldlIHdp
bGwgYXBwbHkgZm9yIGFjY291bnQgb24ga2VybmVsLm9yZyB0byBwcm92aWRlIGdpdCBwdWxs
IHJlcXVlc3QuDQpCdXQgbm93IGl0IGlzIHN0aWxsIG9uZ29pbmcuDQoNClRoYW5rcyB2ZXJ5
IG11Y2ghDQoNCi0tIA0KQmVzdCByZWdhcmRzLA0KSGFpeWFuIFNvbmcNCg0KDQpPbiA3LzI0
LzE5IDEwOjI3IEFNLCBIYWl5YW4gU29uZyB3cm90ZToNCj4gQWRkIGEgSW50ZWwgZXZlbnQg
ZmlsZSBmb3IgcGVyZi4NCj4gDQo+IFNpZ25lZC1vZmYtYnk6IEhhaXlhbiBTb25nIDxoYWl5
YW54LnNvbmdAaW50ZWwuY29tPg0KPiAtLS0NCj4gICB0b29scy9wZXJmL3BtdS1ldmVudHMv
YXJjaC94ODYvaWNlbGFrZS9jYWNoZS5qc29uICB8IDU1MiArKysrKysrKysrKysrDQo+ICAg
Li4uL2FyY2gveDg2L2ljZWxha2UvZmxvYXRpbmctcG9pbnQuanNvbiAgICAgICAgICAgfCAx
MDIgKysrDQo+ICAgLi4uL3BlcmYvcG11LWV2ZW50cy9hcmNoL3g4Ni9pY2VsYWtlL2Zyb250
ZW5kLmpzb24gfCA0MjQgKysrKysrKysrKw0KPiAgIHRvb2xzL3BlcmYvcG11LWV2ZW50cy9h
cmNoL3g4Ni9pY2VsYWtlL21lbW9yeS5qc29uIHwgNDEwICsrKysrKysrKysNCj4gICB0b29s
cy9wZXJmL3BtdS1ldmVudHMvYXJjaC94ODYvaWNlbGFrZS9vdGhlci5qc29uICB8IDEyMSAr
KysNCj4gICAuLi4vcGVyZi9wbXUtZXZlbnRzL2FyY2gveDg2L2ljZWxha2UvcGlwZWxpbmUu
anNvbiB8IDg5MiArKysrKysrKysrKysrKysrKysrKysNCj4gICAuLi4vYXJjaC94ODYvaWNl
bGFrZS92aXJ0dWFsLW1lbW9yeS5qc29uICAgICAgICAgICB8IDIzNiArKysrKysNCj4gICB0
b29scy9wZXJmL3BtdS1ldmVudHMvYXJjaC94ODYvbWFwZmlsZS5jc3YgICAgICAgICB8ICAg
MiArDQo+ICAgOCBmaWxlcyBjaGFuZ2VkLCAyNzM5IGluc2VydGlvbnMoKykNCj4gICBjcmVh
dGUgbW9kZSAxMDA2NDQgdG9vbHMvcGVyZi9wbXUtZXZlbnRzL2FyY2gveDg2L2ljZWxha2Uv
Y2FjaGUuanNvbg0KPiAgIGNyZWF0ZSBtb2RlIDEwMDY0NCB0b29scy9wZXJmL3BtdS1ldmVu
dHMvYXJjaC94ODYvaWNlbGFrZS9mbG9hdGluZy1wb2ludC5qc29uDQo+ICAgY3JlYXRlIG1v
ZGUgMTAwNjQ0IHRvb2xzL3BlcmYvcG11LWV2ZW50cy9hcmNoL3g4Ni9pY2VsYWtlL2Zyb250
ZW5kLmpzb24NCj4gICBjcmVhdGUgbW9kZSAxMDA2NDQgdG9vbHMvcGVyZi9wbXUtZXZlbnRz
L2FyY2gveDg2L2ljZWxha2UvbWVtb3J5Lmpzb24NCj4gICBjcmVhdGUgbW9kZSAxMDA2NDQg
dG9vbHMvcGVyZi9wbXUtZXZlbnRzL2FyY2gveDg2L2ljZWxha2Uvb3RoZXIuanNvbg0KPiAg
IGNyZWF0ZSBtb2RlIDEwMDY0NCB0b29scy9wZXJmL3BtdS1ldmVudHMvYXJjaC94ODYvaWNl
bGFrZS9waXBlbGluZS5qc29uDQo+ICAgY3JlYXRlIG1vZGUgMTAwNjQ0IHRvb2xzL3BlcmYv
cG11LWV2ZW50cy9hcmNoL3g4Ni9pY2VsYWtlL3ZpcnR1YWwtbWVtb3J5Lmpzb24NCj4gDQo+
IGRpZmYgLS1naXQgYS90b29scy9wZXJmL3BtdS1ldmVudHMvYXJjaC94ODYvaWNlbGFrZS9j
YWNoZS5qc29uIGIvdG9vbHMvcGVyZi9wbXUtZXZlbnRzL2FyY2gveDg2L2ljZWxha2UvY2Fj
aGUuanNvbg0KPiBuZXcgZmlsZSBtb2RlIDEwMDY0NA0KPiBpbmRleCAwMDAwMDAwMDAwMDAu
LjM1MjlmYzMzOGMxNw0KPiAtLS0gL2Rldi9udWxsDQo+ICsrKyBiL3Rvb2xzL3BlcmYvcG11
LWV2ZW50cy9hcmNoL3g4Ni9pY2VsYWtlL2NhY2hlLmpzb24NCj4gQEAgLTAsMCArMSw1NTIg
QEANCj4gK1sNCj4gKyAgICB7DQo+ICsgICAgICAgICJDb2xsZWN0UEVCU1JlY29yZCI6ICIy
IiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9uIjogIkNvdW50cyB0aGUgbnVtYmVy
IG9mIGRlbWFuZCBEYXRhIFJlYWQgcmVxdWVzdHMgdGhhdCBtaXNzIEwyIGNhY2hlLiBPbmx5
IG5vdCByZWplY3RlZCBsb2FkcyBhcmUgY291bnRlZC4iLA0KPiArICAgICAgICAiRXZlbnRD
b2RlIjogIjB4MjQiLA0KPiArICAgICAgICAiQ291bnRlciI6ICIwLDEsMiwzIiwNCj4gKyAg
ICAgICAgIlVNYXNrIjogIjB4MjEiLA0KPiArICAgICAgICAiUEVCU2NvdW50ZXJzIjogIjAs
MSwyLDMiLA0KPiArICAgICAgICAiRXZlbnROYW1lIjogIkwyX1JRU1RTLkRFTUFORF9EQVRB
X1JEX01JU1MiLA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIyMDAwMDMiLA0K
PiArICAgICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJEZW1hbmQgRGF0YSBSZWFkIG1pc3Mg
TDIsIG5vIHJlamVjdHMiDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJDb2xs
ZWN0UEVCU1JlY29yZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9uIjog
IkNvdW50cyB0aGUgUkZPIChSZWFkLWZvci1Pd25lcnNoaXApIHJlcXVlc3RzIHRoYXQgbWlz
cyBMMiBjYWNoZS4iLA0KPiArICAgICAgICAiRXZlbnRDb2RlIjogIjB4MjQiLA0KPiArICAg
ICAgICAiQ291bnRlciI6ICIwLDEsMiwzIiwNCj4gKyAgICAgICAgIlVNYXNrIjogIjB4MjIi
LA0KPiArICAgICAgICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMiLA0KPiArICAgICAgICAi
RXZlbnROYW1lIjogIkwyX1JRU1RTLlJGT19NSVNTIiwNCj4gKyAgICAgICAgIlNhbXBsZUFm
dGVyVmFsdWUiOiAiMjAwMDAzIiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAi
UkZPIHJlcXVlc3RzIHRoYXQgbWlzcyBMMiBjYWNoZSINCj4gKyAgICB9LA0KPiArICAgIHsN
Cj4gKyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAiUHVi
bGljRGVzY3JpcHRpb24iOiAiQ291bnRzIEwyIGNhY2hlIG1pc3NlcyB3aGVuIGZldGNoaW5n
IGluc3RydWN0aW9ucy4iLA0KPiArICAgICAgICAiRXZlbnRDb2RlIjogIjB4MjQiLA0KPiAr
ICAgICAgICAiQ291bnRlciI6ICIwLDEsMiwzIiwNCj4gKyAgICAgICAgIlVNYXNrIjogIjB4
MjQiLA0KPiArICAgICAgICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMiLA0KPiArICAgICAg
ICAiRXZlbnROYW1lIjogIkwyX1JRU1RTLkNPREVfUkRfTUlTUyIsDQo+ICsgICAgICAgICJT
YW1wbGVBZnRlclZhbHVlIjogIjIwMDAwMyIsDQo+ICsgICAgICAgICJCcmllZkRlc2NyaXB0
aW9uIjogIkwyIGNhY2hlIG1pc3NlcyB3aGVuIGZldGNoaW5nIGluc3RydWN0aW9ucyINCj4g
KyAgICB9LA0KPiArICAgIHsNCj4gKyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIi
LA0KPiArICAgICAgICAiUHVibGljRGVzY3JpcHRpb24iOiAiQ291bnRzIGRlbWFuZCByZXF1
ZXN0cyB0aGF0IG1pc3MgTDIgY2FjaGUuIiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIw
eDI0IiwNCj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJV
TWFzayI6ICIweDI3IiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzIiwN
Cj4gKyAgICAgICAgIkV2ZW50TmFtZSI6ICJMMl9SUVNUUy5BTExfREVNQU5EX01JU1MiLA0K
PiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIyMDAwMDMiLA0KPiArICAgICAgICAi
QnJpZWZEZXNjcmlwdGlvbiI6ICJEZW1hbmQgcmVxdWVzdHMgdGhhdCBtaXNzIEwyIGNhY2hl
Ig0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQi
OiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJDb3VudHMgU29mdHdh
cmUgcHJlZmV0Y2ggcmVxdWVzdHMgdGhhdCBtaXNzIHRoZSBMMiBjYWNoZS4gVGhpcyBldmVu
dCBhY2NvdW50cyBmb3IgUFJFRkVUQ0hOVEEgYW5kIFBSRUZFVENIVDAvMS8yIGluc3RydWN0
aW9ucy4iLA0KPiArICAgICAgICAiRXZlbnRDb2RlIjogIjB4MjQiLA0KPiArICAgICAgICAi
Q291bnRlciI6ICIwLDEsMiwzIiwNCj4gKyAgICAgICAgIlVNYXNrIjogIjB4MjgiLA0KPiAr
ICAgICAgICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMiLA0KPiArICAgICAgICAiRXZlbnRO
YW1lIjogIkwyX1JRU1RTLlNXUEZfTUlTUyIsDQo+ICsgICAgICAgICJTYW1wbGVBZnRlclZh
bHVlIjogIjIwMDAwMyIsDQo+ICsgICAgICAgICJCcmllZkRlc2NyaXB0aW9uIjogIlNXIHBy
ZWZldGNoIHJlcXVlc3RzIHRoYXQgbWlzcyBMMiBjYWNoZS4iDQo+ICsgICAgfSwNCj4gKyAg
ICB7DQo+ICsgICAgICAgICJDb2xsZWN0UEVCU1JlY29yZCI6ICIyIiwNCj4gKyAgICAgICAg
IlB1YmxpY0Rlc2NyaXB0aW9uIjogIkNvdW50cyB0aGUgbnVtYmVyIG9mIGRlbWFuZCBEYXRh
IFJlYWQgcmVxdWVzdHMgaW5pdGlhdGVkIGJ5IGxvYWQgaW5zdHJ1Y3Rpb25zIHRoYXQgaGl0
IEwyIGNhY2hlLiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHgyNCIsDQo+ICsgICAg
ICAgICJDb3VudGVyIjogIjAsMSwyLDMiLA0KPiArICAgICAgICAiVU1hc2siOiAiMHhjMSIs
DQo+ICsgICAgICAgICJQRUJTY291bnRlcnMiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJF
dmVudE5hbWUiOiAiTDJfUlFTVFMuREVNQU5EX0RBVEFfUkRfSElUIiwNCj4gKyAgICAgICAg
IlNhbXBsZUFmdGVyVmFsdWUiOiAiMjAwMDAzIiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3Jp
cHRpb24iOiAiRGVtYW5kIERhdGEgUmVhZCByZXF1ZXN0cyB0aGF0IGhpdCBMMiBjYWNoZSIN
Cj4gKyAgICB9LA0KPiArICAgIHsNCj4gKyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjog
IjIiLA0KPiArICAgICAgICAiUHVibGljRGVzY3JpcHRpb24iOiAiQ291bnRzIHRoZSBSRk8g
KFJlYWQtZm9yLU93bmVyc2hpcCkgcmVxdWVzdHMgdGhhdCBoaXQgTDIgY2FjaGUuIiwNCj4g
KyAgICAgICAgIkV2ZW50Q29kZSI6ICIweDI0IiwNCj4gKyAgICAgICAgIkNvdW50ZXIiOiAi
MCwxLDIsMyIsDQo+ICsgICAgICAgICJVTWFzayI6ICIweGMyIiwNCj4gKyAgICAgICAgIlBF
QlNjb3VudGVycyI6ICIwLDEsMiwzIiwNCj4gKyAgICAgICAgIkV2ZW50TmFtZSI6ICJMMl9S
UVNUUy5SRk9fSElUIiwNCj4gKyAgICAgICAgIlNhbXBsZUFmdGVyVmFsdWUiOiAiMjAwMDAz
IiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiUkZPIHJlcXVlc3RzIHRoYXQg
aGl0IEwyIGNhY2hlIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAiQ29sbGVj
dFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJD
b3VudHMgTDIgY2FjaGUgaGl0cyB3aGVuIGZldGNoaW5nIGluc3RydWN0aW9ucywgY29kZSBy
ZWFkcy4iLA0KPiArICAgICAgICAiRXZlbnRDb2RlIjogIjB4MjQiLA0KPiArICAgICAgICAi
Q291bnRlciI6ICIwLDEsMiwzIiwNCj4gKyAgICAgICAgIlVNYXNrIjogIjB4YzQiLA0KPiAr
ICAgICAgICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMiLA0KPiArICAgICAgICAiRXZlbnRO
YW1lIjogIkwyX1JRU1RTLkNPREVfUkRfSElUIiwNCj4gKyAgICAgICAgIlNhbXBsZUFmdGVy
VmFsdWUiOiAiMjAwMDAzIiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiTDIg
Y2FjaGUgaGl0cyB3aGVuIGZldGNoaW5nIGluc3RydWN0aW9ucywgY29kZSByZWFkcy4iDQo+
ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJDb2xsZWN0UEVCU1JlY29yZCI6ICIy
IiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9uIjogIkNvdW50cyBTb2Z0d2FyZSBw
cmVmZXRjaCByZXF1ZXN0cyB0aGF0IGhpdCB0aGUgTDIgY2FjaGUuIFRoaXMgZXZlbnQgYWNj
b3VudHMgZm9yIFBSRUZFVENITlRBIGFuZCBQUkVGRVRDSFQwLzEvMiBpbnN0cnVjdGlvbnMu
IiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIweDI0IiwNCj4gKyAgICAgICAgIkNvdW50
ZXIiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJVTWFzayI6ICIweGM4IiwNCj4gKyAgICAg
ICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzIiwNCj4gKyAgICAgICAgIkV2ZW50TmFtZSI6
ICJMMl9SUVNUUy5TV1BGX0hJVCIsDQo+ICsgICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjog
IjIwMDAwMyIsDQo+ICsgICAgICAgICJCcmllZkRlc2NyaXB0aW9uIjogIlNXIHByZWZldGNo
IHJlcXVlc3RzIHRoYXQgaGl0IEwyIGNhY2hlLiINCj4gKyAgICB9LA0KPiArICAgIHsNCj4g
KyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAiUHVibGlj
RGVzY3JpcHRpb24iOiAiQ291bnRzIHRoZSBudW1iZXIgb2YgZGVtYW5kIERhdGEgUmVhZCBy
ZXF1ZXN0cyAoaW5jbHVkaW5nIHJlcXVlc3RzIGZyb20gTDFEIGhhcmR3YXJlIHByZWZldGNo
ZXJzKS4gVGhlc2UgbG9hZHMgbWF5IGhpdCBvciBtaXNzIEwyIGNhY2hlLiBPbmx5IG5vbiBy
ZWplY3RlZCBsb2FkcyBhcmUgY291bnRlZC4iLA0KPiArICAgICAgICAiRXZlbnRDb2RlIjog
IjB4MjQiLA0KPiArICAgICAgICAiQ291bnRlciI6ICIwLDEsMiwzIiwNCj4gKyAgICAgICAg
IlVNYXNrIjogIjB4ZTEiLA0KPiArICAgICAgICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMi
LA0KPiArICAgICAgICAiRXZlbnROYW1lIjogIkwyX1JRU1RTLkFMTF9ERU1BTkRfREFUQV9S
RCIsDQo+ICsgICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjIwMDAwMyIsDQo+ICsgICAg
ICAgICJCcmllZkRlc2NyaXB0aW9uIjogIkRlbWFuZCBEYXRhIFJlYWQgcmVxdWVzdHMiDQo+
ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJDb2xsZWN0UEVCU1JlY29yZCI6ICIy
IiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9uIjogIkNvdW50cyB0aGUgdG90YWwg
bnVtYmVyIG9mIFJGTyAocmVhZCBmb3Igb3duZXJzaGlwKSByZXF1ZXN0cyB0byBMMiBjYWNo
ZS4gTDIgUkZPIHJlcXVlc3RzIGluY2x1ZGUgYm90aCBMMUQgZGVtYW5kIFJGTyBtaXNzZXMg
YXMgd2VsbCBhcyBMMUQgUkZPIHByZWZldGNoZXMuIiwNCj4gKyAgICAgICAgIkV2ZW50Q29k
ZSI6ICIweDI0IiwNCj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMCwxLDIsMyIsDQo+ICsgICAg
ICAgICJVTWFzayI6ICIweGUyIiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEs
MiwzIiwNCj4gKyAgICAgICAgIkV2ZW50TmFtZSI6ICJMMl9SUVNUUy5BTExfUkZPIiwNCj4g
KyAgICAgICAgIlNhbXBsZUFmdGVyVmFsdWUiOiAiMjAwMDAzIiwNCj4gKyAgICAgICAgIkJy
aWVmRGVzY3JpcHRpb24iOiAiUkZPIHJlcXVlc3RzIHRvIEwyIGNhY2hlIg0KPiArICAgIH0s
DQo+ICsgICAgew0KPiArICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsg
ICAgICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJDb3VudHMgdGhlIHRvdGFsIG51bWJlciBv
ZiBMMiBjb2RlIHJlcXVlc3RzLiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHgyNCIs
DQo+ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMiLA0KPiArICAgICAgICAiVU1hc2si
OiAiMHhlNCIsDQo+ICsgICAgICAgICJQRUJTY291bnRlcnMiOiAiMCwxLDIsMyIsDQo+ICsg
ICAgICAgICJFdmVudE5hbWUiOiAiTDJfUlFTVFMuQUxMX0NPREVfUkQiLA0KPiArICAgICAg
ICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIyMDAwMDMiLA0KPiArICAgICAgICAiQnJpZWZEZXNj
cmlwdGlvbiI6ICJMMiBjb2RlIHJlcXVlc3RzIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiAr
ICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNE
ZXNjcmlwdGlvbiI6ICJDb3VudHMgZGVtYW5kIHJlcXVlc3RzIHRvIEwyIGNhY2hlLiIsDQo+
ICsgICAgICAgICJFdmVudENvZGUiOiAiMHgyNCIsDQo+ICsgICAgICAgICJDb3VudGVyIjog
IjAsMSwyLDMiLA0KPiArICAgICAgICAiVU1hc2siOiAiMHhlNyIsDQo+ICsgICAgICAgICJQ
RUJTY291bnRlcnMiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJFdmVudE5hbWUiOiAiTDJf
UlFTVFMuQUxMX0RFTUFORF9SRUZFUkVOQ0VTIiwNCj4gKyAgICAgICAgIlNhbXBsZUFmdGVy
VmFsdWUiOiAiMjAwMDAzIiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiRGVt
YW5kIHJlcXVlc3RzIHRvIEwyIGNhY2hlIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAg
ICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNj
cmlwdGlvbiI6ICJDb3VudHMgbnVtYmVyIG9mIEwxRCBtaXNzZXMgdGhhdCBhcmUgb3V0c3Rh
bmRpbmcgaW4gZWFjaCBjeWNsZSwgdGhhdCBpcyBlYWNoIGN5Y2xlIHRoZSBudW1iZXIgb2Yg
RmlsbCBCdWZmZXJzIChGQikgb3V0c3RhbmRpbmcgcmVxdWlyZWQgYnkgRGVtYW5kIFJlYWRz
LiBGQiBlaXRoZXIgaXMgaGVsZCBieSBkZW1hbmQgbG9hZHMsIG9yIGl0IGlzIGhlbGQgYnkg
bm9uLWRlbWFuZCBsb2FkcyBhbmQgZ2V0cyBoaXQgYXQgbGVhc3Qgb25jZSBieSBkZW1hbmQu
IFRoZSB2YWxpZCBvdXRzdGFuZGluZyBpbnRlcnZhbCBpcyBkZWZpbmVkIHVudGlsIHRoZSBG
QiBkZWFsbG9jYXRpb24gYnkgb25lIG9mIHRoZSBmb2xsb3dpbmcgd2F5czogZnJvbSBGQiBh
bGxvY2F0aW9uLCBpZiBGQiBpcyBhbGxvY2F0ZWQgYnkgZGVtYW5kIGZyb20gdGhlIGRlbWFu
ZCBIaXQgRkIsIGlmIGl0IGlzIGFsbG9jYXRlZCBieSBoYXJkd2FyZSBvciBzb2Z0d2FyZSBw
cmVmZXRjaC4gTm90ZTogSW4gdGhlIEwxRCwgYSBEZW1hbmQgUmVhZCBjb250YWlucyBjYWNo
ZWFibGUgb3Igbm9uY2FjaGVhYmxlIGRlbWFuZCBsb2FkcywgaW5jbHVkaW5nIG9uZXMgY2F1
c2luZyBjYWNoZS1saW5lIHNwbGl0cyBhbmQgcmVhZHMgZHVlIHRvIHBhZ2Ugd2Fsa3MgcmVz
dWx0ZWQgZnJvbSBhbnkgcmVxdWVzdCB0eXBlLiIsDQo+ICsgICAgICAgICJFdmVudENvZGUi
OiAiMHg0OCIsDQo+ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMiLA0KPiArICAgICAg
ICAiVU1hc2siOiAiMHgxIiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwz
IiwNCj4gKyAgICAgICAgIkV2ZW50TmFtZSI6ICJMMURfUEVORF9NSVNTLlBFTkRJTkciLA0K
PiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIyMDAwMDAzIiwNCj4gKyAgICAgICAg
IkJyaWVmRGVzY3JpcHRpb24iOiAiTnVtYmVyIG9mIEwxRCBtaXNzZXMgdGhhdCBhcmUgb3V0
c3RhbmRpbmciDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJDb2xsZWN0UEVC
U1JlY29yZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9uIjogIkNvdW50
cyBkdXJhdGlvbiBvZiBMMUQgbWlzcyBvdXRzdGFuZGluZyBpbiBjeWNsZXMuIiwNCj4gKyAg
ICAgICAgIkV2ZW50Q29kZSI6ICIweDQ4IiwNCj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMCwx
LDIsMyIsDQo+ICsgICAgICAgICJVTWFzayI6ICIweDEiLA0KPiArICAgICAgICAiUEVCU2Nv
dW50ZXJzIjogIjAsMSwyLDMiLA0KPiArICAgICAgICAiRXZlbnROYW1lIjogIkwxRF9QRU5E
X01JU1MuUEVORElOR19DWUNMRVMiLA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6
ICIyMDAwMDAzIiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiQ3ljbGVzIHdp
dGggTDFEIGxvYWQgTWlzc2VzIG91dHN0YW5kaW5nLiIsDQo+ICsgICAgICAgICJDb3VudGVy
TWFzayI6ICIxIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAiQ29sbGVjdFBF
QlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJDb3Vu
dHMgbnVtYmVyIG9mIGN5Y2xlcyBhIGRlbWFuZCByZXF1ZXN0IGhhcyB3YWl0ZWQgZHVlIHRv
IEwxRCBGaWxsIEJ1ZmZlciAoRkIpIHVuYXZhaWxhYmxhYmlsaXR5LiBEZW1hbmQgcmVxdWVz
dHMgaW5jbHVkZSBjYWNoZWFibGUvdW5jYWNoZWFibGUgZGVtYW5kIGxvYWQsIHN0b3JlLCBs
b2NrIG9yIFNXIHByZWZldGNoIGFjY2Vzc2VzLiIsDQo+ICsgICAgICAgICJFdmVudENvZGUi
OiAiMHg0OCIsDQo+ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMiLA0KPiArICAgICAg
ICAiVU1hc2siOiAiMHgyIiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwz
IiwNCj4gKyAgICAgICAgIkV2ZW50TmFtZSI6ICJMMURfUEVORF9NSVNTLkZCX0ZVTEwiLA0K
PiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIyMDAwMDAzIiwNCj4gKyAgICAgICAg
IkJyaWVmRGVzY3JpcHRpb24iOiAiTnVtYmVyIG9mIGN5Y2xlcyBhIGRlbWFuZCByZXF1ZXN0
IGhhcyB3YWl0ZWQgZHVlIHRvIEwxRCBGaWxsIEJ1ZmZlciAoRkIpIHVuYXZhaWxhYmxhYmls
aXR5LiINCj4gKyAgICB9LA0KPiArICAgIHsNCj4gKyAgICAgICAgIkNvbGxlY3RQRUJTUmVj
b3JkIjogIjIiLA0KPiArICAgICAgICAiUHVibGljRGVzY3JpcHRpb24iOiAiQ291bnRzIG51
bWJlciBvZiBwaGFzZXMgYSBkZW1hbmQgcmVxdWVzdCBoYXMgd2FpdGVkIGR1ZSB0byBMMUQg
RmlsbCBCdWZmZXIgKEZCKSB1bmF2YWlsYWJsYWJpbGl0eS4gRGVtYW5kIHJlcXVlc3RzIGlu
Y2x1ZGUgY2FjaGVhYmxlL3VuY2FjaGVhYmxlIGRlbWFuZCBsb2FkLCBzdG9yZSwgbG9jayBv
ciBTVyBwcmVmZXRjaCBhY2Nlc3Nlcy4iLA0KPiArICAgICAgICAiRXZlbnRDb2RlIjogIjB4
NDgiLA0KPiArICAgICAgICAiQ291bnRlciI6ICIwLDEsMiwzIiwNCj4gKyAgICAgICAgIlVN
YXNrIjogIjB4MiIsDQo+ICsgICAgICAgICJQRUJTY291bnRlcnMiOiAiMCwxLDIsMyIsDQo+
ICsgICAgICAgICJFdmVudE5hbWUiOiAiTDFEX1BFTkRfTUlTUy5GQl9GVUxMX1BFUklPRFMi
LA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIyMDAwMDAzIiwNCj4gKyAgICAg
ICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiTnVtYmVyIG9mIHBoYXNlcyBhIGRlbWFuZCByZXF1
ZXN0IGhhcyB3YWl0ZWQgZHVlIHRvIEwxRCBGaWxsIEJ1ZmZlciAoRkIpIHVuYXZhaWxhYmxh
YmlsaXR5LiIsDQo+ICsgICAgICAgICJDb3VudGVyTWFzayI6ICIxIiwNCj4gKyAgICAgICAg
IkVkZ2VEZXRlY3QiOiAiMSINCj4gKyAgICB9LA0KPiArICAgIHsNCj4gKyAgICAgICAgIkNv
bGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAiUHVibGljRGVzY3JpcHRpb24i
OiAiQ291bnRzIG51bWJlciBvZiBjeWNsZXMgYSBkZW1hbmQgcmVxdWVzdCBoYXMgd2FpdGVk
IGR1ZSB0byBMMUQgZHVlIHRvIGxhY2sgb2YgTDIgcmVzb3VyY2VzLiBEZW1hbmQgcmVxdWVz
dHMgaW5jbHVkZSBjYWNoZWFibGUvdW5jYWNoZWFibGUgZGVtYW5kIGxvYWQsIHN0b3JlLCBs
b2NrIG9yIFNXIHByZWZldGNoIGFjY2Vzc2VzLiIsDQo+ICsgICAgICAgICJFdmVudENvZGUi
OiAiMHg0OCIsDQo+ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMiLA0KPiArICAgICAg
ICAiVU1hc2siOiAiMHg0IiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwz
IiwNCj4gKyAgICAgICAgIkV2ZW50TmFtZSI6ICJMMURfUEVORF9NSVNTLkwyX1NUQUxMIiwN
Cj4gKyAgICAgICAgIlNhbXBsZUFmdGVyVmFsdWUiOiAiMjAwMDAwMyIsDQo+ICsgICAgICAg
ICJCcmllZkRlc2NyaXB0aW9uIjogIk51bWJlciBvZiBjeWNsZXMgYSBkZW1hbmQgcmVxdWVz
dCBoYXMgd2FpdGVkIGR1ZSB0byBMMUQgZHVlIHRvIGxhY2sgb2YgTDIgcmVzb3VyY2VzLiIN
Cj4gKyAgICB9LA0KPiArICAgIHsNCj4gKyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjog
IjIiLA0KPiArICAgICAgICAiUHVibGljRGVzY3JpcHRpb24iOiAiQ291bnRzIEwxRCBkYXRh
IGxpbmUgcmVwbGFjZW1lbnRzIGluY2x1ZGluZyBvcHBvcnR1bmlzdGljIHJlcGxhY2VtZW50
cywgYW5kIHJlcGxhY2VtZW50cyB0aGF0IHJlcXVpcmUgc3RhbGwtZm9yLXJlcGxhY2Ugb3Ig
YmxvY2stZm9yLXJlcGxhY2UuIiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIweDUxIiwN
Cj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJVTWFzayI6
ICIweDEiLA0KPiArICAgICAgICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMiLA0KPiArICAg
ICAgICAiRXZlbnROYW1lIjogIkwxRC5SRVBMQUNFTUVOVCIsDQo+ICsgICAgICAgICJTYW1w
bGVBZnRlclZhbHVlIjogIjIwMDAwMDMiLA0KPiArICAgICAgICAiQnJpZWZEZXNjcmlwdGlv
biI6ICJDb3VudHMgdGhlIG51bWJlciBvZiBjYWNoZSBsaW5lcyByZXBsYWNlZCBpbiBMMSBk
YXRhIGNhY2hlLiINCj4gKyAgICB9LA0KPiArICAgIHsNCj4gKyAgICAgICAgIkNvbGxlY3RQ
RUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAiUHVibGljRGVzY3JpcHRpb24iOiAiQ291
bnRzIHRoZSBudW1iZXIgb2Ygb2ZmY29yZSBvdXRzdGFuZGluZyBkZW1hbmQgcmZvIFJlYWRz
IHRyYW5zYWN0aW9ucyBpbiB0aGUgc3VwZXIgcXVldWUgZXZlcnkgY3ljbGUuIFRoZSAnT2Zm
Y29yZSBvdXRzdGFuZGluZycgc3RhdGUgb2YgdGhlIHRyYW5zYWN0aW9uIGxhc3RzIGZyb20g
dGhlIEwyIG1pc3MgdW50aWwgdGhlIHNlbmRpbmcgdHJhbnNhY3Rpb24gY29tcGxldGlvbiB0
byByZXF1ZXN0b3IgKFNRIGRlYWxsb2NhdGlvbikuIFNlZSB0aGUgY29ycmVzcG9uZGluZyBV
bWFzayB1bmRlciBPRkZDT1JFX1JFUVVFU1RTLiIsDQo+ICsgICAgICAgICJFdmVudENvZGUi
OiAiMHg2MCIsDQo+ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMiLA0KPiArICAgICAg
ICAiVU1hc2siOiAiMHg0IiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwz
IiwNCj4gKyAgICAgICAgIkV2ZW50TmFtZSI6ICJPRkZDT1JFX1JFUVVFU1RTX09VVFNUQU5E
SU5HLkNZQ0xFU19XSVRIX0RFTUFORF9SRk8iLA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJW
YWx1ZSI6ICIyMDAwMDAzIiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiQ3lj
bGVzIHdpdGggb2ZmY29yZSBvdXRzdGFuZGluZyBkZW1hbmQgcmZvIHJlYWRzIHRyYW5zYWN0
aW9ucyBpbiBTdXBlclF1ZXVlIChTUSksIHF1ZXVlIHRvIHVuY29yZS4iLA0KPiArICAgICAg
ICAiQ291bnRlck1hc2siOiAiMSINCj4gKyAgICB9LA0KPiArICAgIHsNCj4gKyAgICAgICAg
IkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAiUHVibGljRGVzY3JpcHRp
b24iOiAiQ291bnRzIHRoZSBudW1iZXIgb2Ygb2ZmY29yZSBvdXRzdGFuZGluZyBjYWNoZWFi
bGUgQ29yZSBEYXRhIFJlYWQgdHJhbnNhY3Rpb25zIGluIHRoZSBzdXBlciBxdWV1ZSBldmVy
eSBjeWNsZS4gQSB0cmFuc2FjdGlvbiBpcyBjb25zaWRlcmVkIHRvIGJlIGluIHRoZSBPZmZj
b3JlIG91dHN0YW5kaW5nIHN0YXRlIGJldHdlZW4gTDIgbWlzcyBhbmQgdHJhbnNhY3Rpb24g
Y29tcGxldGlvbiBzZW50IHRvIHJlcXVlc3RvciAoU1EgZGUtYWxsb2NhdGlvbikuIFNlZSBj
b3JyZXNwb25kaW5nIFVtYXNrIHVuZGVyIE9GRkNPUkVfUkVRVUVTVFMuIiwNCj4gKyAgICAg
ICAgIkV2ZW50Q29kZSI6ICIweDYwIiwNCj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMCwxLDIs
MyIsDQo+ICsgICAgICAgICJVTWFzayI6ICIweDgiLA0KPiArICAgICAgICAiUEVCU2NvdW50
ZXJzIjogIjAsMSwyLDMiLA0KPiArICAgICAgICAiRXZlbnROYW1lIjogIk9GRkNPUkVfUkVR
VUVTVFNfT1VUU1RBTkRJTkcuQUxMX0RBVEFfUkQiLA0KPiArICAgICAgICAiU2FtcGxlQWZ0
ZXJWYWx1ZSI6ICIyMDAwMDAzIiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAi
T2ZmY29yZSBvdXRzdGFuZGluZyBjYWNoZWFibGUgQ29yZSBEYXRhIFJlYWQgdHJhbnNhY3Rp
b25zIGluIFN1cGVyUXVldWUgKFNRKSwgcXVldWUgdG8gdW5jb3JlIg0KPiArICAgIH0sDQo+
ICsgICAgew0KPiArICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAg
ICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJDb3VudHMgY3ljbGVzIHdoZW4gb2ZmY29yZSBv
dXRzdGFuZGluZyBjYWNoZWFibGUgQ29yZSBEYXRhIFJlYWQgdHJhbnNhY3Rpb25zIGFyZSBw
cmVzZW50IGluIHRoZSBzdXBlciBxdWV1ZS4gQSB0cmFuc2FjdGlvbiBpcyBjb25zaWRlcmVk
IHRvIGJlIGluIHRoZSBPZmZjb3JlIG91dHN0YW5kaW5nIHN0YXRlIGJldHdlZW4gTDIgbWlz
cyBhbmQgdHJhbnNhY3Rpb24gY29tcGxldGlvbiBzZW50IHRvIHJlcXVlc3RvciAoU1EgZGUt
YWxsb2NhdGlvbikuIFNlZSBjb3JyZXNwb25kaW5nIFVtYXNrIHVuZGVyIE9GRkNPUkVfUkVR
VUVTVFMuIiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIweDYwIiwNCj4gKyAgICAgICAg
IkNvdW50ZXIiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJVTWFzayI6ICIweDgiLA0KPiAr
ICAgICAgICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMiLA0KPiArICAgICAgICAiRXZlbnRO
YW1lIjogIk9GRkNPUkVfUkVRVUVTVFNfT1VUU1RBTkRJTkcuQ1lDTEVTX1dJVEhfREFUQV9S
RCIsDQo+ICsgICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjIwMDAwMDMiLA0KPiArICAg
ICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJDeWNsZXMgd2hlbiBvZmZjb3JlIG91dHN0YW5k
aW5nIGNhY2hlYWJsZSBDb3JlIERhdGEgUmVhZCB0cmFuc2FjdGlvbnMgYXJlIHByZXNlbnQg
aW4gU3VwZXJRdWV1ZSAoU1EpLCBxdWV1ZSB0byB1bmNvcmUuIiwNCj4gKyAgICAgICAgIkNv
dW50ZXJNYXNrIjogIjEiDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJDb2xs
ZWN0UEVCU1JlY29yZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9uIjog
IkNvdW50cyB0aGUgRGVtYW5kIERhdGEgUmVhZCByZXF1ZXN0cyBzZW50IHRvIHVuY29yZS4g
VXNlIGl0IGluIGNvbmp1bmN0aW9uIHdpdGggT0ZGQ09SRV9SRVFVRVNUU19PVVRTVEFORElO
RyB0byBkZXRlcm1pbmUgYXZlcmFnZSBsYXRlbmN5IGluIHRoZSB1bmNvcmUuIiwNCj4gKyAg
ICAgICAgIkV2ZW50Q29kZSI6ICIweEIwIiwNCj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMCwx
LDIsMyIsDQo+ICsgICAgICAgICJVTWFzayI6ICIweDEiLA0KPiArICAgICAgICAiUEVCU2Nv
dW50ZXJzIjogIjAsMSwyLDMiLA0KPiArICAgICAgICAiRXZlbnROYW1lIjogIk9GRkNPUkVf
UkVRVUVTVFMuREVNQU5EX0RBVEFfUkQiLA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1
ZSI6ICIxMDAwMDMiLA0KPiArICAgICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJEZW1hbmQg
RGF0YSBSZWFkIHJlcXVlc3RzIHNlbnQgdG8gdW5jb3JlIg0KPiArICAgIH0sDQo+ICsgICAg
ew0KPiArICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQ
dWJsaWNEZXNjcmlwdGlvbiI6ICJDb3VudHMgdGhlIGRlbWFuZCBSRk8gKHJlYWQgZm9yIG93
bmVyc2hpcCkgcmVxdWVzdHMgaW5jbHVkaW5nIHJlZ3VsYXIgUkZPcywgbG9ja3MsIEl0b00u
IiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIweEIwIiwNCj4gKyAgICAgICAgIkNvdW50
ZXIiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJVTWFzayI6ICIweDQiLA0KPiArICAgICAg
ICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMiLA0KPiArICAgICAgICAiRXZlbnROYW1lIjog
Ik9GRkNPUkVfUkVRVUVTVFMuREVNQU5EX1JGTyIsDQo+ICsgICAgICAgICJTYW1wbGVBZnRl
clZhbHVlIjogIjEwMDAwMyIsDQo+ICsgICAgICAgICJCcmllZkRlc2NyaXB0aW9uIjogIkRl
bWFuZCBSRk8gcmVxdWVzdHMgaW5jbHVkaW5nIHJlZ3VsYXIgUkZPcywgbG9ja3MsIEl0b00i
DQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJDb2xsZWN0UEVCU1JlY29yZCI6
ICIyIiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9uIjogIkNvdW50cyB0aGUgZGVt
YW5kIGFuZCBwcmVmZXRjaCBkYXRhIHJlYWRzLiBBbGwgQ29yZSBEYXRhIFJlYWRzIGluY2x1
ZGUgY2FjaGVhYmxlICdEZW1hbmRzJyBhbmQgTDIgcHJlZmV0Y2hlcnMgKG5vdCBMMyBwcmVm
ZXRjaGVycykuIENvdW50aW5nIGFsc28gY292ZXJzIHJlYWRzIGR1ZSB0byBwYWdlIHdhbGtz
IHJlc3VsdGVkIGZyb20gYW55IHJlcXVlc3QgdHlwZS4iLA0KPiArICAgICAgICAiRXZlbnRD
b2RlIjogIjB4QjAiLA0KPiArICAgICAgICAiQ291bnRlciI6ICIwLDEsMiwzIiwNCj4gKyAg
ICAgICAgIlVNYXNrIjogIjB4OCIsDQo+ICsgICAgICAgICJQRUJTY291bnRlcnMiOiAiMCwx
LDIsMyIsDQo+ICsgICAgICAgICJFdmVudE5hbWUiOiAiT0ZGQ09SRV9SRVFVRVNUUy5BTExf
REFUQV9SRCIsDQo+ICsgICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjEwMDAwMyIsDQo+
ICsgICAgICAgICJCcmllZkRlc2NyaXB0aW9uIjogIkRlbWFuZCBhbmQgcHJlZmV0Y2ggZGF0
YSByZWFkcyINCj4gKyAgICB9LA0KPiArICAgIHsNCj4gKyAgICAgICAgIkNvbGxlY3RQRUJT
UmVjb3JkIjogIjIiLA0KPiArICAgICAgICAiUHVibGljRGVzY3JpcHRpb24iOiAiQ291bnRz
IG1lbW9yeSB0cmFuc2FjdGlvbnMgcmVhY2hlZCB0aGUgc3VwZXIgcXVldWUgaW5jbHVkaW5n
IHJlcXVlc3RzIGluaXRpYXRlZCBieSB0aGUgY29yZSwgYWxsIEwzIHByZWZldGNoZXMsIHBh
Z2Ugd2Fsa3MsIGV0Yy4uIiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIweEIwIiwNCj4g
KyAgICAgICAgIkNvdW50ZXIiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJVTWFzayI6ICIw
eDgwIiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzIiwNCj4gKyAgICAg
ICAgIkV2ZW50TmFtZSI6ICJPRkZDT1JFX1JFUVVFU1RTLkFMTF9SRVFVRVNUUyIsDQo+ICsg
ICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjEwMDAwMyIsDQo+ICsgICAgICAgICJCcmll
ZkRlc2NyaXB0aW9uIjogIkFueSBtZW1vcnkgdHJhbnNhY3Rpb24gdGhhdCByZWFjaGVkIHRo
ZSBTUS4iDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJQRUJTIjogIjEiLA0K
PiArICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJs
aWNEZXNjcmlwdGlvbiI6ICJDb3VudHMgcmV0aXJlZCBsb2FkIGluc3RydWN0aW9ucyB0aGF0
IHRydWUgbWlzcyB0aGUgU1RMQi4iLA0KPiArICAgICAgICAiRXZlbnRDb2RlIjogIjB4RDAi
LA0KPiArICAgICAgICAiQ291bnRlciI6ICIwLDEsMiwzIiwNCj4gKyAgICAgICAgIlVNYXNr
IjogIjB4MTEiLA0KPiArICAgICAgICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMiLA0KPiAr
ICAgICAgICAiRXZlbnROYW1lIjogIk1FTV9JTlNUX1JFVElSRUQuU1RMQl9NSVNTX0xPQURT
IiwNCj4gKyAgICAgICAgIlNhbXBsZUFmdGVyVmFsdWUiOiAiMTAwMDAzIiwNCj4gKyAgICAg
ICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiUmV0aXJlZCBsb2FkIGluc3RydWN0aW9ucyB0aGF0
IG1pc3MgdGhlIFNUTEIuIiwNCj4gKyAgICAgICAgIkRhdGFfTEEiOiAiMSINCj4gKyAgICB9
LA0KPiArICAgIHsNCj4gKyAgICAgICAgIlBFQlMiOiAiMSIsDQo+ICsgICAgICAgICJDb2xs
ZWN0UEVCU1JlY29yZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9uIjog
IkNvdW50cyByZXRpcmVkIHN0b3JlIGluc3RydWN0aW9ucyB0aGF0IHRydWUgbWlzcyB0aGUg
U1RMQi4iLA0KPiArICAgICAgICAiRXZlbnRDb2RlIjogIjB4RDAiLA0KPiArICAgICAgICAi
Q291bnRlciI6ICIwLDEsMiwzIiwNCj4gKyAgICAgICAgIlVNYXNrIjogIjB4MTIiLA0KPiAr
ICAgICAgICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMiLA0KPiArICAgICAgICAiRXZlbnRO
YW1lIjogIk1FTV9JTlNUX1JFVElSRUQuU1RMQl9NSVNTX1NUT1JFUyIsDQo+ICsgICAgICAg
ICJTYW1wbGVBZnRlclZhbHVlIjogIjEwMDAwMyIsDQo+ICsgICAgICAgICJCcmllZkRlc2Ny
aXB0aW9uIjogIlJldGlyZWQgc3RvcmUgaW5zdHJ1Y3Rpb25zIHRoYXQgbWlzcyB0aGUgU1RM
Qi4iLA0KPiArICAgICAgICAiRGF0YV9MQSI6ICIxIiwNCj4gKyAgICAgICAgIkwxX0hpdF9J
bmRpY2F0aW9uIjogIjEiDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJQRUJT
IjogIjEiLA0KPiArICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAg
ICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJDb3VudHMgcmV0aXJlZCBsb2FkIGluc3RydWN0
aW9ucyB3aXRoIGxvY2tlZCBhY2Nlc3MuIiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIw
eEQwIiwNCj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJV
TWFzayI6ICIweDIxIiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzIiwN
Cj4gKyAgICAgICAgIkV2ZW50TmFtZSI6ICJNRU1fSU5TVF9SRVRJUkVELkxPQ0tfTE9BRFMi
LA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIxMDAwMDciLA0KPiArICAgICAg
ICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJSZXRpcmVkIGxvYWQgaW5zdHJ1Y3Rpb25zIHdpdGgg
bG9ja2VkIGFjY2Vzcy4iLA0KPiArICAgICAgICAiRGF0YV9MQSI6ICIxIg0KPiArICAgIH0s
DQo+ICsgICAgew0KPiArICAgICAgICAiUEVCUyI6ICIxIiwNCj4gKyAgICAgICAgIkNvbGxl
Y3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAiUHVibGljRGVzY3JpcHRpb24iOiAi
Q291bnRzIHJldGlyZWQgbG9hZCBpbnN0cnVjdGlvbnMgdGhhdCBzcGxpdCBhY3Jvc3MgYSBj
YWNoZWxpbmUgYm91bmRhcnkuIiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIweEQwIiwN
Cj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJVTWFzayI6
ICIweDQxIiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzIiwNCj4gKyAg
ICAgICAgIkV2ZW50TmFtZSI6ICJNRU1fSU5TVF9SRVRJUkVELlNQTElUX0xPQURTIiwNCj4g
KyAgICAgICAgIlNhbXBsZUFmdGVyVmFsdWUiOiAiMTAwMDAzIiwNCj4gKyAgICAgICAgIkJy
aWVmRGVzY3JpcHRpb24iOiAiUmV0aXJlZCBsb2FkIGluc3RydWN0aW9ucyB0aGF0IHNwbGl0
IGFjcm9zcyBhIGNhY2hlbGluZSBib3VuZGFyeS4iLA0KPiArICAgICAgICAiRGF0YV9MQSI6
ICIxIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAiUEVCUyI6ICIxIiwNCj4g
KyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAiUHVibGlj
RGVzY3JpcHRpb24iOiAiQ291bnRzIHJldGlyZWQgc3RvcmUgaW5zdHJ1Y3Rpb25zIHRoYXQg
c3BsaXQgYWNyb3NzIGEgY2FjaGVsaW5lIGJvdW5kYXJ5LiIsDQo+ICsgICAgICAgICJFdmVu
dENvZGUiOiAiMHhEMCIsDQo+ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMiLA0KPiAr
ICAgICAgICAiVU1hc2siOiAiMHg0MiIsDQo+ICsgICAgICAgICJQRUJTY291bnRlcnMiOiAi
MCwxLDIsMyIsDQo+ICsgICAgICAgICJFdmVudE5hbWUiOiAiTUVNX0lOU1RfUkVUSVJFRC5T
UExJVF9TVE9SRVMiLA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIxMDAwMDMi
LA0KPiArICAgICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJSZXRpcmVkIHN0b3JlIGluc3Ry
dWN0aW9ucyB0aGF0IHNwbGl0IGFjcm9zcyBhIGNhY2hlbGluZSBib3VuZGFyeS4iLA0KPiAr
ICAgICAgICAiRGF0YV9MQSI6ICIxIiwNCj4gKyAgICAgICAgIkwxX0hpdF9JbmRpY2F0aW9u
IjogIjEiDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJQRUJTIjogIjEiLA0K
PiArICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJs
aWNEZXNjcmlwdGlvbiI6ICJDb3VudHMgYWxsIHJldGlyZWQgbG9hZCBpbnN0cnVjdGlvbnMu
IFRoaXMgZXZlbnQgYWNjb3VudHMgZm9yIFNXIHByZWZldGNoIGluc3RydWN0aW9ucyBmb3Ig
bG9hZHMuIiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIweEQwIiwNCj4gKyAgICAgICAg
IkNvdW50ZXIiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJVTWFzayI6ICIweDgxIiwNCj4g
KyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzIiwNCj4gKyAgICAgICAgIkV2ZW50
TmFtZSI6ICJNRU1fSU5TVF9SRVRJUkVELkFMTF9MT0FEUyIsDQo+ICsgICAgICAgICJTYW1w
bGVBZnRlclZhbHVlIjogIjIwMDAwMDMiLA0KPiArICAgICAgICAiQnJpZWZEZXNjcmlwdGlv
biI6ICJBbGwgcmV0aXJlZCBsb2FkIGluc3RydWN0aW9ucy4iLA0KPiArICAgICAgICAiRGF0
YV9MQSI6ICIxIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAiUEVCUyI6ICIx
IiwNCj4gKyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAi
UHVibGljRGVzY3JpcHRpb24iOiAiQ291bnRzIGFsbCByZXRpcmVkIHN0b3JlIGluc3RydWN0
aW9ucy4gVGhpcyBldmVudCBhY2NvdW50IGZvciBTVyBwcmVmZXRjaCBpbnN0cnVjdGlvbnMg
YW5kIFBSRUZFVENIVyBpbnN0cnVjdGlvbiBmb3Igc3RvcmVzLiIsDQo+ICsgICAgICAgICJF
dmVudENvZGUiOiAiMHhEMCIsDQo+ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMiLA0K
PiArICAgICAgICAiVU1hc2siOiAiMHg4MiIsDQo+ICsgICAgICAgICJQRUJTY291bnRlcnMi
OiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJFdmVudE5hbWUiOiAiTUVNX0lOU1RfUkVUSVJF
RC5BTExfU1RPUkVTIiwNCj4gKyAgICAgICAgIlNhbXBsZUFmdGVyVmFsdWUiOiAiMjAwMDAw
MyIsDQo+ICsgICAgICAgICJCcmllZkRlc2NyaXB0aW9uIjogIkFsbCByZXRpcmVkIHN0b3Jl
IGluc3RydWN0aW9ucy4iLA0KPiArICAgICAgICAiRGF0YV9MQSI6ICIxIiwNCj4gKyAgICAg
ICAgIkwxX0hpdF9JbmRpY2F0aW9uIjogIjEiDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsg
ICAgICAgICJQRUJTIjogIjEiLA0KPiArICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAi
MiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJDb3VudHMgcmV0aXJlZCBs
b2FkIGluc3RydWN0aW9ucyB3aXRoIGF0IGxlYXN0IG9uZSB1b3AgdGhhdCBoaXQgaW4gdGhl
IEwxIGRhdGEgY2FjaGUuIFRoaXMgZXZlbnQgaW5jbHVkZXMgYWxsIFNXIHByZWZldGNoZXMg
YW5kIGxvY2sgaW5zdHJ1Y3Rpb25zIHJlZ2FyZGxlc3Mgb2YgdGhlIGRhdGEgc291cmNlLiIs
DQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHhEMSIsDQo+ICsgICAgICAgICJDb3VudGVy
IjogIjAsMSwyLDMiLA0KPiArICAgICAgICAiVU1hc2siOiAiMHgxIiwNCj4gKyAgICAgICAg
IlBFQlNjb3VudGVycyI6ICIwLDEsMiwzIiwNCj4gKyAgICAgICAgIkV2ZW50TmFtZSI6ICJN
RU1fTE9BRF9SRVRJUkVELkwxX0hJVCIsDQo+ICsgICAgICAgICJTYW1wbGVBZnRlclZhbHVl
IjogIjIwMDAwMDMiLA0KPiArICAgICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJSZXRpcmVk
IGxvYWQgaW5zdHJ1Y3Rpb25zIHdpdGggTDEgY2FjaGUgaGl0cyBhcyBkYXRhIHNvdXJjZXMi
LA0KPiArICAgICAgICAiRGF0YV9MQSI6ICIxIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiAr
ICAgICAgICAiUEVCUyI6ICIxIiwNCj4gKyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjog
IjIiLA0KPiArICAgICAgICAiUHVibGljRGVzY3JpcHRpb24iOiAiQ291bnRzIHJldGlyZWQg
bG9hZCBpbnN0cnVjdGlvbnMgd2l0aCBMMiBjYWNoZSBoaXRzIGFzIGRhdGEgc291cmNlcy4i
LA0KPiArICAgICAgICAiRXZlbnRDb2RlIjogIjB4RDEiLA0KPiArICAgICAgICAiQ291bnRl
ciI6ICIwLDEsMiwzIiwNCj4gKyAgICAgICAgIlVNYXNrIjogIjB4MiIsDQo+ICsgICAgICAg
ICJQRUJTY291bnRlcnMiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJFdmVudE5hbWUiOiAi
TUVNX0xPQURfUkVUSVJFRC5MMl9ISVQiLA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1
ZSI6ICIxMDAwMDMiLA0KPiArICAgICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJSZXRpcmVk
IGxvYWQgaW5zdHJ1Y3Rpb25zIHdpdGggTDIgY2FjaGUgaGl0cyBhcyBkYXRhIHNvdXJjZXMi
LA0KPiArICAgICAgICAiRGF0YV9MQSI6ICIxIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiAr
ICAgICAgICAiUEVCUyI6ICIxIiwNCj4gKyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjog
IjIiLA0KPiArICAgICAgICAiUHVibGljRGVzY3JpcHRpb24iOiAiQ291bnRzIHJldGlyZWQg
bG9hZCBpbnN0cnVjdGlvbnMgd2l0aCBhdCBsZWFzdCBvbmUgdW9wIHRoYXQgaGl0IGluIHRo
ZSBMMyBjYWNoZS4iLA0KPiArICAgICAgICAiRXZlbnRDb2RlIjogIjB4RDEiLA0KPiArICAg
ICAgICAiQ291bnRlciI6ICIwLDEsMiwzIiwNCj4gKyAgICAgICAgIlVNYXNrIjogIjB4NCIs
DQo+ICsgICAgICAgICJQRUJTY291bnRlcnMiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJF
dmVudE5hbWUiOiAiTUVNX0xPQURfUkVUSVJFRC5MM19ISVQiLA0KPiArICAgICAgICAiU2Ft
cGxlQWZ0ZXJWYWx1ZSI6ICI1MDAyMSIsDQo+ICsgICAgICAgICJCcmllZkRlc2NyaXB0aW9u
IjogIlJldGlyZWQgbG9hZCBpbnN0cnVjdGlvbnMgd2l0aCBMMyBjYWNoZSBoaXRzIGFzIGRh
dGEgc291cmNlcyIsDQo+ICsgICAgICAgICJEYXRhX0xBIjogIjEiDQo+ICsgICAgfSwNCj4g
KyAgICB7DQo+ICsgICAgICAgICJQRUJTIjogIjEiLA0KPiArICAgICAgICAiQ29sbGVjdFBF
QlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJDb3Vu
dHMgcmV0aXJlZCBsb2FkIGluc3RydWN0aW9ucyB3aXRoIGF0IGxlYXN0IG9uZSB1b3AgdGhh
dCBtaXNzZWQgaW4gdGhlIEwxIGNhY2hlLiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAi
MHhEMSIsDQo+ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMiLA0KPiArICAgICAgICAi
VU1hc2siOiAiMHg4IiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzIiwN
Cj4gKyAgICAgICAgIkV2ZW50TmFtZSI6ICJNRU1fTE9BRF9SRVRJUkVELkwxX01JU1MiLA0K
PiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIxMDAwMDMiLA0KPiArICAgICAgICAi
QnJpZWZEZXNjcmlwdGlvbiI6ICJSZXRpcmVkIGxvYWQgaW5zdHJ1Y3Rpb25zIG1pc3NlZCBM
MSBjYWNoZSBhcyBkYXRhIHNvdXJjZXMiLA0KPiArICAgICAgICAiRGF0YV9MQSI6ICIxIg0K
PiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAiUEVCUyI6ICIxIiwNCj4gKyAgICAg
ICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAiUHVibGljRGVzY3Jp
cHRpb24iOiAiQ291bnRzIHJldGlyZWQgbG9hZCBpbnN0cnVjdGlvbnMgbWlzc2VkIEwyIGNh
Y2hlIGFzIGRhdGEgc291cmNlcy4iLA0KPiArICAgICAgICAiRXZlbnRDb2RlIjogIjB4RDEi
LA0KPiArICAgICAgICAiQ291bnRlciI6ICIwLDEsMiwzIiwNCj4gKyAgICAgICAgIlVNYXNr
IjogIjB4MTAiLA0KPiArICAgICAgICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMiLA0KPiAr
ICAgICAgICAiRXZlbnROYW1lIjogIk1FTV9MT0FEX1JFVElSRUQuTDJfTUlTUyIsDQo+ICsg
ICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjUwMDIxIiwNCj4gKyAgICAgICAgIkJyaWVm
RGVzY3JpcHRpb24iOiAiUmV0aXJlZCBsb2FkIGluc3RydWN0aW9ucyBtaXNzZWQgTDIgY2Fj
aGUgYXMgZGF0YSBzb3VyY2VzIiwNCj4gKyAgICAgICAgIkRhdGFfTEEiOiAiMSINCj4gKyAg
ICB9LA0KPiArICAgIHsNCj4gKyAgICAgICAgIlBFQlMiOiAiMSIsDQo+ICsgICAgICAgICJD
b2xsZWN0UEVCU1JlY29yZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9u
IjogIkNvdW50cyByZXRpcmVkIGxvYWQgaW5zdHJ1Y3Rpb25zIHdpdGggYXQgbGVhc3Qgb25l
IHVvcCB0aGF0IG1pc3NlZCBpbiB0aGUgTDMgY2FjaGUuIiwNCj4gKyAgICAgICAgIkV2ZW50
Q29kZSI6ICIweEQxIiwNCj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMCwxLDIsMyIsDQo+ICsg
ICAgICAgICJVTWFzayI6ICIweDIwIiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIw
LDEsMiwzIiwNCj4gKyAgICAgICAgIkV2ZW50TmFtZSI6ICJNRU1fTE9BRF9SRVRJUkVELkwz
X01JU1MiLA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIxMDAwMDciLA0KPiAr
ICAgICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJSZXRpcmVkIGxvYWQgaW5zdHJ1Y3Rpb25z
IG1pc3NlZCBMMyBjYWNoZSBhcyBkYXRhIHNvdXJjZXMiLA0KPiArICAgICAgICAiRGF0YV9M
QSI6ICIxIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAiUEVCUyI6ICIxIiwN
Cj4gKyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAiUHVi
bGljRGVzY3JpcHRpb24iOiAiQ291bnRzIHJldGlyZWQgbG9hZCBpbnN0cnVjdGlvbnMgd2l0
aCBhdCBsZWFzdCBvbmUgdW9wIHdhcyBsb2FkIG1pc3NlZCBpbiBMMSBidXQgaGl0IEZCIChG
aWxsIEJ1ZmZlcnMpIGR1ZSB0byBwcmVjZWRpbmcgbWlzcyB0byB0aGUgc2FtZSBjYWNoZSBs
aW5lIHdpdGggZGF0YSBub3QgcmVhZHkuIiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIw
eGQxIiwNCj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJV
TWFzayI6ICIweDQwIiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzIiwN
Cj4gKyAgICAgICAgIkV2ZW50TmFtZSI6ICJNRU1fTE9BRF9SRVRJUkVELkZCX0hJVCIsDQo+
ICsgICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjEwMDAwNyIsDQo+ICsgICAgICAgICJC
cmllZkRlc2NyaXB0aW9uIjogIk51bWJlciBvZiBjb21wbGV0ZWQgZGVtYW5kIGxvYWQgcmVx
dWVzdHMgdGhhdCBtaXNzZWQgdGhlIEwxLCBidXQgaGl0IHRoZSBGQihmaWxsIGJ1ZmZlciks
IGJlY2F1c2UgYSBwcmVjZWRpbmcgbWlzcyB0byB0aGUgc2FtZSBjYWNoZWxpbmUgaW5pdGlh
dGVkIHRoZSBsaW5lIHRvIGJlIGJyb3VnaHQgaW50byBMMSwgYnV0IGRhdGEgaXMgbm90IHll
dCByZWFkeSBpbiBMMS4iLA0KPiArICAgICAgICAiRGF0YV9MQSI6ICIxIg0KPiArICAgIH0s
DQo+ICsgICAgew0KPiArICAgICAgICAiUEVCUyI6ICIxIiwNCj4gKyAgICAgICAgIkNvbGxl
Y3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAiUHVibGljRGVzY3JpcHRpb24iOiAi
Q291bnRzIHRoZSByZXRpcmVkIGxvYWQgaW5zdHJ1Y3Rpb25zIHdob3NlIGRhdGEgc291cmNl
cyB3ZXJlIEwzIGhpdCBhbmQgY3Jvc3MtY29yZSBzbm9vcCBtaXNzZWQgaW4gb24tcGtnIGNv
cmUgY2FjaGUuIiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIweGQyIiwNCj4gKyAgICAg
ICAgIkNvdW50ZXIiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJVTWFzayI6ICIweDEiLA0K
PiArICAgICAgICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMiLA0KPiArICAgICAgICAiRXZl
bnROYW1lIjogIk1FTV9MT0FEX0wzX0hJVF9SRVRJUkVELlhTTlBfTUlTUyIsDQo+ICsgICAg
ICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjIwMDExIiwNCj4gKyAgICAgICAgIkJyaWVmRGVz
Y3JpcHRpb24iOiAiUmV0aXJlZCBsb2FkIGluc3RydWN0aW9ucyB3aG9zZSBkYXRhIHNvdXJj
ZXMgd2VyZSBMMyBoaXQgYW5kIGNyb3NzLWNvcmUgc25vb3AgbWlzc2VkIGluIG9uLXBrZyBj
b3JlIGNhY2hlLiIsDQo+ICsgICAgICAgICJEYXRhX0xBIjogIjEiDQo+ICsgICAgfSwNCj4g
KyAgICB7DQo+ICsgICAgICAgICJQRUJTIjogIjEiLA0KPiArICAgICAgICAiQ29sbGVjdFBF
QlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJDb3Vu
dHMgcmV0aXJlZCBsb2FkIGluc3RydWN0aW9ucyB3aG9zZSBkYXRhIHNvdXJjZXMgd2VyZSBM
MyBhbmQgY3Jvc3MtY29yZSBzbm9vcCBoaXRzIGluIG9uLXBrZyBjb3JlIGNhY2hlLiIsDQo+
ICsgICAgICAgICJFdmVudENvZGUiOiAiMHhkMiIsDQo+ICsgICAgICAgICJDb3VudGVyIjog
IjAsMSwyLDMiLA0KPiArICAgICAgICAiVU1hc2siOiAiMHgyIiwNCj4gKyAgICAgICAgIlBF
QlNjb3VudGVycyI6ICIwLDEsMiwzIiwNCj4gKyAgICAgICAgIkV2ZW50TmFtZSI6ICJNRU1f
TE9BRF9MM19ISVRfUkVUSVJFRC5YU05QX0hJVCIsDQo+ICsgICAgICAgICJTYW1wbGVBZnRl
clZhbHVlIjogIjIwMDExIiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiUmV0
aXJlZCBsb2FkIGluc3RydWN0aW9ucyB3aG9zZSBkYXRhIHNvdXJjZXMgd2VyZSBMMyBhbmQg
Y3Jvc3MtY29yZSBzbm9vcCBoaXRzIGluIG9uLXBrZyBjb3JlIGNhY2hlIiwNCj4gKyAgICAg
ICAgIkRhdGFfTEEiOiAiMSINCj4gKyAgICB9LA0KPiArICAgIHsNCj4gKyAgICAgICAgIlBF
QlMiOiAiMSIsDQo+ICsgICAgICAgICJDb2xsZWN0UEVCU1JlY29yZCI6ICIyIiwNCj4gKyAg
ICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9uIjogIkNvdW50cyByZXRpcmVkIGxvYWQgaW5zdHJ1
Y3Rpb25zIHdob3NlIGRhdGEgc291cmNlcyB3ZXJlIEhpdE0gcmVzcG9uc2VzIGZyb20gc2hh
cmVkIEwzLiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHhkMiIsDQo+ICsgICAgICAg
ICJDb3VudGVyIjogIjAsMSwyLDMiLA0KPiArICAgICAgICAiVU1hc2siOiAiMHg0IiwNCj4g
KyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzIiwNCj4gKyAgICAgICAgIkV2ZW50
TmFtZSI6ICJNRU1fTE9BRF9MM19ISVRfUkVUSVJFRC5YU05QX0hJVE0iLA0KPiArICAgICAg
ICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIyMDAxMSIsDQo+ICsgICAgICAgICJCcmllZkRlc2Ny
aXB0aW9uIjogIlJldGlyZWQgbG9hZCBpbnN0cnVjdGlvbnMgd2hvc2UgZGF0YSBzb3VyY2Vz
IHdlcmUgSGl0TSByZXNwb25zZXMgZnJvbSBzaGFyZWQgTDMiLA0KPiArICAgICAgICAiRGF0
YV9MQSI6ICIxIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAiUEVCUyI6ICIx
IiwNCj4gKyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAi
UHVibGljRGVzY3JpcHRpb24iOiAiQ291bnRzIHJldGlyZWQgbG9hZCBpbnN0cnVjdGlvbnMg
d2hvc2UgZGF0YSBzb3VyY2VzIHdlcmUgaGl0cyBpbiBMMyB3aXRob3V0IHNub29wcyByZXF1
aXJlZC4iLA0KPiArICAgICAgICAiRXZlbnRDb2RlIjogIjB4ZDIiLA0KPiArICAgICAgICAi
Q291bnRlciI6ICIwLDEsMiwzIiwNCj4gKyAgICAgICAgIlVNYXNrIjogIjB4OCIsDQo+ICsg
ICAgICAgICJQRUJTY291bnRlcnMiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJFdmVudE5h
bWUiOiAiTUVNX0xPQURfTDNfSElUX1JFVElSRUQuWFNOUF9OT05FIiwNCj4gKyAgICAgICAg
IlNhbXBsZUFmdGVyVmFsdWUiOiAiMTAwMDAzIiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3Jp
cHRpb24iOiAiUmV0aXJlZCBsb2FkIGluc3RydWN0aW9ucyB3aG9zZSBkYXRhIHNvdXJjZXMg
d2VyZSBoaXRzIGluIEwzIHdpdGhvdXQgc25vb3BzIHJlcXVpcmVkIiwNCj4gKyAgICAgICAg
IkRhdGFfTEEiOiAiMSINCj4gKyAgICB9LA0KPiArICAgIHsNCj4gKyAgICAgICAgIkNvbGxl
Y3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAiUHVibGljRGVzY3JpcHRpb24iOiAi
Q291bnRzIHRoZSBudW1iZXIgb2YgTDIgY2FjaGUgbGluZXMgZmlsbGluZyB0aGUgTDIuIENv
dW50aW5nIGRvZXMgbm90IGNvdmVyIHJlamVjdHMuIiwNCj4gKyAgICAgICAgIkV2ZW50Q29k
ZSI6ICIweEYxIiwNCj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMCwxLDIsMyIsDQo+ICsgICAg
ICAgICJVTWFzayI6ICIweDFmIiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEs
MiwzIiwNCj4gKyAgICAgICAgIkV2ZW50TmFtZSI6ICJMMl9MSU5FU19JTi5BTEwiLA0KPiAr
ICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIxMDAwMDMiLA0KPiArICAgICAgICAiQnJp
ZWZEZXNjcmlwdGlvbiI6ICJMMiBjYWNoZSBsaW5lcyBmaWxsaW5nIEwyIg0KPiArICAgIH0s
DQo+ICsgICAgew0KPiArICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsg
ICAgICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJDb3VudHMgdGhlIGN5Y2xlcyBmb3Igd2hp
Y2ggdGhlIHRocmVhZCBpcyBhY3RpdmUgYW5kIHRoZSBzdXBlclEgY2Fubm90IHRha2UgYW55
IG1vcmUgZW50cmllcy4iLA0KPiArICAgICAgICAiRXZlbnRDb2RlIjogIjB4RjQiLA0KPiAr
ICAgICAgICAiQ291bnRlciI6ICIwLDEsMiwzIiwNCj4gKyAgICAgICAgIlVNYXNrIjogIjB4
NCIsDQo+ICsgICAgICAgICJQRUJTY291bnRlcnMiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAg
ICJFdmVudE5hbWUiOiAiU1FfTUlTQy5TUV9GVUxMIiwNCj4gKyAgICAgICAgIlNhbXBsZUFm
dGVyVmFsdWUiOiAiMTAwMDAzIiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAi
Q3ljbGVzIHRoZSB0aHJlYWQgaXMgYWN0aXZlIGFuZCBzdXBlclEgY2Fubm90IHRha2UgYW55
IG1vcmUgZW50cmllcy4iDQo+ICsgICAgfQ0KPiArXQ0KPiBcIE5vIG5ld2xpbmUgYXQgZW5k
IG9mIGZpbGUNCj4gZGlmZiAtLWdpdCBhL3Rvb2xzL3BlcmYvcG11LWV2ZW50cy9hcmNoL3g4
Ni9pY2VsYWtlL2Zsb2F0aW5nLXBvaW50Lmpzb24gYi90b29scy9wZXJmL3BtdS1ldmVudHMv
YXJjaC94ODYvaWNlbGFrZS9mbG9hdGluZy1wb2ludC5qc29uDQo+IG5ldyBmaWxlIG1vZGUg
MTAwNjQ0DQo+IGluZGV4IDAwMDAwMDAwMDAwMC4uNTk0YzU1NTFmNjEwDQo+IC0tLSAvZGV2
L251bGwNCj4gKysrIGIvdG9vbHMvcGVyZi9wbXUtZXZlbnRzL2FyY2gveDg2L2ljZWxha2Uv
ZmxvYXRpbmctcG9pbnQuanNvbg0KPiBAQCAtMCwwICsxLDEwMiBAQA0KPiArWw0KPiArICAg
IHsNCj4gKyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAi
UHVibGljRGVzY3JpcHRpb24iOiAiQ291bnRzIGFsbCBtaWNyb2NvZGUgRmxvYXRpbmcgUG9p
bnQgYXNzaXN0cy4iLA0KPiArICAgICAgICAiRXZlbnRDb2RlIjogIjB4QzEiLA0KPiArICAg
ICAgICAiQ291bnRlciI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAgICAiVU1hc2si
OiAiMHgyIiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzLDQsNSw2LDci
LA0KPiArICAgICAgICAiRXZlbnROYW1lIjogIkFTU0lTVFMuRlAiLA0KPiArICAgICAgICAi
U2FtcGxlQWZ0ZXJWYWx1ZSI6ICIxMDAwMDMiLA0KPiArICAgICAgICAiQnJpZWZEZXNjcmlw
dGlvbiI6ICJDb3VudHMgYWxsIG1pY3JvY29kZSBGUCBhc3Npc3RzLiIsDQo+ICsgICAgICAg
ICJDb3VudGVyTWFzayI6ICIxIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAi
Q29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNjcmlwdGlv
biI6ICJDb3VudHMgbnVtYmVyIG9mIFNTRS9BVlggY29tcHV0YXRpb25hbCBzY2FsYXIgZG91
YmxlIHByZWNpc2lvbiBmbG9hdGluZy1wb2ludCBpbnN0cnVjdGlvbnMgcmV0aXJlZDsgc29t
ZSBpbnN0cnVjdGlvbnMgd2lsbCBjb3VudCB0d2ljZSBhcyBub3RlZCBiZWxvdy4gIEVhY2gg
Y291bnQgcmVwcmVzZW50cyAxIGNvbXB1dGF0aW9uYWwgb3BlcmF0aW9uLiBBcHBsaWVzIHRv
IFNTRSogYW5kIEFWWCogc2NhbGFyIGRvdWJsZSBwcmVjaXNpb24gZmxvYXRpbmctcG9pbnQg
aW5zdHJ1Y3Rpb25zOiBBREQgU1VCIE1VTCBESVYgTUlOIE1BWCBTUVJUIEZNKE4pQUREL1NV
Qi4gIEZNKE4pQUREL1NVQiBpbnN0cnVjdGlvbnMgY291bnQgdHdpY2UgYXMgdGhleSBwZXJm
b3JtIDIgY2FsY3VsYXRpb25zIHBlciBlbGVtZW50LiIsDQo+ICsgICAgICAgICJFdmVudENv
ZGUiOiAiMHhjNyIsDQo+ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMsNCw1LDYsNyIs
DQo+ICsgICAgICAgICJVTWFzayI6ICIweDEiLA0KPiArICAgICAgICAiUEVCU2NvdW50ZXJz
IjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJFdmVudE5hbWUiOiAiRlBfQVJJ
VEhfSU5TVF9SRVRJUkVELlNDQUxBUl9ET1VCTEUiLA0KPiArICAgICAgICAiU2FtcGxlQWZ0
ZXJWYWx1ZSI6ICIyMDAwMDAzIiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAi
TnVtYmVyIG9mIFNTRS9BVlggY29tcHV0YXRpb25hbCBzY2FsYXIgZG91YmxlIHByZWNpc2lv
biBmbG9hdGluZy1wb2ludCBpbnN0cnVjdGlvbnMgcmV0aXJlZDsgc29tZSBpbnN0cnVjdGlv
bnMgd2lsbCBjb3VudCB0d2ljZSBhcyBub3RlZCBiZWxvdy4gIEVhY2ggY291bnQgcmVwcmVz
ZW50cyAxIGNvbXB1dGF0aW9uLiBBcHBsaWVzIHRvIFNTRSogYW5kIEFWWCogc2NhbGFyIGRv
dWJsZSBwcmVjaXNpb24gZmxvYXRpbmctcG9pbnQgaW5zdHJ1Y3Rpb25zOiBBREQgU1VCIE1V
TCBESVYgTUlOIE1BWCBSQ1AxNCBSU1FSVDE0IFJBTkdFIFNRUlQgRFBQIEZNKE4pQUREL1NV
Qi4gIERQUCBhbmQgRk0oTilBREQvU1VCIGluc3RydWN0aW9ucyBjb3VudCB0d2ljZSBhcyB0
aGV5IHBlcmZvcm0gMiBjYWxjdWxhdGlvbnMgcGVyIGVsZW1lbnQuIg0KPiArICAgIH0sDQo+
ICsgICAgew0KPiArICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAg
ICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJDb3VudHMgbnVtYmVyIG9mIFNTRS9BVlggY29t
cHV0YXRpb25hbCBzY2FsYXIgc2luZ2xlIHByZWNpc2lvbiBmbG9hdGluZy1wb2ludCBpbnN0
cnVjdGlvbnMgcmV0aXJlZDsgc29tZSBpbnN0cnVjdGlvbnMgd2lsbCBjb3VudCB0d2ljZSBh
cyBub3RlZCBiZWxvdy4gIEVhY2ggY291bnQgcmVwcmVzZW50cyAxIGNvbXB1dGF0aW9uYWwg
b3BlcmF0aW9uLiBBcHBsaWVzIHRvIFNTRSogYW5kIEFWWCogc2NhbGFyIHNpbmdsZSBwcmVj
aXNpb24gZmxvYXRpbmctcG9pbnQgaW5zdHJ1Y3Rpb25zOiBBREQgU1VCIE1VTCBESVYgTUlO
IE1BWCBTUVJUIFJTUVJUIFJDUCBGTShOKUFERC9TVUIuICBGTShOKUFERC9TVUIgaW5zdHJ1
Y3Rpb25zIGNvdW50IHR3aWNlIGFzIHRoZXkgcGVyZm9ybSAyIGNhbGN1bGF0aW9ucyBwZXIg
ZWxlbWVudC4iLA0KPiArICAgICAgICAiRXZlbnRDb2RlIjogIjB4YzciLA0KPiArICAgICAg
ICAiQ291bnRlciI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAgICAiVU1hc2siOiAi
MHgyIiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzLDQsNSw2LDciLA0K
PiArICAgICAgICAiRXZlbnROYW1lIjogIkZQX0FSSVRIX0lOU1RfUkVUSVJFRC5TQ0FMQVJf
U0lOR0xFIiwNCj4gKyAgICAgICAgIlNhbXBsZUFmdGVyVmFsdWUiOiAiMjAwMDAwMyIsDQo+
ICsgICAgICAgICJCcmllZkRlc2NyaXB0aW9uIjogIk51bWJlciBvZiBTU0UvQVZYIGNvbXB1
dGF0aW9uYWwgc2NhbGFyIHNpbmdsZSBwcmVjaXNpb24gZmxvYXRpbmctcG9pbnQgaW5zdHJ1
Y3Rpb25zIHJldGlyZWQ7IHNvbWUgaW5zdHJ1Y3Rpb25zIHdpbGwgY291bnQgdHdpY2UgYXMg
bm90ZWQgYmVsb3cuICBFYWNoIGNvdW50IHJlcHJlc2VudHMgMSBjb21wdXRhdGlvbi4gQXBw
bGllcyB0byBTU0UqIGFuZCBBVlgqIHNjYWxhciBzaW5nbGUgcHJlY2lzaW9uIGZsb2F0aW5n
LXBvaW50IGluc3RydWN0aW9uczogQUREIFNVQiBNVUwgRElWIE1JTiBNQVggUkNQMTQgUlNR
UlQxNCBSQU5HRSBTUVJUIERQUCBGTShOKUFERC9TVUIuICBEUFAgYW5kIEZNKE4pQUREL1NV
QiBpbnN0cnVjdGlvbnMgY291bnQgdHdpY2UgYXMgdGhleSBwZXJmb3JtIDIgY2FsY3VsYXRp
b25zIHBlciBlbGVtZW50LiINCj4gKyAgICB9LA0KPiArICAgIHsNCj4gKyAgICAgICAgIkNv
bGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAiUHVibGljRGVzY3JpcHRpb24i
OiAiQ291bnRzIG51bWJlciBvZiBTU0UvQVZYIGNvbXB1dGF0aW9uYWwgMTI4LWJpdCBwYWNr
ZWQgZG91YmxlIHByZWNpc2lvbiBmbG9hdGluZy1wb2ludCBpbnN0cnVjdGlvbnMgcmV0aXJl
ZDsgc29tZSBpbnN0cnVjdGlvbnMgd2lsbCBjb3VudCB0d2ljZSBhcyBub3RlZCBiZWxvdy4g
IEVhY2ggY291bnQgcmVwcmVzZW50cyAyIGNvbXB1dGF0aW9uIG9wZXJhdGlvbnMsIG9uZSBm
b3IgZWFjaCBlbGVtZW50LiAgQXBwbGllcyB0byBTU0UqIGFuZCBBVlgqIHBhY2tlZCBkb3Vi
bGUgcHJlY2lzaW9uIGZsb2F0aW5nLXBvaW50IGluc3RydWN0aW9uczogQUREIFNVQiBIQURE
IEhTVUIgU1VCQUREIE1VTCBESVYgTUlOIE1BWCBTUVJUIERQUCBGTShOKUFERC9TVUIuICBE
UFAgYW5kIEZNKE4pQUREL1NVQiBpbnN0cnVjdGlvbnMgY291bnQgdHdpY2UgYXMgdGhleSBw
ZXJmb3JtIDIgY2FsY3VsYXRpb25zIHBlciBlbGVtZW50LiIsDQo+ICsgICAgICAgICJFdmVu
dENvZGUiOiAiMHhjNyIsDQo+ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMsNCw1LDYs
NyIsDQo+ICsgICAgICAgICJVTWFzayI6ICIweDQiLA0KPiArICAgICAgICAiUEVCU2NvdW50
ZXJzIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJFdmVudE5hbWUiOiAiRlBf
QVJJVEhfSU5TVF9SRVRJUkVELjEyOEJfUEFDS0VEX0RPVUJMRSIsDQo+ICsgICAgICAgICJT
YW1wbGVBZnRlclZhbHVlIjogIjIwMDAwMDMiLA0KPiArICAgICAgICAiQnJpZWZEZXNjcmlw
dGlvbiI6ICJOdW1iZXIgb2YgU1NFL0FWWCBjb21wdXRhdGlvbmFsIDEyOC1iaXQgcGFja2Vk
IGRvdWJsZSBwcmVjaXNpb24gZmxvYXRpbmctcG9pbnQgaW5zdHJ1Y3Rpb25zIHJldGlyZWQ7
IHNvbWUgaW5zdHJ1Y3Rpb25zIHdpbGwgY291bnQgdHdpY2UgYXMgbm90ZWQgYmVsb3cuICBF
YWNoIGNvdW50IHJlcHJlc2VudHMgMiBjb21wdXRhdGlvbiBvcGVyYXRpb25zLCBvbmUgZm9y
IGVhY2ggZWxlbWVudC4gIEFwcGxpZXMgdG8gU1NFKiBhbmQgQVZYKiBwYWNrZWQgZG91Ymxl
IHByZWNpc2lvbiBmbG9hdGluZy1wb2ludCBpbnN0cnVjdGlvbnM6IEFERCBTVUIgSEFERCBI
U1VCIFNVQkFERCBNVUwgRElWIE1JTiBNQVggU1FSVCBSU1FSVDE0IFJDUDE0IFJBTkdFIERQ
UCBGTShOKUFERC9TVUIuICBEUFAgYW5kIEZNKE4pQUREL1NVQiBpbnN0cnVjdGlvbnMgY291
bnQgdHdpY2UgYXMgdGhleSBwZXJmb3JtIDIgY2FsY3VsYXRpb25zIHBlciBlbGVtZW50LiIN
Cj4gKyAgICB9LA0KPiArICAgIHsNCj4gKyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjog
IjIiLA0KPiArICAgICAgICAiUHVibGljRGVzY3JpcHRpb24iOiAiQ291bnRzIG51bWJlciBv
ZiBTU0UvQVZYIGNvbXB1dGF0aW9uYWwgMTI4LWJpdCBwYWNrZWQgc2luZ2xlIHByZWNpc2lv
biBmbG9hdGluZy1wb2ludCBpbnN0cnVjdGlvbnMgcmV0aXJlZDsgc29tZSBpbnN0cnVjdGlv
bnMgd2lsbCBjb3VudCB0d2ljZSBhcyBub3RlZCBiZWxvdy4gIEVhY2ggY291bnQgcmVwcmVz
ZW50cyA0IGNvbXB1dGF0aW9uIG9wZXJhdGlvbnMsIG9uZSBmb3IgZWFjaCBlbGVtZW50LiAg
QXBwbGllcyB0byBTU0UqIGFuZCBBVlgqIHBhY2tlZCBzaW5nbGUgcHJlY2lzaW9uIGZsb2F0
aW5nLXBvaW50IGluc3RydWN0aW9uczogQUREIFNVQiBIQUREIEhTVUIgU1VCQUREIE1VTCBE
SVYgTUlOIE1BWCBTUVJUIFJTUVJUIFJDUCBEUFAgRk0oTilBREQvU1VCLiAgRFBQIGFuZCBG
TShOKUFERC9TVUIgaW5zdHJ1Y3Rpb25zIGNvdW50IHR3aWNlIGFzIHRoZXkgcGVyZm9ybSAy
IGNhbGN1bGF0aW9ucyBwZXIgZWxlbWVudC4iLA0KPiArICAgICAgICAiRXZlbnRDb2RlIjog
IjB4YzciLA0KPiArICAgICAgICAiQ291bnRlciI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiAr
ICAgICAgICAiVU1hc2siOiAiMHg4IiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIw
LDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAgICAiRXZlbnROYW1lIjogIkZQX0FSSVRIX0lO
U1RfUkVUSVJFRC4xMjhCX1BBQ0tFRF9TSU5HTEUiLA0KPiArICAgICAgICAiU2FtcGxlQWZ0
ZXJWYWx1ZSI6ICIyMDAwMDAzIiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAi
TnVtYmVyIG9mIFNTRS9BVlggY29tcHV0YXRpb25hbCAxMjgtYml0IHBhY2tlZCBzaW5nbGUg
cHJlY2lzaW9uIGZsb2F0aW5nLXBvaW50IGluc3RydWN0aW9ucyByZXRpcmVkOyBzb21lIGlu
c3RydWN0aW9ucyB3aWxsIGNvdW50IHR3aWNlIGFzIG5vdGVkIGJlbG93LiAgRWFjaCBjb3Vu
dCByZXByZXNlbnRzIDQgY29tcHV0YXRpb24gb3BlcmF0aW9ucywgb25lIGZvciBlYWNoIGVs
ZW1lbnQuICBBcHBsaWVzIHRvIFNTRSogYW5kIEFWWCogcGFja2VkIHNpbmdsZSBwcmVjaXNp
b24gZmxvYXRpbmctcG9pbnQgaW5zdHJ1Y3Rpb25zOiBBREQgU1VCIE1VTCBESVYgTUlOIE1B
WCBSQ1AxNCBSU1FSVDE0IFNRUlQgRFBQIEZNKE4pQUREL1NVQi4gIERQUCBhbmQgRk0oTilB
REQvU1VCIGluc3RydWN0aW9ucyBjb3VudCB0d2ljZSBhcyB0aGV5IHBlcmZvcm0gMiBjYWxj
dWxhdGlvbnMgcGVyIGVsZW1lbnQuIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAg
ICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNjcmlw
dGlvbiI6ICJDb3VudHMgbnVtYmVyIG9mIFNTRS9BVlggY29tcHV0YXRpb25hbCAyNTYtYml0
IHBhY2tlZCBkb3VibGUgcHJlY2lzaW9uIGZsb2F0aW5nLXBvaW50IGluc3RydWN0aW9ucyBy
ZXRpcmVkOyBzb21lIGluc3RydWN0aW9ucyB3aWxsIGNvdW50IHR3aWNlIGFzIG5vdGVkIGJl
bG93LiAgRWFjaCBjb3VudCByZXByZXNlbnRzIDQgY29tcHV0YXRpb24gb3BlcmF0aW9ucywg
b25lIGZvciBlYWNoIGVsZW1lbnQuICBBcHBsaWVzIHRvIFNTRSogYW5kIEFWWCogcGFja2Vk
IGRvdWJsZSBwcmVjaXNpb24gZmxvYXRpbmctcG9pbnQgaW5zdHJ1Y3Rpb25zOiBBREQgU1VC
IEhBREQgSFNVQiBTVUJBREQgTVVMIERJViBNSU4gTUFYIFNRUlQgRk0oTilBREQvU1VCLiAg
Rk0oTilBREQvU1VCIGluc3RydWN0aW9ucyBjb3VudCB0d2ljZSBhcyB0aGV5IHBlcmZvcm0g
MiBjYWxjdWxhdGlvbnMgcGVyIGVsZW1lbnQuIiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6
ICIweGM3IiwNCj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMCwxLDIsMyw0LDUsNiw3IiwNCj4g
KyAgICAgICAgIlVNYXNrIjogIjB4MTAiLA0KPiArICAgICAgICAiUEVCU2NvdW50ZXJzIjog
IjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJFdmVudE5hbWUiOiAiRlBfQVJJVEhf
SU5TVF9SRVRJUkVELjI1NkJfUEFDS0VEX0RPVUJMRSIsDQo+ICsgICAgICAgICJTYW1wbGVB
ZnRlclZhbHVlIjogIjIwMDAwMDMiLA0KPiArICAgICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6
ICJOdW1iZXIgb2YgU1NFL0FWWCBjb21wdXRhdGlvbmFsIDI1Ni1iaXQgcGFja2VkIGRvdWJs
ZSBwcmVjaXNpb24gZmxvYXRpbmctcG9pbnQgaW5zdHJ1Y3Rpb25zIHJldGlyZWQ7IHNvbWUg
aW5zdHJ1Y3Rpb25zIHdpbGwgY291bnQgdHdpY2UgYXMgbm90ZWQgYmVsb3cuICBFYWNoIGNv
dW50IHJlcHJlc2VudHMgNCBjb21wdXRhdGlvbiBvcGVyYXRpb25zLCBvbmUgZm9yIGVhY2gg
ZWxlbWVudC4gIEFwcGxpZXMgdG8gU1NFKiBhbmQgQVZYKiBwYWNrZWQgZG91YmxlIHByZWNp
c2lvbiBmbG9hdGluZy1wb2ludCBpbnN0cnVjdGlvbnM6IEFERCBTVUIgTVVMIERJViBNSU4g
TUFYIFJDUDE0IFJTUVJUMTQgUkFOR0UgU1FSVCBEUFAgRk0oTilBREQvU1VCLiAgRFBQIGFu
ZCBGTShOKUFERC9TVUIgaW5zdHJ1Y3Rpb25zIGNvdW50IHR3aWNlIGFzIHRoZXkgcGVyZm9y
bSAyIGNhbGN1bGF0aW9ucyBwZXIgZWxlbWVudC4iDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+
ICsgICAgICAgICJDb2xsZWN0UEVCU1JlY29yZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1Ymxp
Y0Rlc2NyaXB0aW9uIjogIkNvdW50cyBudW1iZXIgb2YgU1NFL0FWWCBjb21wdXRhdGlvbmFs
IDI1Ni1iaXQgcGFja2VkIHNpbmdsZSBwcmVjaXNpb24gZmxvYXRpbmctcG9pbnQgaW5zdHJ1
Y3Rpb25zIHJldGlyZWQ7IHNvbWUgaW5zdHJ1Y3Rpb25zIHdpbGwgY291bnQgdHdpY2UgYXMg
bm90ZWQgYmVsb3cuICBFYWNoIGNvdW50IHJlcHJlc2VudHMgOCBjb21wdXRhdGlvbiBvcGVy
YXRpb25zLCBvbmUgZm9yIGVhY2ggZWxlbWVudC4gIEFwcGxpZXMgdG8gU1NFKiBhbmQgQVZY
KiBwYWNrZWQgc2luZ2xlIHByZWNpc2lvbiBmbG9hdGluZy1wb2ludCBpbnN0cnVjdGlvbnM6
IEFERCBTVUIgSEFERCBIU1VCIFNVQkFERCBNVUwgRElWIE1JTiBNQVggU1FSVCBSU1FSVCBS
Q1AgRFBQIEZNKE4pQUREL1NVQi4gIERQUCBhbmQgRk0oTilBREQvU1VCIGluc3RydWN0aW9u
cyBjb3VudCB0d2ljZSBhcyB0aGV5IHBlcmZvcm0gMiBjYWxjdWxhdGlvbnMgcGVyIGVsZW1l
bnQuIiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIweGM3IiwNCj4gKyAgICAgICAgIkNv
dW50ZXIiOiAiMCwxLDIsMyw0LDUsNiw3IiwNCj4gKyAgICAgICAgIlVNYXNrIjogIjB4MjAi
LA0KPiArICAgICAgICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsg
ICAgICAgICJFdmVudE5hbWUiOiAiRlBfQVJJVEhfSU5TVF9SRVRJUkVELjI1NkJfUEFDS0VE
X1NJTkdMRSIsDQo+ICsgICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjIwMDAwMDMiLA0K
PiArICAgICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJOdW1iZXIgb2YgU1NFL0FWWCBjb21w
dXRhdGlvbmFsIDI1Ni1iaXQgcGFja2VkIHNpbmdsZSBwcmVjaXNpb24gZmxvYXRpbmctcG9p
bnQgaW5zdHJ1Y3Rpb25zIHJldGlyZWQ7IHNvbWUgaW5zdHJ1Y3Rpb25zIHdpbGwgY291bnQg
dHdpY2UgYXMgbm90ZWQgYmVsb3cuICBFYWNoIGNvdW50IHJlcHJlc2VudHMgOCBjb21wdXRh
dGlvbiBvcGVyYXRpb25zLCBvbmUgZm9yIGVhY2ggZWxlbWVudC4gIEFwcGxpZXMgdG8gU1NF
KiBhbmQgQVZYKiBwYWNrZWQgc2luZ2xlIHByZWNpc2lvbiBmbG9hdGluZy1wb2ludCBpbnN0
cnVjdGlvbnM6IEFERCBTVUIgTVVMIERJViBNSU4gTUFYIFJDUDE0IFJTUVJUMTQgUkFOR0Ug
U1FSVCBEUFAgRk0oTilBREQvU1VCLiAgRFBQIGFuZCBGTShOKUFERC9TVUIgaW5zdHJ1Y3Rp
b25zIGNvdW50IHR3aWNlIGFzIHRoZXkgcGVyZm9ybSAyIGNhbGN1bGF0aW9ucyBwZXIgZWxl
bWVudC4iDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJDb2xsZWN0UEVCU1Jl
Y29yZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9uIjogIkNvdW50cyBu
dW1iZXIgb2YgU1NFL0FWWCBjb21wdXRhdGlvbmFsIDUxMi1iaXQgcGFja2VkIGRvdWJsZSBw
cmVjaXNpb24gZmxvYXRpbmctcG9pbnQgaW5zdHJ1Y3Rpb25zIHJldGlyZWQ7IHNvbWUgaW5z
dHJ1Y3Rpb25zIHdpbGwgY291bnQgdHdpY2UgYXMgbm90ZWQgYmVsb3cuICBFYWNoIGNvdW50
IHJlcHJlc2VudHMgOCBjb21wdXRhdGlvbiBvcGVyYXRpb25zLCBvbmUgZm9yIGVhY2ggZWxl
bWVudC4gIEFwcGxpZXMgdG8gU1NFKiBhbmQgQVZYKiBwYWNrZWQgZG91YmxlIHByZWNpc2lv
biBmbG9hdGluZy1wb2ludCBpbnN0cnVjdGlvbnM6IEFERCBTVUIgTVVMIERJViBNSU4gTUFY
IFNRUlQgUlNRUlQxNCBSQ1AxNCBSQU5HRSBGTShOKUFERC9TVUIuIEZNKE4pQUREL1NVQiBp
bnN0cnVjdGlvbnMgY291bnQgdHdpY2UgYXMgdGhleSBwZXJmb3JtIDIgY2FsY3VsYXRpb25z
IHBlciBlbGVtZW50LiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHhjNyIsDQo+ICsg
ICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJVTWFz
ayI6ICIweDQwIiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzLDQsNSw2
LDciLA0KPiArICAgICAgICAiRXZlbnROYW1lIjogIkZQX0FSSVRIX0lOU1RfUkVUSVJFRC41
MTJCX1BBQ0tFRF9ET1VCTEUiLA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIy
MDAwMDAzIiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiTnVtYmVyIG9mIFNT
RS9BVlggY29tcHV0YXRpb25hbCA1MTItYml0IHBhY2tlZCBkb3VibGUgcHJlY2lzaW9uIGZs
b2F0aW5nLXBvaW50IGluc3RydWN0aW9ucyByZXRpcmVkOyBzb21lIGluc3RydWN0aW9ucyB3
aWxsIGNvdW50IHR3aWNlIGFzIG5vdGVkIGJlbG93LiAgRWFjaCBjb3VudCByZXByZXNlbnRz
IDE2IGNvbXB1dGF0aW9uIG9wZXJhdGlvbnMsIG9uZSBmb3IgZWFjaCBlbGVtZW50LiAgQXBw
bGllcyB0byBTU0UqIGFuZCBBVlgqIHBhY2tlZCBkb3VibGUgcHJlY2lzaW9uIGZsb2F0aW5n
LXBvaW50IGluc3RydWN0aW9uczogQUREIFNVQiBNVUwgRElWIE1JTiBNQVggU1FSVCBSU1FS
VDE0IFJDUDE0IFJBTkdFIEZNKE4pQUREL1NVQi4gRk0oTilBREQvU1VCIGluc3RydWN0aW9u
cyBjb3VudCB0d2ljZSBhcyB0aGV5IHBlcmZvcm0gMiBjYWxjdWxhdGlvbnMgcGVyIGVsZW1l
bnQuIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAiQ29sbGVjdFBFQlNSZWNv
cmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJDb3VudHMgbnVt
YmVyIG9mIFNTRS9BVlggY29tcHV0YXRpb25hbCA1MTItYml0IHBhY2tlZCBkb3VibGUgcHJl
Y2lzaW9uIGZsb2F0aW5nLXBvaW50IGluc3RydWN0aW9ucyByZXRpcmVkOyBzb21lIGluc3Ry
dWN0aW9ucyB3aWxsIGNvdW50IHR3aWNlIGFzIG5vdGVkIGJlbG93LiAgRWFjaCBjb3VudCBy
ZXByZXNlbnRzIDE2IGNvbXB1dGF0aW9uIG9wZXJhdGlvbnMsIG9uZSBmb3IgZWFjaCBlbGVt
ZW50LiAgQXBwbGllcyB0byBTU0UqIGFuZCBBVlgqIHBhY2tlZCBkb3VibGUgcHJlY2lzaW9u
IGZsb2F0aW5nLXBvaW50IGluc3RydWN0aW9uczogQUREIFNVQiBNVUwgRElWIE1JTiBNQVgg
U1FSVCBSU1FSVDE0IFJDUDE0IFJBTkdFIEZNKE4pQUREL1NVQi4gRk0oTilBREQvU1VCIGlu
c3RydWN0aW9ucyBjb3VudCB0d2ljZSBhcyB0aGV5IHBlcmZvcm0gMiBjYWxjdWxhdGlvbnMg
cGVyIGVsZW1lbnQuIiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIweGM3IiwNCj4gKyAg
ICAgICAgIkNvdW50ZXIiOiAiMCwxLDIsMyw0LDUsNiw3IiwNCj4gKyAgICAgICAgIlVNYXNr
IjogIjB4ODAiLA0KPiArICAgICAgICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMsNCw1LDYs
NyIsDQo+ICsgICAgICAgICJFdmVudE5hbWUiOiAiRlBfQVJJVEhfSU5TVF9SRVRJUkVELjUx
MkJfUEFDS0VEX1NJTkdMRSIsDQo+ICsgICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjIw
MDAwMDMiLA0KPiArICAgICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJOdW1iZXIgb2YgU1NF
L0FWWCBjb21wdXRhdGlvbmFsIDUxMi1iaXQgcGFja2VkIGRvdWJsZSBwcmVjaXNpb24gZmxv
YXRpbmctcG9pbnQgaW5zdHJ1Y3Rpb25zIHJldGlyZWQ7IHNvbWUgaW5zdHJ1Y3Rpb25zIHdp
bGwgY291bnQgdHdpY2UgYXMgbm90ZWQgYmVsb3cuICBFYWNoIGNvdW50IHJlcHJlc2VudHMg
OCBjb21wdXRhdGlvbiBvcGVyYXRpb25zLCBvbmUgZm9yIGVhY2ggZWxlbWVudC4gIEFwcGxp
ZXMgdG8gU1NFKiBhbmQgQVZYKiBwYWNrZWQgZG91YmxlIHByZWNpc2lvbiBmbG9hdGluZy1w
b2ludCBpbnN0cnVjdGlvbnM6IEFERCBTVUIgTVVMIERJViBNSU4gTUFYIFNRUlQgUlNRUlQx
NCBSQ1AxNCBSQU5HRSBGTShOKUFERC9TVUIuIEZNKE4pQUREL1NVQiBpbnN0cnVjdGlvbnMg
Y291bnQgdHdpY2UgYXMgdGhleSBwZXJmb3JtIDIgY2FsY3VsYXRpb25zIHBlciBlbGVtZW50
LiINCj4gKyAgICB9DQo+ICtdDQo+IFwgTm8gbmV3bGluZSBhdCBlbmQgb2YgZmlsZQ0KPiBk
aWZmIC0tZ2l0IGEvdG9vbHMvcGVyZi9wbXUtZXZlbnRzL2FyY2gveDg2L2ljZWxha2UvZnJv
bnRlbmQuanNvbiBiL3Rvb2xzL3BlcmYvcG11LWV2ZW50cy9hcmNoL3g4Ni9pY2VsYWtlL2Zy
b250ZW5kLmpzb24NCj4gbmV3IGZpbGUgbW9kZSAxMDA2NDQNCj4gaW5kZXggMDAwMDAwMDAw
MDAwLi45YzNjZmJmY2VjMGYNCj4gLS0tIC9kZXYvbnVsbA0KPiArKysgYi90b29scy9wZXJm
L3BtdS1ldmVudHMvYXJjaC94ODYvaWNlbGFrZS9mcm9udGVuZC5qc29uDQo+IEBAIC0wLDAg
KzEsNDI0IEBADQo+ICtbDQo+ICsgICAgew0KPiArICAgICAgICAiQ29sbGVjdFBFQlNSZWNv
cmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJDb3VudHMgdGhl
IG51bWJlciBvZiB1b3BzIGRlbGl2ZXJlZCB0byBJbnN0cnVjdGlvbiBEZWNvZGUgUXVldWUg
KElEUSkgZnJvbSB0aGUgTUlURSBwYXRoLiBUaGlzIGFsc28gbWVhbnMgdGhhdCB1b3BzIGFy
ZSBub3QgYmVpbmcgZGVsaXZlcmVkIGZyb20gdGhlIERlY29kZSBTdHJlYW0gQnVmZmVyIChE
U0IpLiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHg3OSIsDQo+ICsgICAgICAgICJD
b3VudGVyIjogIjAsMSwyLDMiLA0KPiArICAgICAgICAiVU1hc2siOiAiMHg0IiwNCj4gKyAg
ICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzIiwNCj4gKyAgICAgICAgIkV2ZW50TmFt
ZSI6ICJJRFEuTUlURV9VT1BTIiwNCj4gKyAgICAgICAgIlNhbXBsZUFmdGVyVmFsdWUiOiAi
MjAwMDAwMyIsDQo+ICsgICAgICAgICJCcmllZkRlc2NyaXB0aW9uIjogIlVvcHMgZGVsaXZl
cmVkIHRvIEluc3RydWN0aW9uIERlY29kZSBRdWV1ZSAoSURRKSBmcm9tIE1JVEUgcGF0aCIN
Cj4gKyAgICB9LA0KPiArICAgIHsNCj4gKyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjog
IjIiLA0KPiArICAgICAgICAiUHVibGljRGVzY3JpcHRpb24iOiAiQ291bnRzIHRoZSBudW1i
ZXIgb2YgY3ljbGVzIHdoZXJlIG9wdGltYWwgbnVtYmVyIG9mIHVvcHMgd2FzIGRlbGl2ZXJl
ZCB0byB0aGUgSW5zdHJ1Y3Rpb24gRGVjb2RlIFF1ZXVlIChJRFEpIGZyb20gdGhlIE1JVEUg
KGxlZ2FjeSBkZWNvZGUgcGlwZWxpbmUpIHBhdGguIER1cmluZyB0aGVzZSBjeWNsZXMgdW9w
cyBhcmUgbm90IGJlaW5nIGRlbGl2ZXJlZCBmcm9tIHRoZSBEZWNvZGUgU3RyZWFtIEJ1ZmZl
ciAoRFNCKS4iLA0KPiArICAgICAgICAiRXZlbnRDb2RlIjogIjB4NzkiLA0KPiArICAgICAg
ICAiQ291bnRlciI6ICIwLDEsMiwzIiwNCj4gKyAgICAgICAgIlVNYXNrIjogIjB4NCIsDQo+
ICsgICAgICAgICJQRUJTY291bnRlcnMiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJFdmVu
dE5hbWUiOiAiSURRLk1JVEVfQ1lDTEVTX09LIiwNCj4gKyAgICAgICAgIlNhbXBsZUFmdGVy
VmFsdWUiOiAiMjAwMDAwMyIsDQo+ICsgICAgICAgICJCcmllZkRlc2NyaXB0aW9uIjogIkN5
Y2xlcyBNSVRFIGlzIGRlbGl2ZXJpbmcgb3B0aW1hbCBudW1iZXIgb2YgVW9wcyIsDQo+ICsg
ICAgICAgICJDb3VudGVyTWFzayI6ICI1Ig0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAg
ICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNj
cmlwdGlvbiI6ICJDb3VudHMgdGhlIG51bWJlciBvZiBjeWNsZXMgdW9wcyB3ZXJlIGRlbGl2
ZXJlZCB0byB0aGUgSW5zdHJ1Y3Rpb24gRGVjb2RlIFF1ZXVlIChJRFEpIGZyb20gdGhlIE1J
VEUgKGxlZ2FjeSBkZWNvZGUgcGlwZWxpbmUpIHBhdGguIER1cmluZyB0aGVzZSBjeWNsZXMg
dW9wcyBhcmUgbm90IGJlaW5nIGRlbGl2ZXJlZCBmcm9tIHRoZSBEZWNvZGUgU3RyZWFtIEJ1
ZmZlciAoRFNCKS4iLA0KPiArICAgICAgICAiRXZlbnRDb2RlIjogIjB4NzkiLA0KPiArICAg
ICAgICAiQ291bnRlciI6ICIwLDEsMiwzIiwNCj4gKyAgICAgICAgIlVNYXNrIjogIjB4NCIs
DQo+ICsgICAgICAgICJQRUJTY291bnRlcnMiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJF
dmVudE5hbWUiOiAiSURRLk1JVEVfQ1lDTEVTX0FOWSIsDQo+ICsgICAgICAgICJTYW1wbGVB
ZnRlclZhbHVlIjogIjIwMDAwMDMiLA0KPiArICAgICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6
ICJDeWNsZXMgTUlURSBpcyBkZWxpdmVyaW5nIGFueSBVb3AiLA0KPiArICAgICAgICAiQ291
bnRlck1hc2siOiAiMSINCj4gKyAgICB9LA0KPiArICAgIHsNCj4gKyAgICAgICAgIkNvbGxl
Y3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAiUHVibGljRGVzY3JpcHRpb24iOiAi
Q291bnRzIHRoZSBudW1iZXIgb2YgdW9wcyBkZWxpdmVyZWQgdG8gSW5zdHJ1Y3Rpb24gRGVj
b2RlIFF1ZXVlIChJRFEpIGZyb20gdGhlIERlY29kZSBTdHJlYW0gQnVmZmVyIChEU0IpIHBh
dGguIiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIweDc5IiwNCj4gKyAgICAgICAgIkNv
dW50ZXIiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJVTWFzayI6ICIweDgiLA0KPiArICAg
ICAgICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMiLA0KPiArICAgICAgICAiRXZlbnROYW1l
IjogIklEUS5EU0JfVU9QUyIsDQo+ICsgICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjIw
MDAwMDMiLA0KPiArICAgICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJVb3BzIGRlbGl2ZXJl
ZCB0byBJbnN0cnVjdGlvbiBEZWNvZGUgUXVldWUgKElEUSkgZnJvbSB0aGUgRGVjb2RlIFN0
cmVhbSBCdWZmZXIgKERTQikgcGF0aCINCj4gKyAgICB9LA0KPiArICAgIHsNCj4gKyAgICAg
ICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAiUHVibGljRGVzY3Jp
cHRpb24iOiAiQ291bnRzIHRoZSBudW1iZXIgb2YgY3ljbGVzIHdoZXJlIG9wdGltYWwgbnVt
YmVyIG9mIHVvcHMgd2FzIGRlbGl2ZXJlZCB0byB0aGUgSW5zdHJ1Y3Rpb24gRGVjb2RlIFF1
ZXVlIChJRFEpIGZyb20gdGhlIE1JVEUgKGxlZ2FjeSBkZWNvZGUgcGlwZWxpbmUpIHBhdGgu
IER1cmluZyB0aGVzZSBjeWNsZXMgdW9wcyBhcmUgbm90IGJlaW5nIGRlbGl2ZXJlZCBmcm9t
IHRoZSBEZWNvZGUgU3RyZWFtIEJ1ZmZlciAoRFNCKS4iLA0KPiArICAgICAgICAiRXZlbnRD
b2RlIjogIjB4NzkiLA0KPiArICAgICAgICAiQ291bnRlciI6ICIwLDEsMiwzIiwNCj4gKyAg
ICAgICAgIlVNYXNrIjogIjB4OCIsDQo+ICsgICAgICAgICJQRUJTY291bnRlcnMiOiAiMCwx
LDIsMyIsDQo+ICsgICAgICAgICJFdmVudE5hbWUiOiAiSURRLkRTQl9DWUNMRVNfT0siLA0K
PiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIyMDAwMDAzIiwNCj4gKyAgICAgICAg
IkJyaWVmRGVzY3JpcHRpb24iOiAiQ3ljbGVzIERTQiBpcyBkZWxpdmVyaW5nIG9wdGltYWwg
bnVtYmVyIG9mIFVvcHMiLA0KPiArICAgICAgICAiQ291bnRlck1hc2siOiAiNSINCj4gKyAg
ICB9LA0KPiArICAgIHsNCj4gKyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0K
PiArICAgICAgICAiUHVibGljRGVzY3JpcHRpb24iOiAiQ291bnRzIHRoZSBudW1iZXIgb2Yg
Y3ljbGVzIHVvcHMgd2VyZSBkZWxpdmVyZWQgdG8gSW5zdHJ1Y3Rpb24gRGVjb2RlIFF1ZXVl
IChJRFEpIGZyb20gdGhlIERlY29kZSBTdHJlYW0gQnVmZmVyIChEU0IpIHBhdGguIiwNCj4g
KyAgICAgICAgIkV2ZW50Q29kZSI6ICIweDc5IiwNCj4gKyAgICAgICAgIkNvdW50ZXIiOiAi
MCwxLDIsMyIsDQo+ICsgICAgICAgICJVTWFzayI6ICIweDgiLA0KPiArICAgICAgICAiUEVC
U2NvdW50ZXJzIjogIjAsMSwyLDMiLA0KPiArICAgICAgICAiRXZlbnROYW1lIjogIklEUS5E
U0JfQ1lDTEVTX0FOWSIsDQo+ICsgICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjIwMDAw
MDMiLA0KPiArICAgICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJDeWNsZXMgRGVjb2RlIFN0
cmVhbSBCdWZmZXIgKERTQikgaXMgZGVsaXZlcmluZyBhbnkgVW9wIiwNCj4gKyAgICAgICAg
IkNvdW50ZXJNYXNrIjogIjEiDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJD
b2xsZWN0UEVCU1JlY29yZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9u
IjogIk51bWJlciBvZiBzd2l0Y2hlcyBmcm9tIERTQiAoRGVjb2RlIFN0cmVhbSBCdWZmZXIp
IG9yIE1JVEUgKGxlZ2FjeSBkZWNvZGUgcGlwZWxpbmUpIHRvIHRoZSBNaWNyb2NvZGUgU2Vx
dWVuY2VyLiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHg3OSIsDQo+ICsgICAgICAg
ICJDb3VudGVyIjogIjAsMSwyLDMiLA0KPiArICAgICAgICAiVU1hc2siOiAiMHgzMCIsDQo+
ICsgICAgICAgICJQRUJTY291bnRlcnMiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJFdmVu
dE5hbWUiOiAiSURRLk1TX1NXSVRDSEVTIiwNCj4gKyAgICAgICAgIlNhbXBsZUFmdGVyVmFs
dWUiOiAiMjAwMDAwMyIsDQo+ICsgICAgICAgICJCcmllZkRlc2NyaXB0aW9uIjogIk51bWJl
ciBvZiBzd2l0Y2hlcyBmcm9tIERTQiBvciBNSVRFIHRvIHRoZSBNUyIsDQo+ICsgICAgICAg
ICJDb3VudGVyTWFzayI6ICIxIiwNCj4gKyAgICAgICAgIkVkZ2VEZXRlY3QiOiAiMSINCj4g
KyAgICB9LA0KPiArICAgIHsNCj4gKyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIi
LA0KPiArICAgICAgICAiUHVibGljRGVzY3JpcHRpb24iOiAiQ291bnRzIHRoZSB0b3RhbCBu
dW1iZXIgb2YgdW9wcyBkZWxpdmVyZWQgYnkgdGhlIE1pY3JvY29kZSBTZXF1ZW5jZXIgKE1T
KS4gQW55IGluc3RydWN0aW9uIG92ZXIgNCB1b3BzIHdpbGwgYmUgZGVsaXZlcmVkIGJ5IHRo
ZSBNUy4gU29tZSBpbnN0cnVjdGlvbnMgc3VjaCBhcyB0cmFuc2NlbmRlbnRhbHMgbWF5IGFk
ZGl0aW9uYWxseSBnZW5lcmF0ZSB1b3BzIGZyb20gdGhlIE1TLiIsDQo+ICsgICAgICAgICJF
dmVudENvZGUiOiAiMHg3OSIsDQo+ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMiLA0K
PiArICAgICAgICAiVU1hc2siOiAiMHgzMCIsDQo+ICsgICAgICAgICJQRUJTY291bnRlcnMi
OiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJFdmVudE5hbWUiOiAiSURRLk1TX1VPUFMiLA0K
PiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIyMDAwMDAzIiwNCj4gKyAgICAgICAg
IkJyaWVmRGVzY3JpcHRpb24iOiAiVW9wcyBkZWxpdmVyZWQgdG8gSURRIHdoaWxlIE1TIGlz
IGJ1c3kiDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJDb2xsZWN0UEVCU1Jl
Y29yZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9uIjogIkNvdW50cyBj
eWNsZXMgZHVyaW5nIHdoaWNoIHVvcHMgYXJlIGJlaW5nIGRlbGl2ZXJlZCB0byBJbnN0cnVj
dGlvbiBEZWNvZGUgUXVldWUgKElEUSkgd2hpbGUgdGhlIE1pY3JvY29kZSBTZXF1ZW5jZXIg
KE1TKSBpcyBidXN5LiBVb3BzIG1heWJlIGluaXRpYXRlZCBieSBEZWNvZGUgU3RyZWFtIEJ1
ZmZlciAoRFNCKSBvciBNSVRFLiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHg3OSIs
DQo+ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMiLA0KPiArICAgICAgICAiVU1hc2si
OiAiMHgzMCIsDQo+ICsgICAgICAgICJQRUJTY291bnRlcnMiOiAiMCwxLDIsMyIsDQo+ICsg
ICAgICAgICJFdmVudE5hbWUiOiAiSURRLk1TX0NZQ0xFU19BTlkiLA0KPiArICAgICAgICAi
U2FtcGxlQWZ0ZXJWYWx1ZSI6ICIyMDAwMDAzIiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3Jp
cHRpb24iOiAiQ3ljbGVzIHdoZW4gdW9wcyBhcmUgYmVpbmcgZGVsaXZlcmVkIHRvIElEUSB3
aGlsZSBNUyBpcyBidXN5IiwNCj4gKyAgICAgICAgIkNvdW50ZXJNYXNrIjogIjEiDQo+ICsg
ICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJDb2xsZWN0UEVCU1JlY29yZCI6ICIyIiwN
Cj4gKyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9uIjogIkNvdW50cyBjeWNsZXMgd2hlcmUg
YSBjb2RlIGxpbmUgZmV0Y2ggaXMgc3RhbGxlZCBkdWUgdG8gYW4gTDEgaW5zdHJ1Y3Rpb24g
Y2FjaGUgbWlzcy4gVGhlIGxlZ2FjeSBkZWNvZGUgcGlwZWxpbmUgd29ya3MgYXQgYSAxNiBC
eXRlIGdyYW51bGFyaXR5LiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHg4MCIsDQo+
ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMiLA0KPiArICAgICAgICAiVU1hc2siOiAi
MHg0IiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzIiwNCj4gKyAgICAg
ICAgIkV2ZW50TmFtZSI6ICJJQ0FDSEVfMTZCLklGREFUQV9TVEFMTCIsDQo+ICsgICAgICAg
ICJTYW1wbGVBZnRlclZhbHVlIjogIjIwMDAwMDMiLA0KPiArICAgICAgICAiQnJpZWZEZXNj
cmlwdGlvbiI6ICJDeWNsZXMgd2hlcmUgYSBjb2RlIGZldGNoIGlzIHN0YWxsZWQgZHVlIHRv
IEwxIGluc3RydWN0aW9uIGNhY2hlIG1pc3MuIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiAr
ICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNE
ZXNjcmlwdGlvbiI6ICJDb3VudHMgaW5zdHJ1Y3Rpb24gZmV0Y2ggdGFnIGxvb2t1cHMgdGhh
dCBoaXQgaW4gdGhlIGluc3RydWN0aW9uIGNhY2hlIChMMUkpLiBDb3VudHMgYXQgNjQtYnl0
ZSBjYWNoZS1saW5lIGdyYW51bGFyaXR5LiBBY2NvdW50cyBmb3IgYm90aCBjYWNoZWFibGUg
YW5kIHVuY2FjaGVhYmxlIGFjY2Vzc2VzLiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAi
MHg4MyIsDQo+ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMiLA0KPiArICAgICAgICAi
VU1hc2siOiAiMHgxIiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzIiwN
Cj4gKyAgICAgICAgIkV2ZW50TmFtZSI6ICJJQ0FDSEVfNjRCLklGVEFHX0hJVCIsDQo+ICsg
ICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjIwMDAwMyIsDQo+ICsgICAgICAgICJCcmll
ZkRlc2NyaXB0aW9uIjogIkluc3RydWN0aW9uIGZldGNoIHRhZyBsb29rdXBzIHRoYXQgaGl0
IGluIHRoZSBpbnN0cnVjdGlvbiBjYWNoZSAoTDFJKS4gQ291bnRzIGF0IDY0LWJ5dGUgY2Fj
aGUtbGluZSBncmFudWxhcml0eS4iDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAg
ICJDb2xsZWN0UEVCU1JlY29yZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0
aW9uIjogIkNvdW50cyBpbnN0cnVjdGlvbiBmZXRjaCB0YWcgbG9va3VwcyB0aGF0IG1pc3Mg
aW4gdGhlIGluc3RydWN0aW9uIGNhY2hlIChMMUkpLiBDb3VudHMgYXQgNjQtYnl0ZSBjYWNo
ZS1saW5lIGdyYW51bGFyaXR5LiBBY2NvdW50cyBmb3IgYm90aCBjYWNoZWFibGUgYW5kIHVu
Y2FjaGVhYmxlIGFjY2Vzc2VzLiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHg4MyIs
DQo+ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMiLA0KPiArICAgICAgICAiVU1hc2si
OiAiMHgyIiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzIiwNCj4gKyAg
ICAgICAgIkV2ZW50TmFtZSI6ICJJQ0FDSEVfNjRCLklGVEFHX01JU1MiLA0KPiArICAgICAg
ICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIyMDAwMDMiLA0KPiArICAgICAgICAiQnJpZWZEZXNj
cmlwdGlvbiI6ICJJbnN0cnVjdGlvbiBmZXRjaCB0YWcgbG9va3VwcyB0aGF0IG1pc3MgaW4g
dGhlIGluc3RydWN0aW9uIGNhY2hlIChMMUkpLiBDb3VudHMgYXQgNjQtYnl0ZSBjYWNoZS1s
aW5lIGdyYW51bGFyaXR5LiINCj4gKyAgICB9LA0KPiArICAgIHsNCj4gKyAgICAgICAgIkNv
bGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAiUHVibGljRGVzY3JpcHRpb24i
OiAiQ291bnRzIGN5Y2xlcyB3aGVyZSBhIGNvZGUgZmV0Y2ggaXMgc3RhbGxlZCBkdWUgdG8g
TDEgaW5zdHJ1Y3Rpb24gY2FjaGUgdGFnIG1pc3MuIiwNCj4gKyAgICAgICAgIkV2ZW50Q29k
ZSI6ICIweDgzIiwNCj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMCwxLDIsMyIsDQo+ICsgICAg
ICAgICJVTWFzayI6ICIweDQiLA0KPiArICAgICAgICAiUEVCU2NvdW50ZXJzIjogIjAsMSwy
LDMiLA0KPiArICAgICAgICAiRXZlbnROYW1lIjogIklDQUNIRV82NEIuSUZUQUdfU1RBTEwi
LA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIyMDAwMDMiLA0KPiArICAgICAg
ICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJDeWNsZXMgd2hlcmUgYSBjb2RlIGZldGNoIGlzIHN0
YWxsZWQgZHVlIHRvIEwxIGluc3RydWN0aW9uIGNhY2hlIHRhZyBtaXNzLiINCj4gKyAgICB9
LA0KPiArICAgIHsNCj4gKyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiAr
ICAgICAgICAiUHVibGljRGVzY3JpcHRpb24iOiAiQ291bnRzIHRoZSBudW1iZXIgb2YgdW9w
cyBub3QgZGVsaXZlcmVkIHRvIGJ5IHRoZSBJbnN0cnVjdGlvbiBEZWNvZGUgUXVldWUgKElE
USkgdG8gdGhlIGJhY2stZW5kIG9mIHRoZSBwaXBlbGluZSB3aGVuIHRoZXJlIHdhcyBubyBi
YWNrLWVuZCBzdGFsbHMuIFRoaXMgZXZlbnQgY291bnRzIGZvciBvbmUgU01UIHRocmVhZCBp
biBhIGdpdmVuIGN5Y2xlLiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHg5QyIsDQo+
ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJV
TWFzayI6ICIweDEiLA0KPiArICAgICAgICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMsNCw1
LDYsNyIsDQo+ICsgICAgICAgICJFdmVudE5hbWUiOiAiSURRX1VPUFNfTk9UX0RFTElWRVJF
RC5DT1JFIiwNCj4gKyAgICAgICAgIlNhbXBsZUFmdGVyVmFsdWUiOiAiMjAwMDAwMyIsDQo+
ICsgICAgICAgICJCcmllZkRlc2NyaXB0aW9uIjogIlVvcHMgbm90IGRlbGl2ZXJlZCBieSBJ
RFEgd2hlbiBiYWNrZW5kIG9mIHRoZSBtYWNoaW5lIGlzIG5vdCBzdGFsbGVkIg0KPiArICAg
IH0sDQo+ICsgICAgew0KPiArICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+
ICsgICAgICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJDb3VudHMgdGhlIG51bWJlciBvZiBj
eWNsZXMgd2hlbiBubyB1b3BzIHdlcmUgZGVsaXZlcmVkIGJ5IHRoZSBJbnN0cnVjdGlvbiBE
ZWNvZGUgUXVldWUgKElEUSkgdG8gdGhlIGJhY2stZW5kIG9mIHRoZSBwaXBlbGluZSB3aGVu
IHRoZXJlIHdhcyBubyBiYWNrLWVuZCBzdGFsbHMuIFRoaXMgZXZlbnQgY291bnRzIGZvciBv
bmUgU01UIHRocmVhZCBpbiBhIGdpdmVuIGN5Y2xlLiIsDQo+ICsgICAgICAgICJFdmVudENv
ZGUiOiAiMHg5YyIsDQo+ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMsNCw1LDYsNyIs
DQo+ICsgICAgICAgICJVTWFzayI6ICIweDEiLA0KPiArICAgICAgICAiUEVCU2NvdW50ZXJz
IjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJFdmVudE5hbWUiOiAiSURRX1VP
UFNfTk9UX0RFTElWRVJFRC5DWUNMRVNfMF9VT1BTX0RFTElWLkNPUkUiLA0KPiArICAgICAg
ICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIyMDAwMDAzIiwNCj4gKyAgICAgICAgIkJyaWVmRGVz
Y3JpcHRpb24iOiAiQ3ljbGVzIHdoZW4gbm8gdW9wcyBhcmUgbm90IGRlbGl2ZXJlZCBieSB0
aGUgSURRIHdoZW4gYmFja2VuZCBvZiB0aGUgbWFjaGluZSBpcyBub3Qgc3RhbGxlZCIsDQo+
ICsgICAgICAgICJDb3VudGVyTWFzayI6ICI1Ig0KPiArICAgIH0sDQo+ICsgICAgew0KPiAr
ICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNE
ZXNjcmlwdGlvbiI6ICJDb3VudHMgdGhlIG51bWJlciBvZiBjeWNsZXMgd2hlbiB0aGUgb3B0
aW1hbCBudW1iZXIgb2YgdW9wcyB3ZXJlIGRlbGl2ZXJlZCBieSB0aGUgSW5zdHJ1Y3Rpb24g
RGVjb2RlIFF1ZXVlIChJRFEpIHRvIHRoZSBiYWNrLWVuZCBvZiB0aGUgcGlwZWxpbmUgd2hl
biB0aGVyZSB3YXMgbm8gYmFjay1lbmQgc3RhbGxzLiBUaGlzIGV2ZW50IGNvdW50cyBmb3Ig
b25lIFNNVCB0aHJlYWQgaW4gYSBnaXZlbiBjeWNsZS4iLA0KPiArICAgICAgICAiRXZlbnRD
b2RlIjogIjB4OUMiLA0KPiArICAgICAgICAiSW52ZXJ0IjogIjEiLA0KPiArICAgICAgICAi
Q291bnRlciI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAgICAiVU1hc2siOiAiMHgx
IiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiAr
ICAgICAgICAiRXZlbnROYW1lIjogIklEUV9VT1BTX05PVF9ERUxJVkVSRUQuQ1lDTEVTX0ZF
X1dBU19PSyIsDQo+ICsgICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjIwMDAwMDMiLA0K
PiArICAgICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJDeWNsZXMgd2hlbiBvcHRpbWFsIG51
bWJlciBvZiB1b3BzIHdhcyBkZWxpdmVyZWQgdG8gdGhlIGJhY2stZW5kIHdoZW4gdGhlIGJh
Y2stZW5kIGlzIG5vdCBzdGFsbGVkIiwNCj4gKyAgICAgICAgIkNvdW50ZXJNYXNrIjogIjEi
DQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJDb2xsZWN0UEVCU1JlY29yZCI6
ICIyIiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9uIjogIkRlY29kZSBTdHJlYW0g
QnVmZmVyIChEU0IpIGlzIGEgVW9wLWNhY2hlIHRoYXQgaG9sZHMgdHJhbnNsYXRpb25zIG9m
IHByZXZpb3VzbHkgZmV0Y2hlZCBpbnN0cnVjdGlvbnMgdGhhdCB3ZXJlIGRlY29kZWQgYnkg
dGhlIGxlZ2FjeSB4ODYgZGVjb2RlIHBpcGVsaW5lIChNSVRFKS4gVGhpcyBldmVudCBjb3Vu
dHMgZmV0Y2ggcGVuYWx0eSBjeWNsZXMgd2hlbiBhIHRyYW5zaXRpb24gb2NjdXJzIGZyb20g
RFNCIHRvIE1JVEUuIiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIweEFCIiwNCj4gKyAg
ICAgICAgIkNvdW50ZXIiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJVTWFzayI6ICIweDIi
LA0KPiArICAgICAgICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMiLA0KPiArICAgICAgICAi
RXZlbnROYW1lIjogIkRTQjJNSVRFX1NXSVRDSEVTLlBFTkFMVFlfQ1lDTEVTIiwNCj4gKyAg
ICAgICAgIlNhbXBsZUFmdGVyVmFsdWUiOiAiMjAwMDAwMyIsDQo+ICsgICAgICAgICJCcmll
ZkRlc2NyaXB0aW9uIjogIkRTQi10by1NSVRFIHN3aXRjaCB0cnVlIHBlbmFsdHkgY3ljbGVz
LiINCj4gKyAgICB9LA0KPiArICAgIHsNCj4gKyAgICAgICAgIlBFQlMiOiAiMSIsDQo+ICsg
ICAgICAgICJDb2xsZWN0UEVCU1JlY29yZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1YmxpY0Rl
c2NyaXB0aW9uIjogIkNvdW50cyByZXRpcmVkIEluc3RydWN0aW9ucyB0aGF0IGV4cGVyaWVu
Y2VkIERTQiAoRGVjb2RlIHN0cmVhbSBidWZmZXIgaS5lLiB0aGUgZGVjb2RlZCBpbnN0cnVj
dGlvbi1jYWNoZSkgbWlzcy4iLA0KPiArICAgICAgICAiRXZlbnRDb2RlIjogIjB4QzYiLA0K
PiArICAgICAgICAiTVNSVmFsdWUiOiAiMHgxMSIsDQo+ICsgICAgICAgICJDb3VudGVyIjog
IjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJVTWFzayI6ICIweDEiLA0KPiArICAg
ICAgICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJF
dmVudE5hbWUiOiAiRlJPTlRFTkRfUkVUSVJFRC5EU0JfTUlTUyIsDQo+ICsgICAgICAgICJN
U1JJbmRleCI6ICIweDNGNyIsDQo+ICsgICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjEw
MDAwNyIsDQo+ICsgICAgICAgICJCcmllZkRlc2NyaXB0aW9uIjogIlJldGlyZWQgSW5zdHJ1
Y3Rpb25zIHdobyBleHBlcmllbmNlZCBEU0IgbWlzcy4iLA0KPiArICAgICAgICAiVGFrZW5B
bG9uZSI6ICIxIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAiUEVCUyI6ICIx
IiwNCj4gKyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAi
UHVibGljRGVzY3JpcHRpb24iOiAiQ291bnRzIHJldGlyZWQgSW5zdHJ1Y3Rpb25zIHdobyBl
eHBlcmllbmNlZCBJbnN0cnVjdGlvbiBMMSBDYWNoZSB0cnVlIG1pc3MuIiwNCj4gKyAgICAg
ICAgIkV2ZW50Q29kZSI6ICIweEM2IiwNCj4gKyAgICAgICAgIk1TUlZhbHVlIjogIjB4MTIi
LA0KPiArICAgICAgICAiQ291bnRlciI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAg
ICAiVU1hc2siOiAiMHgxIiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwz
LDQsNSw2LDciLA0KPiArICAgICAgICAiRXZlbnROYW1lIjogIkZST05URU5EX1JFVElSRUQu
TDFJX01JU1MiLA0KPiArICAgICAgICAiTVNSSW5kZXgiOiAiMHgzRjciLA0KPiArICAgICAg
ICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIxMDAwMDciLA0KPiArICAgICAgICAiQnJpZWZEZXNj
cmlwdGlvbiI6ICJSZXRpcmVkIEluc3RydWN0aW9ucyB3aG8gZXhwZXJpZW5jZWQgSW5zdHJ1
Y3Rpb24gTDEgQ2FjaGUgdHJ1ZSBtaXNzLiIsDQo+ICsgICAgICAgICJUYWtlbkFsb25lIjog
IjEiDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJQRUJTIjogIjEiLA0KPiAr
ICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNE
ZXNjcmlwdGlvbiI6ICJDb3VudHMgcmV0aXJlZCBJbnN0cnVjdGlvbnMgd2hvIGV4cGVyaWVu
Y2VkIEluc3RydWN0aW9uIEwyIENhY2hlIHRydWUgbWlzcy4iLA0KPiArICAgICAgICAiRXZl
bnRDb2RlIjogIjB4QzYiLA0KPiArICAgICAgICAiTVNSVmFsdWUiOiAiMHgxMyIsDQo+ICsg
ICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJVTWFz
ayI6ICIweDEiLA0KPiArICAgICAgICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMsNCw1LDYs
NyIsDQo+ICsgICAgICAgICJFdmVudE5hbWUiOiAiRlJPTlRFTkRfUkVUSVJFRC5MMl9NSVNT
IiwNCj4gKyAgICAgICAgIk1TUkluZGV4IjogIjB4M0Y3IiwNCj4gKyAgICAgICAgIlNhbXBs
ZUFmdGVyVmFsdWUiOiAiMTAwMDA3IiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24i
OiAiUmV0aXJlZCBJbnN0cnVjdGlvbnMgd2hvIGV4cGVyaWVuY2VkIEluc3RydWN0aW9uIEwy
IENhY2hlIHRydWUgbWlzcy4iLA0KPiArICAgICAgICAiVGFrZW5BbG9uZSI6ICIxIg0KPiAr
ICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAiUEVCUyI6ICIxIiwNCj4gKyAgICAgICAg
IkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAiUHVibGljRGVzY3JpcHRp
b24iOiAiQ291bnRzIHJldGlyZWQgSW5zdHJ1Y3Rpb25zIHRoYXQgZXhwZXJpZW5jZWQgaVRM
QiAoSW5zdHJ1Y3Rpb24gVExCKSB0cnVlIG1pc3MuIiwNCj4gKyAgICAgICAgIkV2ZW50Q29k
ZSI6ICIweEM2IiwNCj4gKyAgICAgICAgIk1TUlZhbHVlIjogIjB4MTQiLA0KPiArICAgICAg
ICAiQ291bnRlciI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAgICAiVU1hc2siOiAi
MHgxIiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzLDQsNSw2LDciLA0K
PiArICAgICAgICAiRXZlbnROYW1lIjogIkZST05URU5EX1JFVElSRUQuSVRMQl9NSVNTIiwN
Cj4gKyAgICAgICAgIk1TUkluZGV4IjogIjB4M0Y3IiwNCj4gKyAgICAgICAgIlNhbXBsZUFm
dGVyVmFsdWUiOiAiMTAwMDA3IiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAi
UmV0aXJlZCBJbnN0cnVjdGlvbnMgd2hvIGV4cGVyaWVuY2VkIGlUTEIgdHJ1ZSBtaXNzLiIs
DQo+ICsgICAgICAgICJUYWtlbkFsb25lIjogIjEiDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+
ICsgICAgICAgICJQRUJTIjogIjEiLA0KPiArICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQi
OiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJDb3VudHMgcmV0aXJl
ZCBJbnN0cnVjdGlvbnMgdGhhdCBleHBlcmllbmNlZCBTVExCICgybmQgbGV2ZWwgVExCKSB0
cnVlIG1pc3MuIiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIweEM2IiwNCj4gKyAgICAg
ICAgIk1TUlZhbHVlIjogIjB4MTUiLA0KPiArICAgICAgICAiQ291bnRlciI6ICIwLDEsMiwz
LDQsNSw2LDciLA0KPiArICAgICAgICAiVU1hc2siOiAiMHgxIiwNCj4gKyAgICAgICAgIlBF
QlNjb3VudGVycyI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAgICAiRXZlbnROYW1l
IjogIkZST05URU5EX1JFVElSRUQuU1RMQl9NSVNTIiwNCj4gKyAgICAgICAgIk1TUkluZGV4
IjogIjB4M0Y3IiwNCj4gKyAgICAgICAgIlNhbXBsZUFmdGVyVmFsdWUiOiAiMTAwMDA3IiwN
Cj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiUmV0aXJlZCBJbnN0cnVjdGlvbnMg
d2hvIGV4cGVyaWVuY2VkIFNUTEIgKDJuZCBsZXZlbCBUTEIpIHRydWUgbWlzcy4iLA0KPiAr
ICAgICAgICAiVGFrZW5BbG9uZSI6ICIxIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAg
ICAgICAiUEVCUyI6ICIxIiwNCj4gKyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIi
LA0KPiArICAgICAgICAiUHVibGljRGVzY3JpcHRpb24iOiAiQ291bnRzIHJldGlyZWQgaW5z
dHJ1Y3Rpb25zIHRoYXQgYXJlIGZldGNoZWQgYWZ0ZXIgYW4gaW50ZXJ2YWwgd2hlcmUgdGhl
IGZyb250LWVuZCBkZWxpdmVyZWQgbm8gdW9wcyBmb3IgYSBwZXJpb2Qgb2YgMiBjeWNsZXMg
d2hpY2ggd2FzIG5vdCBpbnRlcnJ1cHRlZCBieSBhIGJhY2stZW5kIHN0YWxsLiIsDQo+ICsg
ICAgICAgICJFdmVudENvZGUiOiAiMHhDNiIsDQo+ICsgICAgICAgICJNU1JWYWx1ZSI6ICIw
eDUwMDIwNiIsDQo+ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+
ICsgICAgICAgICJVTWFzayI6ICIweDEiLA0KPiArICAgICAgICAiUEVCU2NvdW50ZXJzIjog
IjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJFdmVudE5hbWUiOiAiRlJPTlRFTkRf
UkVUSVJFRC5MQVRFTkNZX0dFXzIiLA0KPiArICAgICAgICAiTVNSSW5kZXgiOiAiMHgzRjci
LA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIxMDAwMDciLA0KPiArICAgICAg
ICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJSZXRpcmVkIGluc3RydWN0aW9ucyB0aGF0IGFyZSBm
ZXRjaGVkIGFmdGVyIGFuIGludGVydmFsIHdoZXJlIHRoZSBmcm9udC1lbmQgZGVsaXZlcmVk
IG5vIHVvcHMgZm9yIGEgcGVyaW9kIG9mIDIgY3ljbGVzIHdoaWNoIHdhcyBub3QgaW50ZXJy
dXB0ZWQgYnkgYSBiYWNrLWVuZCBzdGFsbC4iLA0KPiArICAgICAgICAiVGFrZW5BbG9uZSI6
ICIxIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAiUEVCUyI6ICIxIiwNCj4g
KyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAiUHVibGlj
RGVzY3JpcHRpb24iOiAiQ291bnRzIHJldGlyZWQgaW5zdHJ1Y3Rpb25zIHRoYXQgYXJlIGZl
dGNoZWQgYWZ0ZXIgYW4gaW50ZXJ2YWwgd2hlcmUgdGhlIGZyb250LWVuZCBkZWxpdmVyZWQg
bm8gdW9wcyBmb3IgYSBwZXJpb2Qgb2YgNCBjeWNsZXMgd2hpY2ggd2FzIG5vdCBpbnRlcnJ1
cHRlZCBieSBhIGJhY2stZW5kIHN0YWxsLiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAi
MHhDNiIsDQo+ICsgICAgICAgICJNU1JWYWx1ZSI6ICIweDUwMDQwNiIsDQo+ICsgICAgICAg
ICJDb3VudGVyIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJVTWFzayI6ICIw
eDEiLA0KPiArICAgICAgICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+
ICsgICAgICAgICJFdmVudE5hbWUiOiAiRlJPTlRFTkRfUkVUSVJFRC5MQVRFTkNZX0dFXzQi
LA0KPiArICAgICAgICAiTVNSSW5kZXgiOiAiMHgzRjciLA0KPiArICAgICAgICAiU2FtcGxl
QWZ0ZXJWYWx1ZSI6ICIxMDAwMDciLA0KPiArICAgICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6
ICJSZXRpcmVkIGluc3RydWN0aW9ucyB0aGF0IGFyZSBmZXRjaGVkIGFmdGVyIGFuIGludGVy
dmFsIHdoZXJlIHRoZSBmcm9udC1lbmQgZGVsaXZlcmVkIG5vIHVvcHMgZm9yIGEgcGVyaW9k
IG9mIDQgY3ljbGVzIHdoaWNoIHdhcyBub3QgaW50ZXJydXB0ZWQgYnkgYSBiYWNrLWVuZCBz
dGFsbC4iLA0KPiArICAgICAgICAiVGFrZW5BbG9uZSI6ICIxIg0KPiArICAgIH0sDQo+ICsg
ICAgew0KPiArICAgICAgICAiUEVCUyI6ICIxIiwNCj4gKyAgICAgICAgIkNvbGxlY3RQRUJT
UmVjb3JkIjogIjIiLA0KPiArICAgICAgICAiUHVibGljRGVzY3JpcHRpb24iOiAiQ291bnRz
IHJldGlyZWQgaW5zdHJ1Y3Rpb25zIHRoYXQgYXJlIGRlbGl2ZXJlZCB0byB0aGUgYmFjay1l
bmQgYWZ0ZXIgYSBmcm9udC1lbmQgc3RhbGwgb2YgYXQgbGVhc3QgOCBjeWNsZXMuIER1cmlu
ZyB0aGlzIHBlcmlvZCB0aGUgZnJvbnQtZW5kIGRlbGl2ZXJlZCBubyB1b3BzLiIsDQo+ICsg
ICAgICAgICJFdmVudENvZGUiOiAiMHhDNiIsDQo+ICsgICAgICAgICJNU1JWYWx1ZSI6ICIw
eDUwMDgwNiIsDQo+ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+
ICsgICAgICAgICJVTWFzayI6ICIweDEiLA0KPiArICAgICAgICAiUEVCU2NvdW50ZXJzIjog
IjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJFdmVudE5hbWUiOiAiRlJPTlRFTkRf
UkVUSVJFRC5MQVRFTkNZX0dFXzgiLA0KPiArICAgICAgICAiTVNSSW5kZXgiOiAiMHgzRjci
LA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIxMDAwMDciLA0KPiArICAgICAg
ICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJSZXRpcmVkIGluc3RydWN0aW9ucyB0aGF0IGFyZSBm
ZXRjaGVkIGFmdGVyIGFuIGludGVydmFsIHdoZXJlIHRoZSBmcm9udC1lbmQgZGVsaXZlcmVk
IG5vIHVvcHMgZm9yIGEgcGVyaW9kIG9mIDggY3ljbGVzIHdoaWNoIHdhcyBub3QgaW50ZXJy
dXB0ZWQgYnkgYSBiYWNrLWVuZCBzdGFsbC4iLA0KPiArICAgICAgICAiVGFrZW5BbG9uZSI6
ICIxIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAiUEVCUyI6ICIxIiwNCj4g
KyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAiUHVibGlj
RGVzY3JpcHRpb24iOiAiQ291bnRzIHJldGlyZWQgaW5zdHJ1Y3Rpb25zIHRoYXQgYXJlIGRl
bGl2ZXJlZCB0byB0aGUgYmFjay1lbmQgYWZ0ZXIgYSBmcm9udC1lbmQgc3RhbGwgb2YgYXQg
bGVhc3QgMTYgY3ljbGVzLiBEdXJpbmcgdGhpcyBwZXJpb2QgdGhlIGZyb250LWVuZCBkZWxp
dmVyZWQgbm8gdW9wcy4iLA0KPiArICAgICAgICAiRXZlbnRDb2RlIjogIjB4QzYiLA0KPiAr
ICAgICAgICAiTVNSVmFsdWUiOiAiMHg1MDEwMDYiLA0KPiArICAgICAgICAiQ291bnRlciI6
ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAgICAiVU1hc2siOiAiMHgxIiwNCj4gKyAg
ICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAgICAi
RXZlbnROYW1lIjogIkZST05URU5EX1JFVElSRUQuTEFURU5DWV9HRV8xNiIsDQo+ICsgICAg
ICAgICJNU1JJbmRleCI6ICIweDNGNyIsDQo+ICsgICAgICAgICJTYW1wbGVBZnRlclZhbHVl
IjogIjEwMDAwNyIsDQo+ICsgICAgICAgICJCcmllZkRlc2NyaXB0aW9uIjogIlJldGlyZWQg
aW5zdHJ1Y3Rpb25zIHRoYXQgYXJlIGZldGNoZWQgYWZ0ZXIgYW4gaW50ZXJ2YWwgd2hlcmUg
dGhlIGZyb250LWVuZCBkZWxpdmVyZWQgbm8gdW9wcyBmb3IgYSBwZXJpb2Qgb2YgMTYgY3lj
bGVzIHdoaWNoIHdhcyBub3QgaW50ZXJydXB0ZWQgYnkgYSBiYWNrLWVuZCBzdGFsbC4iLA0K
PiArICAgICAgICAiVGFrZW5BbG9uZSI6ICIxIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiAr
ICAgICAgICAiUEVCUyI6ICIxIiwNCj4gKyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjog
IjIiLA0KPiArICAgICAgICAiUHVibGljRGVzY3JpcHRpb24iOiAiQ291bnRzIHJldGlyZWQg
aW5zdHJ1Y3Rpb25zIHRoYXQgYXJlIGRlbGl2ZXJlZCB0byB0aGUgYmFjay1lbmQgYWZ0ZXIg
YSBmcm9udC1lbmQgc3RhbGwgb2YgYXQgbGVhc3QgMzIgY3ljbGVzLiBEdXJpbmcgdGhpcyBw
ZXJpb2QgdGhlIGZyb250LWVuZCBkZWxpdmVyZWQgbm8gdW9wcy4iLA0KPiArICAgICAgICAi
RXZlbnRDb2RlIjogIjB4QzYiLA0KPiArICAgICAgICAiTVNSVmFsdWUiOiAiMHg1MDIwMDYi
LA0KPiArICAgICAgICAiQ291bnRlciI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAg
ICAiVU1hc2siOiAiMHgxIiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwz
LDQsNSw2LDciLA0KPiArICAgICAgICAiRXZlbnROYW1lIjogIkZST05URU5EX1JFVElSRUQu
TEFURU5DWV9HRV8zMiIsDQo+ICsgICAgICAgICJNU1JJbmRleCI6ICIweDNGNyIsDQo+ICsg
ICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjEwMDAwNyIsDQo+ICsgICAgICAgICJCcmll
ZkRlc2NyaXB0aW9uIjogIlJldGlyZWQgaW5zdHJ1Y3Rpb25zIHRoYXQgYXJlIGZldGNoZWQg
YWZ0ZXIgYW4gaW50ZXJ2YWwgd2hlcmUgdGhlIGZyb250LWVuZCBkZWxpdmVyZWQgbm8gdW9w
cyBmb3IgYSBwZXJpb2Qgb2YgMzIgY3ljbGVzIHdoaWNoIHdhcyBub3QgaW50ZXJydXB0ZWQg
YnkgYSBiYWNrLWVuZCBzdGFsbC4iLA0KPiArICAgICAgICAiVGFrZW5BbG9uZSI6ICIxIg0K
PiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAiUEVCUyI6ICIxIiwNCj4gKyAgICAg
ICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAiUHVibGljRGVzY3Jp
cHRpb24iOiAiQ291bnRzIHJldGlyZWQgaW5zdHJ1Y3Rpb25zIHRoYXQgYXJlIGZldGNoZWQg
YWZ0ZXIgYW4gaW50ZXJ2YWwgd2hlcmUgdGhlIGZyb250LWVuZCBkZWxpdmVyZWQgbm8gdW9w
cyBmb3IgYSBwZXJpb2Qgb2YgNjQgY3ljbGVzIHdoaWNoIHdhcyBub3QgaW50ZXJydXB0ZWQg
YnkgYSBiYWNrLWVuZCBzdGFsbC4iLA0KPiArICAgICAgICAiRXZlbnRDb2RlIjogIjB4QzYi
LA0KPiArICAgICAgICAiTVNSVmFsdWUiOiAiMHg1MDQwMDYiLA0KPiArICAgICAgICAiQ291
bnRlciI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAgICAiVU1hc2siOiAiMHgxIiwN
Cj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAg
ICAgICAiRXZlbnROYW1lIjogIkZST05URU5EX1JFVElSRUQuTEFURU5DWV9HRV82NCIsDQo+
ICsgICAgICAgICJNU1JJbmRleCI6ICIweDNGNyIsDQo+ICsgICAgICAgICJTYW1wbGVBZnRl
clZhbHVlIjogIjEwMDAwNyIsDQo+ICsgICAgICAgICJCcmllZkRlc2NyaXB0aW9uIjogIlJl
dGlyZWQgaW5zdHJ1Y3Rpb25zIHRoYXQgYXJlIGZldGNoZWQgYWZ0ZXIgYW4gaW50ZXJ2YWwg
d2hlcmUgdGhlIGZyb250LWVuZCBkZWxpdmVyZWQgbm8gdW9wcyBmb3IgYSBwZXJpb2Qgb2Yg
NjQgY3ljbGVzIHdoaWNoIHdhcyBub3QgaW50ZXJydXB0ZWQgYnkgYSBiYWNrLWVuZCBzdGFs
bC4iLA0KPiArICAgICAgICAiVGFrZW5BbG9uZSI6ICIxIg0KPiArICAgIH0sDQo+ICsgICAg
ew0KPiArICAgICAgICAiUEVCUyI6ICIxIiwNCj4gKyAgICAgICAgIkNvbGxlY3RQRUJTUmVj
b3JkIjogIjIiLA0KPiArICAgICAgICAiUHVibGljRGVzY3JpcHRpb24iOiAiQ291bnRzIHJl
dGlyZWQgaW5zdHJ1Y3Rpb25zIHRoYXQgYXJlIGZldGNoZWQgYWZ0ZXIgYW4gaW50ZXJ2YWwg
d2hlcmUgdGhlIGZyb250LWVuZCBkZWxpdmVyZWQgbm8gdW9wcyBmb3IgYSBwZXJpb2Qgb2Yg
MTI4IGN5Y2xlcyB3aGljaCB3YXMgbm90IGludGVycnVwdGVkIGJ5IGEgYmFjay1lbmQgc3Rh
bGwuIiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIweEM2IiwNCj4gKyAgICAgICAgIk1T
UlZhbHVlIjogIjB4NTA4MDA2IiwNCj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMCwxLDIsMyw0
LDUsNiw3IiwNCj4gKyAgICAgICAgIlVNYXNrIjogIjB4MSIsDQo+ICsgICAgICAgICJQRUJT
Y291bnRlcnMiOiAiMCwxLDIsMyw0LDUsNiw3IiwNCj4gKyAgICAgICAgIkV2ZW50TmFtZSI6
ICJGUk9OVEVORF9SRVRJUkVELkxBVEVOQ1lfR0VfMTI4IiwNCj4gKyAgICAgICAgIk1TUklu
ZGV4IjogIjB4M0Y3IiwNCj4gKyAgICAgICAgIlNhbXBsZUFmdGVyVmFsdWUiOiAiMTAwMDA3
IiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiUmV0aXJlZCBpbnN0cnVjdGlv
bnMgdGhhdCBhcmUgZmV0Y2hlZCBhZnRlciBhbiBpbnRlcnZhbCB3aGVyZSB0aGUgZnJvbnQt
ZW5kIGRlbGl2ZXJlZCBubyB1b3BzIGZvciBhIHBlcmlvZCBvZiAxMjggY3ljbGVzIHdoaWNo
IHdhcyBub3QgaW50ZXJydXB0ZWQgYnkgYSBiYWNrLWVuZCBzdGFsbC4iLA0KPiArICAgICAg
ICAiVGFrZW5BbG9uZSI6ICIxIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAi
UEVCUyI6ICIxIiwNCj4gKyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiAr
ICAgICAgICAiUHVibGljRGVzY3JpcHRpb24iOiAiQ291bnRzIHJldGlyZWQgaW5zdHJ1Y3Rp
b25zIHRoYXQgYXJlIGZldGNoZWQgYWZ0ZXIgYW4gaW50ZXJ2YWwgd2hlcmUgdGhlIGZyb250
LWVuZCBkZWxpdmVyZWQgbm8gdW9wcyBmb3IgYSBwZXJpb2Qgb2YgMjU2IGN5Y2xlcyB3aGlj
aCB3YXMgbm90IGludGVycnVwdGVkIGJ5IGEgYmFjay1lbmQgc3RhbGwuIiwNCj4gKyAgICAg
ICAgIkV2ZW50Q29kZSI6ICIweEM2IiwNCj4gKyAgICAgICAgIk1TUlZhbHVlIjogIjB4NTEw
MDA2IiwNCj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMCwxLDIsMyw0LDUsNiw3IiwNCj4gKyAg
ICAgICAgIlVNYXNrIjogIjB4MSIsDQo+ICsgICAgICAgICJQRUJTY291bnRlcnMiOiAiMCwx
LDIsMyw0LDUsNiw3IiwNCj4gKyAgICAgICAgIkV2ZW50TmFtZSI6ICJGUk9OVEVORF9SRVRJ
UkVELkxBVEVOQ1lfR0VfMjU2IiwNCj4gKyAgICAgICAgIk1TUkluZGV4IjogIjB4M0Y3IiwN
Cj4gKyAgICAgICAgIlNhbXBsZUFmdGVyVmFsdWUiOiAiMTAwMDA3IiwNCj4gKyAgICAgICAg
IkJyaWVmRGVzY3JpcHRpb24iOiAiUmV0aXJlZCBpbnN0cnVjdGlvbnMgdGhhdCBhcmUgZmV0
Y2hlZCBhZnRlciBhbiBpbnRlcnZhbCB3aGVyZSB0aGUgZnJvbnQtZW5kIGRlbGl2ZXJlZCBu
byB1b3BzIGZvciBhIHBlcmlvZCBvZiAyNTYgY3ljbGVzIHdoaWNoIHdhcyBub3QgaW50ZXJy
dXB0ZWQgYnkgYSBiYWNrLWVuZCBzdGFsbC4iLA0KPiArICAgICAgICAiVGFrZW5BbG9uZSI6
ICIxIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAiUEVCUyI6ICIxIiwNCj4g
KyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAiUHVibGlj
RGVzY3JpcHRpb24iOiAiQ291bnRzIHJldGlyZWQgaW5zdHJ1Y3Rpb25zIHRoYXQgYXJlIGZl
dGNoZWQgYWZ0ZXIgYW4gaW50ZXJ2YWwgd2hlcmUgdGhlIGZyb250LWVuZCBkZWxpdmVyZWQg
bm8gdW9wcyBmb3IgYSBwZXJpb2Qgb2YgNTEyIGN5Y2xlcyB3aGljaCB3YXMgbm90IGludGVy
cnVwdGVkIGJ5IGEgYmFjay1lbmQgc3RhbGwuIiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6
ICIweEM2IiwNCj4gKyAgICAgICAgIk1TUlZhbHVlIjogIjB4NTIwMDA2IiwNCj4gKyAgICAg
ICAgIkNvdW50ZXIiOiAiMCwxLDIsMyw0LDUsNiw3IiwNCj4gKyAgICAgICAgIlVNYXNrIjog
IjB4MSIsDQo+ICsgICAgICAgICJQRUJTY291bnRlcnMiOiAiMCwxLDIsMyw0LDUsNiw3IiwN
Cj4gKyAgICAgICAgIkV2ZW50TmFtZSI6ICJGUk9OVEVORF9SRVRJUkVELkxBVEVOQ1lfR0Vf
NTEyIiwNCj4gKyAgICAgICAgIk1TUkluZGV4IjogIjB4M0Y3IiwNCj4gKyAgICAgICAgIlNh
bXBsZUFmdGVyVmFsdWUiOiAiMTAwMDA3IiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRp
b24iOiAiUmV0aXJlZCBpbnN0cnVjdGlvbnMgdGhhdCBhcmUgZmV0Y2hlZCBhZnRlciBhbiBp
bnRlcnZhbCB3aGVyZSB0aGUgZnJvbnQtZW5kIGRlbGl2ZXJlZCBubyB1b3BzIGZvciBhIHBl
cmlvZCBvZiA1MTIgY3ljbGVzIHdoaWNoIHdhcyBub3QgaW50ZXJydXB0ZWQgYnkgYSBiYWNr
LWVuZCBzdGFsbC4iLA0KPiArICAgICAgICAiVGFrZW5BbG9uZSI6ICIxIg0KPiArICAgIH0s
DQo+ICsgICAgew0KPiArICAgICAgICAiUEVCUyI6ICIxIiwNCj4gKyAgICAgICAgIkNvbGxl
Y3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAiUHVibGljRGVzY3JpcHRpb24iOiAi
Q291bnRzIHJldGlyZWQgaW5zdHJ1Y3Rpb25zIHRoYXQgYXJlIGRlbGl2ZXJlZCB0byB0aGUg
YmFjay1lbmQgYWZ0ZXIgdGhlIGZyb250LWVuZCBoYWQgYXQgbGVhc3QgMSBidWJibGUtc2xv
dCBmb3IgYSBwZXJpb2Qgb2YgMiBjeWNsZXMuIEEgYnViYmxlLXNsb3QgaXMgYW4gZW1wdHkg
aXNzdWUtcGlwZWxpbmUgc2xvdCB3aGlsZSB0aGVyZSB3YXMgbm8gUkFUIHN0YWxsLiIsDQo+
ICsgICAgICAgICJFdmVudENvZGUiOiAiMHhDNiIsDQo+ICsgICAgICAgICJNU1JWYWx1ZSI6
ICIweDEwMDIwNiIsDQo+ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMsNCw1LDYsNyIs
DQo+ICsgICAgICAgICJVTWFzayI6ICIweDEiLA0KPiArICAgICAgICAiUEVCU2NvdW50ZXJz
IjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJFdmVudE5hbWUiOiAiRlJPTlRF
TkRfUkVUSVJFRC5MQVRFTkNZX0dFXzJfQlVCQkxFU19HRV8xIiwNCj4gKyAgICAgICAgIk1T
UkluZGV4IjogIjB4M0Y3IiwNCj4gKyAgICAgICAgIlNhbXBsZUFmdGVyVmFsdWUiOiAiMTAw
MDA3IiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiUmV0aXJlZCBpbnN0cnVj
dGlvbnMgdGhhdCBhcmUgZmV0Y2hlZCBhZnRlciBhbiBpbnRlcnZhbCB3aGVyZSB0aGUgZnJv
bnQtZW5kIGhhZCBhdCBsZWFzdCAxIGJ1YmJsZS1zbG90IGZvciBhIHBlcmlvZCBvZiAyIGN5
Y2xlcyB3aGljaCB3YXMgbm90IGludGVycnVwdGVkIGJ5IGEgYmFjay1lbmQgc3RhbGwuIiwN
Cj4gKyAgICAgICAgIlRha2VuQWxvbmUiOiAiMSINCj4gKyAgICB9DQo+ICtdDQo+IFwgTm8g
bmV3bGluZSBhdCBlbmQgb2YgZmlsZQ0KPiBkaWZmIC0tZ2l0IGEvdG9vbHMvcGVyZi9wbXUt
ZXZlbnRzL2FyY2gveDg2L2ljZWxha2UvbWVtb3J5Lmpzb24gYi90b29scy9wZXJmL3BtdS1l
dmVudHMvYXJjaC94ODYvaWNlbGFrZS9tZW1vcnkuanNvbg0KPiBuZXcgZmlsZSBtb2RlIDEw
MDY0NA0KPiBpbmRleCAwMDAwMDAwMDAwMDAuLmYxNTgzNjZiOWRkNg0KPiAtLS0gL2Rldi9u
dWxsDQo+ICsrKyBiL3Rvb2xzL3BlcmYvcG11LWV2ZW50cy9hcmNoL3g4Ni9pY2VsYWtlL21l
bW9yeS5qc29uDQo+IEBAIC0wLDAgKzEsNDEwIEBADQo+ICtbDQo+ICsgICAgew0KPiArICAg
ICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNj
cmlwdGlvbiI6ICJDb3VudHMgdGhlIG51bWJlciBvZiB0aW1lcyBhIFRTWCBsaW5lIGhhZCBh
IGNhY2hlIGNvbmZsaWN0LiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHg1NCIsDQo+
ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMiLA0KPiArICAgICAgICAiVU1hc2siOiAi
MHgxIiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzIiwNCj4gKyAgICAg
ICAgIkV2ZW50TmFtZSI6ICJUWF9NRU0uQUJPUlRfQ09ORkxJQ1QiLA0KPiArICAgICAgICAi
U2FtcGxlQWZ0ZXJWYWx1ZSI6ICIyMDAwMDAzIiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3Jp
cHRpb24iOiAiTnVtYmVyIG9mIHRpbWVzIGEgdHJhbnNhY3Rpb25hbCBhYm9ydCB3YXMgc2ln
bmFsZWQgZHVlIHRvIGEgZGF0YSBjb25mbGljdCBvbiBhIHRyYW5zYWN0aW9uYWxseSBhY2Nl
c3NlZCBhZGRyZXNzIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAiQ29sbGVj
dFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJT
cGVjdWxhdGl2ZWx5IGNvdW50cyB0aGUgbnVtYmVyIFRyYW5zYWN0aW9uYWwgU3luY2hyb25p
emF0aW9uIEV4dGVuc2lvbnMgKFRTWCkgQWJvcnRzIGR1ZSB0byBhIGRhdGEgY2FwYWNpdHkg
bGltaXRhdGlvbiBmb3IgdHJhbnNhY3Rpb25hbCB3cml0ZXMuIiwNCj4gKyAgICAgICAgIkV2
ZW50Q29kZSI6ICIweDU0IiwNCj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMCwxLDIsMyIsDQo+
ICsgICAgICAgICJVTWFzayI6ICIweDIiLA0KPiArICAgICAgICAiUEVCU2NvdW50ZXJzIjog
IjAsMSwyLDMiLA0KPiArICAgICAgICAiRXZlbnROYW1lIjogIlRYX01FTS5BQk9SVF9DQVBB
Q0lUWV9XUklURSIsDQo+ICsgICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjIwMDAwMDMi
LA0KPiArICAgICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJTcGVjdWxhdGl2ZWx5IGNvdW50
cyB0aGUgbnVtYmVyIFRTWCBBYm9ydHMgZHVlIHRvIGEgZGF0YSBjYXBhY2l0eSBsaW1pdGF0
aW9uIGZvciB0cmFuc2FjdGlvbmFsIHdyaXRlcy4iDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+
ICsgICAgICAgICJDb2xsZWN0UEVCU1JlY29yZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1Ymxp
Y0Rlc2NyaXB0aW9uIjogIkNvdW50cyB0aGUgbnVtYmVyIG9mIHRpbWVzIGEgVFNYIEFib3J0
IHdhcyB0cmlnZ2VyZWQgZHVlIHRvIGEgbm9uLXJlbGVhc2UvY29tbWl0IHN0b3JlIHRvIGxv
Y2suIiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIweDU0IiwNCj4gKyAgICAgICAgIkNv
dW50ZXIiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJVTWFzayI6ICIweDQiLA0KPiArICAg
ICAgICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMiLA0KPiArICAgICAgICAiRXZlbnROYW1l
IjogIlRYX01FTS5BQk9SVF9ITEVfU1RPUkVfVE9fRUxJREVEX0xPQ0siLA0KPiArICAgICAg
ICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIxMDAwMDMiLA0KPiArICAgICAgICAiQnJpZWZEZXNj
cmlwdGlvbiI6ICJOdW1iZXIgb2YgdGltZXMgYSBITEUgdHJhbnNhY3Rpb25hbCByZWdpb24g
YWJvcnRlZCBkdWUgdG8gYSBub24gWFJFTEVBU0UgcHJlZml4ZWQgaW5zdHJ1Y3Rpb24gd3Jp
dGluZyB0byBhbiBlbGlkZWQgbG9jayBpbiB0aGUgZWxpc2lvbiBidWZmZXIiDQo+ICsgICAg
fSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJDb2xsZWN0UEVCU1JlY29yZCI6ICIyIiwNCj4g
KyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9uIjogIkNvdW50cyB0aGUgbnVtYmVyIG9mIHRp
bWVzIGEgVFNYIEFib3J0IHdhcyB0cmlnZ2VyZWQgZHVlIHRvIGNvbW1pdCBidXQgTG9jayBC
dWZmZXIgbm90IGVtcHR5LiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHg1NCIsDQo+
ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMiLA0KPiArICAgICAgICAiVU1hc2siOiAi
MHg4IiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzIiwNCj4gKyAgICAg
ICAgIkV2ZW50TmFtZSI6ICJUWF9NRU0uQUJPUlRfSExFX0VMSVNJT05fQlVGRkVSX05PVF9F
TVBUWSIsDQo+ICsgICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjIwMDAwMDMiLA0KPiAr
ICAgICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJOdW1iZXIgb2YgdGltZXMgYW4gSExFIHRy
YW5zYWN0aW9uYWwgZXhlY3V0aW9uIGFib3J0ZWQgZHVlIHRvIE5vQWxsb2NhdGVkRWxpc2lv
bkJ1ZmZlciBiZWluZyBub24temVyby4iDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAg
ICAgICJDb2xsZWN0UEVCU1JlY29yZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2Ny
aXB0aW9uIjogIkNvdW50cyB0aGUgbnVtYmVyIG9mIHRpbWVzIGEgVFNYIEFib3J0IHdhcyB0
cmlnZ2VyZWQgZHVlIHRvIHJlbGVhc2UvY29tbWl0IGJ1dCBkYXRhIGFuZCBhZGRyZXNzIG1p
c21hdGNoLiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHg1NCIsDQo+ICsgICAgICAg
ICJDb3VudGVyIjogIjAsMSwyLDMiLA0KPiArICAgICAgICAiVU1hc2siOiAiMHgxMCIsDQo+
ICsgICAgICAgICJQRUJTY291bnRlcnMiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJFdmVu
dE5hbWUiOiAiVFhfTUVNLkFCT1JUX0hMRV9FTElTSU9OX0JVRkZFUl9NSVNNQVRDSCIsDQo+
ICsgICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjIwMDAwMDMiLA0KPiArICAgICAgICAi
QnJpZWZEZXNjcmlwdGlvbiI6ICJOdW1iZXIgb2YgdGltZXMgYW4gSExFIHRyYW5zYWN0aW9u
YWwgZXhlY3V0aW9uIGFib3J0ZWQgZHVlIHRvIFhSRUxFQVNFIGxvY2sgbm90IHNhdGlzZnlp
bmcgdGhlIGFkZHJlc3MgYW5kIHZhbHVlIHJlcXVpcmVtZW50cyBpbiB0aGUgZWxpc2lvbiBi
dWZmZXIiDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJDb2xsZWN0UEVCU1Jl
Y29yZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9uIjogIkNvdW50cyB0
aGUgbnVtYmVyIG9mIHRpbWVzIGEgVFNYIEFib3J0IHdhcyB0cmlnZ2VyZWQgZHVlIHRvIGF0
dGVtcHRpbmcgYW4gdW5zdXBwb3J0ZWQgYWxpZ25tZW50IGZyb20gTG9jayBCdWZmZXIuIiwN
Cj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIweDU0IiwNCj4gKyAgICAgICAgIkNvdW50ZXIi
OiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJVTWFzayI6ICIweDIwIiwNCj4gKyAgICAgICAg
IlBFQlNjb3VudGVycyI6ICIwLDEsMiwzIiwNCj4gKyAgICAgICAgIkV2ZW50TmFtZSI6ICJU
WF9NRU0uQUJPUlRfSExFX0VMSVNJT05fQlVGRkVSX1VOU1VQUE9SVEVEX0FMSUdOTUVOVCIs
DQo+ICsgICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjIwMDAwMDMiLA0KPiArICAgICAg
ICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJOdW1iZXIgb2YgdGltZXMgYW4gSExFIHRyYW5zYWN0
aW9uYWwgZXhlY3V0aW9uIGFib3J0ZWQgZHVlIHRvIGFuIHVuc3VwcG9ydGVkIHJlYWQgYWxp
Z25tZW50IGZyb20gdGhlIGVsaXNpb24gYnVmZmVyLiINCj4gKyAgICB9LA0KPiArICAgIHsN
Cj4gKyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAiUHVi
bGljRGVzY3JpcHRpb24iOiAiQ291bnRzIHRoZSBudW1iZXIgb2YgdGltZXMgd2UgY291bGQg
bm90IGFsbG9jYXRlIExvY2sgQnVmZmVyLiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAi
MHg1NCIsDQo+ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMiLA0KPiArICAgICAgICAi
VU1hc2siOiAiMHg0MCIsDQo+ICsgICAgICAgICJQRUJTY291bnRlcnMiOiAiMCwxLDIsMyIs
DQo+ICsgICAgICAgICJFdmVudE5hbWUiOiAiVFhfTUVNLkhMRV9FTElTSU9OX0JVRkZFUl9G
VUxMIiwNCj4gKyAgICAgICAgIlNhbXBsZUFmdGVyVmFsdWUiOiAiMjAwMDAwMyIsDQo+ICsg
ICAgICAgICJCcmllZkRlc2NyaXB0aW9uIjogIk51bWJlciBvZiB0aW1lcyBITEUgbG9jayBj
b3VsZCBub3QgYmUgZWxpZGVkIGR1ZSB0byBFbGlzaW9uQnVmZmVyQXZhaWxhYmxlIGJlaW5n
IHplcm8uIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAiQ29sbGVjdFBFQlNS
ZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJDb3VudHMg
VW5mcmllbmRseSBUU1ggYWJvcnQgdHJpZ2dlcmVkIGJ5IGEgdnplcm91cHBlciBpbnN0cnVj
dGlvbi4iLA0KPiArICAgICAgICAiRXZlbnRDb2RlIjogIjB4NWQiLA0KPiArICAgICAgICAi
Q291bnRlciI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAgICAiVU1hc2siOiAiMHgy
IiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiAr
ICAgICAgICAiRXZlbnROYW1lIjogIlRYX0VYRUMuTUlTQzIiLA0KPiArICAgICAgICAiU2Ft
cGxlQWZ0ZXJWYWx1ZSI6ICIyMDAwMDAzIiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRp
b24iOiAiQ291bnRzIHRoZSBudW1iZXIgb2YgdGltZXMgYSBjbGFzcyBvZiBpbnN0cnVjdGlv
bnMgdGhhdCBtYXkgY2F1c2UgYSB0cmFuc2FjdGlvbmFsIGFib3J0IHdhcyBleGVjdXRlZCBp
bnNpZGUgYSB0cmFuc2FjdGlvbmFsIHJlZ2lvbiINCj4gKyAgICB9LA0KPiArICAgIHsNCj4g
KyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAiUHVibGlj
RGVzY3JpcHRpb24iOiAiQ291bnRzIFVuZnJpZW5kbHkgVFNYIGFib3J0IHRyaWdnZXJlZCBi
eSBhIG5lc3QgY291bnQgdGhhdCBpcyB0b28gZGVlcC4iLA0KPiArICAgICAgICAiRXZlbnRD
b2RlIjogIjB4NWQiLA0KPiArICAgICAgICAiQ291bnRlciI6ICIwLDEsMiwzLDQsNSw2LDci
LA0KPiArICAgICAgICAiVU1hc2siOiAiMHg0IiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVy
cyI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAgICAiRXZlbnROYW1lIjogIlRYX0VY
RUMuTUlTQzMiLA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIyMDAwMDAzIiwN
Cj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiTnVtYmVyIG9mIHRpbWVzIGFuIGlu
c3RydWN0aW9uIGV4ZWN1dGlvbiBjYXVzZWQgdGhlIHRyYW5zYWN0aW9uYWwgbmVzdCBjb3Vu
dCBzdXBwb3J0ZWQgdG8gYmUgZXhjZWVkZWQiDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsg
ICAgICAgICJDb2xsZWN0UEVCU1JlY29yZCI6ICIyIiwNCj4gKyAgICAgICAgIkV2ZW50Q29k
ZSI6ICIweEEzIiwNCj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMCwxLDIsMyIsDQo+ICsgICAg
ICAgICJVTWFzayI6ICIweDIiLA0KPiArICAgICAgICAiUEVCU2NvdW50ZXJzIjogIjAsMSwy
LDMiLA0KPiArICAgICAgICAiRXZlbnROYW1lIjogIkNZQ0xFX0FDVElWSVRZLkNZQ0xFU19M
M19NSVNTIiwNCj4gKyAgICAgICAgIlNhbXBsZUFmdGVyVmFsdWUiOiAiMjAwMDAwMyIsDQo+
ICsgICAgICAgICJCcmllZkRlc2NyaXB0aW9uIjogIkN5Y2xlcyB3aGlsZSBMMyBjYWNoZSBt
aXNzIGRlbWFuZCBsb2FkIGlzIG91dHN0YW5kaW5nLiIsDQo+ICsgICAgICAgICJDb3VudGVy
TWFzayI6ICIyIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAiQ29sbGVjdFBF
QlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHhBMyIsDQo+ICsg
ICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMiLA0KPiArICAgICAgICAiVU1hc2siOiAiMHg2
IiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzIiwNCj4gKyAgICAgICAg
IkV2ZW50TmFtZSI6ICJDWUNMRV9BQ1RJVklUWS5TVEFMTFNfTDNfTUlTUyIsDQo+ICsgICAg
ICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjIwMDAwMDMiLA0KPiArICAgICAgICAiQnJpZWZE
ZXNjcmlwdGlvbiI6ICJFeGVjdXRpb24gc3RhbGxzIHdoaWxlIEwzIGNhY2hlIG1pc3MgZGVt
YW5kIGxvYWQgaXMgb3V0c3RhbmRpbmcuIiwNCj4gKyAgICAgICAgIkNvdW50ZXJNYXNrIjog
IjYiDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJDb2xsZWN0UEVCU1JlY29y
ZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9uIjogIkRlbWFuZCBEYXRh
IFJlYWQgcmVxdWVzdHMgd2hvIG1pc3MgTDMgY2FjaGUuIiwNCj4gKyAgICAgICAgIkV2ZW50
Q29kZSI6ICIweEIwIiwNCj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMCwxLDIsMyIsDQo+ICsg
ICAgICAgICJVTWFzayI6ICIweDEwIiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIw
LDEsMiwzIiwNCj4gKyAgICAgICAgIkV2ZW50TmFtZSI6ICJPRkZDT1JFX1JFUVVFU1RTLkwz
X01JU1NfREVNQU5EX0RBVEFfUkQiLA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6
ICIxMDAwMDMiLA0KPiArICAgICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJEZW1hbmQgRGF0
YSBSZWFkIHJlcXVlc3RzIHdobyBtaXNzIEwzIGNhY2hlIg0KPiArICAgIH0sDQo+ICsgICAg
ew0KPiArICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQ
dWJsaWNEZXNjcmlwdGlvbiI6ICJDb3VudHMgdGhlIG51bWJlciBvZiBNYWNoaW5lIENsZWFy
cyBkZXRlY3RlZCBkeWUgdG8gbWVtb3J5IG9yZGVyaW5nLiBNZW1vcnkgT3JkZXJpbmcgTWFj
aGluZSBDbGVhcnMgbWF5IGFwcGx5IHdoZW4gYSBtZW1vcnkgcmVhZCBtYXkgbm90IGNvbmZv
cm0gdG8gdGhlIG1lbW9yeSBvcmRlcmluZyBydWxlcyBvZiB0aGUgeDg2IGFyY2hpdGVjdHVy
ZSIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHhjMyIsDQo+ICsgICAgICAgICJDb3Vu
dGVyIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJVTWFzayI6ICIweDIiLA0K
PiArICAgICAgICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAg
ICAgICJFdmVudE5hbWUiOiAiTUFDSElORV9DTEVBUlMuTUVNT1JZX09SREVSSU5HIiwNCj4g
KyAgICAgICAgIlNhbXBsZUFmdGVyVmFsdWUiOiAiMTAwMDAzIiwNCj4gKyAgICAgICAgIkJy
aWVmRGVzY3JpcHRpb24iOiAiTnVtYmVyIG9mIG1hY2hpbmUgY2xlYXJzIGR1ZSB0byBtZW1v
cnkgb3JkZXJpbmcgY29uZmxpY3RzLiINCj4gKyAgICB9LA0KPiArICAgIHsNCj4gKyAgICAg
ICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAiUHVibGljRGVzY3Jp
cHRpb24iOiAiQ291bnRzIHRoZSBudW1iZXIgb2YgdGltZXMgd2UgZW50ZXJlZCBhbiBITEUg
cmVnaW9uLiBEb2VzIG5vdCBjb3VudCBuZXN0ZWQgdHJhbnNhY3Rpb25zLiIsDQo+ICsgICAg
ICAgICJFdmVudENvZGUiOiAiMHhDOCIsDQo+ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwy
LDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJVTWFzayI6ICIweDEiLA0KPiArICAgICAgICAi
UEVCU2NvdW50ZXJzIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJFdmVudE5h
bWUiOiAiSExFX1JFVElSRUQuU1RBUlQiLA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1
ZSI6ICIyMDAwMDAzIiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiTnVtYmVy
IG9mIHRpbWVzIGFuIEhMRSBleGVjdXRpb24gc3RhcnRlZC4iDQo+ICsgICAgfSwNCj4gKyAg
ICB7DQo+ICsgICAgICAgICJDb2xsZWN0UEVCU1JlY29yZCI6ICIyIiwNCj4gKyAgICAgICAg
IlB1YmxpY0Rlc2NyaXB0aW9uIjogIkNvdW50cyB0aGUgbnVtYmVyIG9mIHRpbWVzIEhMRSBj
b21taXQgc3VjY2VlZGVkLiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHhDOCIsDQo+
ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJV
TWFzayI6ICIweDIiLA0KPiArICAgICAgICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMsNCw1
LDYsNyIsDQo+ICsgICAgICAgICJFdmVudE5hbWUiOiAiSExFX1JFVElSRUQuQ09NTUlUIiwN
Cj4gKyAgICAgICAgIlNhbXBsZUFmdGVyVmFsdWUiOiAiMjAwMDAwMyIsDQo+ICsgICAgICAg
ICJCcmllZkRlc2NyaXB0aW9uIjogIk51bWJlciBvZiB0aW1lcyBhbiBITEUgZXhlY3V0aW9u
IHN1Y2Nlc3NmdWxseSBjb21taXR0ZWQiLA0KPiArICAgICAgICAiRGF0YV9MQSI6ICIxIg0K
PiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAi
MiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJDb3VudHMgdGhlIG51bWJl
ciBvZiB0aW1lcyBITEUgYWJvcnQgd2FzIHRyaWdnZXJlZC4iLA0KPiArICAgICAgICAiRXZl
bnRDb2RlIjogIjB4YzgiLA0KPiArICAgICAgICAiQ291bnRlciI6ICIwLDEsMiwzLDQsNSw2
LDciLA0KPiArICAgICAgICAiVU1hc2siOiAiMHg0IiwNCj4gKyAgICAgICAgIlBFQlNjb3Vu
dGVycyI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAgICAiRXZlbnROYW1lIjogIkhM
RV9SRVRJUkVELkFCT1JURUQiLA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIy
MDAwMDAzIiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiTnVtYmVyIG9mIHRp
bWVzIGFuIEhMRSBleGVjdXRpb24gYWJvcnRlZCBkdWUgdG8gYW55IHJlYXNvbnMgKG11bHRp
cGxlIGNhdGVnb3JpZXMgbWF5IGNvdW50IGFzIG9uZSkuIg0KPiArICAgIH0sDQo+ICsgICAg
ew0KPiArICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQ
dWJsaWNEZXNjcmlwdGlvbiI6ICJDb3VudHMgdGhlIG51bWJlciBvZiB0aW1lcyBhbiBITEUg
ZXhlY3V0aW9uIGFib3J0ZWQgZHVlIHRvIHZhcmlvdXMgbWVtb3J5IGV2ZW50cyAoZS5nLiwg
cmVhZC93cml0ZSBjYXBhY2l0eSBhbmQgY29uZmxpY3RzKS4iLA0KPiArICAgICAgICAiRXZl
bnRDb2RlIjogIjB4QzgiLA0KPiArICAgICAgICAiQ291bnRlciI6ICIwLDEsMiwzLDQsNSw2
LDciLA0KPiArICAgICAgICAiVU1hc2siOiAiMHg4IiwNCj4gKyAgICAgICAgIlBFQlNjb3Vu
dGVycyI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAgICAiRXZlbnROYW1lIjogIkhM
RV9SRVRJUkVELkFCT1JURURfTUVNIiwNCj4gKyAgICAgICAgIlNhbXBsZUFmdGVyVmFsdWUi
OiAiMjAwMDAwMyIsDQo+ICsgICAgICAgICJCcmllZkRlc2NyaXB0aW9uIjogIk51bWJlciBv
ZiB0aW1lcyBhbiBITEUgZXhlY3V0aW9uIGFib3J0ZWQgZHVlIHRvIHZhcmlvdXMgbWVtb3J5
IGV2ZW50cyAoZS5nLiwgcmVhZC93cml0ZSBjYXBhY2l0eSBhbmQgY29uZmxpY3RzKS4iDQo+
ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJDb2xsZWN0UEVCU1JlY29yZCI6ICIy
IiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9uIjogIkNvdW50cyB0aGUgbnVtYmVy
IG9mIHRpbWVzIGFuIEhMRSBleGVjdXRpb24gYWJvcnRlZCBkdWUgdG8gSExFLXVuZnJpZW5k
bHkgaW5zdHJ1Y3Rpb25zIGFuZCBjZXJ0YWluIHVuZnJpZW5kbHkgZXZlbnRzIChzdWNoIGFz
IEFEIGFzc2lzdHMgZXRjLikuIiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIweEM4IiwN
Cj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMCwxLDIsMyw0LDUsNiw3IiwNCj4gKyAgICAgICAg
IlVNYXNrIjogIjB4MjAiLA0KPiArICAgICAgICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMs
NCw1LDYsNyIsDQo+ICsgICAgICAgICJFdmVudE5hbWUiOiAiSExFX1JFVElSRUQuQUJPUlRF
RF9VTkZSSUVORExZIiwNCj4gKyAgICAgICAgIlNhbXBsZUFmdGVyVmFsdWUiOiAiMjAwMDAw
MyIsDQo+ICsgICAgICAgICJCcmllZkRlc2NyaXB0aW9uIjogIk51bWJlciBvZiB0aW1lcyBh
biBITEUgZXhlY3V0aW9uIGFib3J0ZWQgZHVlIHRvIEhMRS11bmZyaWVuZGx5IGluc3RydWN0
aW9ucyBhbmQgY2VydGFpbiB1bmZyaWVuZGx5IGV2ZW50cyAoc3VjaCBhcyBBRCBhc3Npc3Rz
IGV0Yy4pLiINCj4gKyAgICB9LA0KPiArICAgIHsNCj4gKyAgICAgICAgIkNvbGxlY3RQRUJT
UmVjb3JkIjogIjIiLA0KPiArICAgICAgICAiUHVibGljRGVzY3JpcHRpb24iOiAiQ291bnRz
IHRoZSBudW1iZXIgb2YgdGltZXMgYW4gSExFIGV4ZWN1dGlvbiBhYm9ydGVkIGR1ZSB0byB1
bmZyaWVuZGx5IGV2ZW50cyAoc3VjaCBhcyBpbnRlcnJ1cHRzKS4iLA0KPiArICAgICAgICAi
RXZlbnRDb2RlIjogIjB4QzgiLA0KPiArICAgICAgICAiQ291bnRlciI6ICIwLDEsMiwzLDQs
NSw2LDciLA0KPiArICAgICAgICAiVU1hc2siOiAiMHg4MCIsDQo+ICsgICAgICAgICJQRUJT
Y291bnRlcnMiOiAiMCwxLDIsMyw0LDUsNiw3IiwNCj4gKyAgICAgICAgIkV2ZW50TmFtZSI6
ICJITEVfUkVUSVJFRC5BQk9SVEVEX0VWRU5UUyIsDQo+ICsgICAgICAgICJTYW1wbGVBZnRl
clZhbHVlIjogIjIwMDAwMDMiLA0KPiArICAgICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJO
dW1iZXIgb2YgdGltZXMgYW4gSExFIGV4ZWN1dGlvbiBhYm9ydGVkIGR1ZSB0byB1bmZyaWVu
ZGx5IGV2ZW50cyAoc3VjaCBhcyBpbnRlcnJ1cHRzKS4iDQo+ICsgICAgfSwNCj4gKyAgICB7
DQo+ICsgICAgICAgICJDb2xsZWN0UEVCU1JlY29yZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1
YmxpY0Rlc2NyaXB0aW9uIjogIkNvdW50cyB0aGUgbnVtYmVyIG9mIHRpbWVzIHdlIGVudGVy
ZWQgYW4gUlRNIHJlZ2lvbi4gRG9lcyBub3QgY291bnQgbmVzdGVkIHRyYW5zYWN0aW9ucy4i
LA0KPiArICAgICAgICAiRXZlbnRDb2RlIjogIjB4QzkiLA0KPiArICAgICAgICAiQ291bnRl
ciI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAgICAiVU1hc2siOiAiMHgxIiwNCj4g
KyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAg
ICAiRXZlbnROYW1lIjogIlJUTV9SRVRJUkVELlNUQVJUIiwNCj4gKyAgICAgICAgIlNhbXBs
ZUFmdGVyVmFsdWUiOiAiMjAwMDAwMyIsDQo+ICsgICAgICAgICJCcmllZkRlc2NyaXB0aW9u
IjogIk51bWJlciBvZiB0aW1lcyBhbiBSVE0gZXhlY3V0aW9uIHN0YXJ0ZWQuIg0KPiArICAg
IH0sDQo+ICsgICAgew0KPiArICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+
ICsgICAgICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJDb3VudHMgdGhlIG51bWJlciBvZiB0
aW1lcyBSVE0gY29tbWl0IHN1Y2NlZWRlZC4iLA0KPiArICAgICAgICAiRXZlbnRDb2RlIjog
IjB4QzkiLA0KPiArICAgICAgICAiQ291bnRlciI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiAr
ICAgICAgICAiVU1hc2siOiAiMHgyIiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIw
LDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAgICAiRXZlbnROYW1lIjogIlJUTV9SRVRJUkVE
LkNPTU1JVCIsDQo+ICsgICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjIwMDAwMDMiLA0K
PiArICAgICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJOdW1iZXIgb2YgdGltZXMgYW4gUlRN
IGV4ZWN1dGlvbiBzdWNjZXNzZnVsbHkgY29tbWl0dGVkIg0KPiArICAgIH0sDQo+ICsgICAg
ew0KPiArICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQ
dWJsaWNEZXNjcmlwdGlvbiI6ICJDb3VudHMgdGhlIG51bWJlciBvZiB0aW1lcyBSVE0gYWJv
cnQgd2FzIHRyaWdnZXJlZC4iLA0KPiArICAgICAgICAiRXZlbnRDb2RlIjogIjB4YzkiLA0K
PiArICAgICAgICAiQ291bnRlciI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAgICAi
VU1hc2siOiAiMHg0IiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzLDQs
NSw2LDciLA0KPiArICAgICAgICAiRXZlbnROYW1lIjogIlJUTV9SRVRJUkVELkFCT1JURUQi
LA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIyMDAwMDAzIiwNCj4gKyAgICAg
ICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiTnVtYmVyIG9mIHRpbWVzIGFuIFJUTSBleGVjdXRp
b24gYWJvcnRlZC4iLA0KPiArICAgICAgICAiRGF0YV9MQSI6ICIxIg0KPiArICAgIH0sDQo+
ICsgICAgew0KPiArICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAg
ICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJDb3VudHMgdGhlIG51bWJlciBvZiB0aW1lcyBh
biBSVE0gZXhlY3V0aW9uIGFib3J0ZWQgZHVlIHRvIHZhcmlvdXMgbWVtb3J5IGV2ZW50cyAo
ZS5nLiByZWFkL3dyaXRlIGNhcGFjaXR5IGFuZCBjb25mbGljdHMpLiIsDQo+ICsgICAgICAg
ICJFdmVudENvZGUiOiAiMHhDOSIsDQo+ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMs
NCw1LDYsNyIsDQo+ICsgICAgICAgICJVTWFzayI6ICIweDgiLA0KPiArICAgICAgICAiUEVC
U2NvdW50ZXJzIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJFdmVudE5hbWUi
OiAiUlRNX1JFVElSRUQuQUJPUlRFRF9NRU0iLA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJW
YWx1ZSI6ICIyMDAwMDAzIiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiTnVt
YmVyIG9mIHRpbWVzIGFuIFJUTSBleGVjdXRpb24gYWJvcnRlZCBkdWUgdG8gdmFyaW91cyBt
ZW1vcnkgZXZlbnRzIChlLmcuIHJlYWQvd3JpdGUgY2FwYWNpdHkgYW5kIGNvbmZsaWN0cyki
DQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJDb2xsZWN0UEVCU1JlY29yZCI6
ICIyIiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9uIjogIkNvdW50cyB0aGUgbnVt
YmVyIG9mIHRpbWVzIGFuIFJUTSBleGVjdXRpb24gYWJvcnRlZCBkdWUgdG8gSExFLXVuZnJp
ZW5kbHkgaW5zdHJ1Y3Rpb25zLiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHhDOSIs
DQo+ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAg
ICJVTWFzayI6ICIweDIwIiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwz
LDQsNSw2LDciLA0KPiArICAgICAgICAiRXZlbnROYW1lIjogIlJUTV9SRVRJUkVELkFCT1JU
RURfVU5GUklFTkRMWSIsDQo+ICsgICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjIwMDAw
MDMiLA0KPiArICAgICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJOdW1iZXIgb2YgdGltZXMg
YW4gUlRNIGV4ZWN1dGlvbiBhYm9ydGVkIGR1ZSB0byBITEUtdW5mcmllbmRseSBpbnN0cnVj
dGlvbnMiDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJDb2xsZWN0UEVCU1Jl
Y29yZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9uIjogIkNvdW50cyB0
aGUgbnVtYmVyIG9mIHRpbWVzIGFuIFJUTSBleGVjdXRpb24gYWJvcnRlZCBkdWUgdG8gaW5j
b21wYXRpYmxlIG1lbW9yeSB0eXBlLiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHhD
OSIsDQo+ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAg
ICAgICJVTWFzayI6ICIweDQwIiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEs
MiwzLDQsNSw2LDciLA0KPiArICAgICAgICAiRXZlbnROYW1lIjogIlJUTV9SRVRJUkVELkFC
T1JURURfTUVNVFlQRSIsDQo+ICsgICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjIwMDAw
MDMiLA0KPiArICAgICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJOdW1iZXIgb2YgdGltZXMg
YW4gUlRNIGV4ZWN1dGlvbiBhYm9ydGVkIGR1ZSB0byBpbmNvbXBhdGlibGUgbWVtb3J5IHR5
cGUiDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJDb2xsZWN0UEVCU1JlY29y
ZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9uIjogIkNvdW50cyB0aGUg
bnVtYmVyIG9mIHRpbWVzIGFuIFJUTSBleGVjdXRpb24gYWJvcnRlZCBkdWUgdG8gbm9uZSBv
ZiB0aGUgcHJldmlvdXMgNCBjYXRlZ29yaWVzIChlLmcuIGludGVycnVwdCkuIiwNCj4gKyAg
ICAgICAgIkV2ZW50Q29kZSI6ICIweEM5IiwNCj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMCwx
LDIsMyw0LDUsNiw3IiwNCj4gKyAgICAgICAgIlVNYXNrIjogIjB4ODAiLA0KPiArICAgICAg
ICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJFdmVu
dE5hbWUiOiAiUlRNX1JFVElSRUQuQUJPUlRFRF9FVkVOVFMiLA0KPiArICAgICAgICAiU2Ft
cGxlQWZ0ZXJWYWx1ZSI6ICIyMDAwMDAzIiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRp
b24iOiAiTnVtYmVyIG9mIHRpbWVzIGFuIFJUTSBleGVjdXRpb24gYWJvcnRlZCBkdWUgdG8g
bm9uZSBvZiB0aGUgcHJldmlvdXMgNCBjYXRlZ29yaWVzIChlLmcuIGludGVycnVwdCkiDQo+
ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJQRUJTIjogIjIiLA0KPiArICAgICAg
ICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNjcmlw
dGlvbiI6ICJDb3VudHMgcmFuZG9tbHkgc2VsZWN0ZWQgbG9hZHMgd2hlbiB0aGUgbGF0ZW5j
eSBmcm9tIGZpcnN0IGRpc3BhdGNoIHRvIGNvbXBsZXRpb24gaXMgZ3JlYXRlciB0aGFuIDQg
Y3ljbGVzLiAgUmVwb3J0ZWQgbGF0ZW5jeSBtYXkgYmUgbG9uZ2VyIHRoYW4ganVzdCB0aGUg
bWVtb3J5IGxhdGVuY3kuIiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIweGNkIiwNCj4g
KyAgICAgICAgIk1TUlZhbHVlIjogIjB4NCIsDQo+ICsgICAgICAgICJDb3VudGVyIjogIjAs
MSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJVTWFzayI6ICIweDEiLA0KPiArICAgICAg
ICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJFdmVu
dE5hbWUiOiAiTUVNX1RSQU5TX1JFVElSRUQuTE9BRF9MQVRFTkNZX0dUXzQiLA0KPiArICAg
ICAgICAiTVNSSW5kZXgiOiAiMHgzRjYiLA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1
ZSI6ICIxMDAwMDMiLA0KPiArICAgICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJDb3VudHMg
cmFuZG9tbHkgc2VsZWN0ZWQgbG9hZHMgd2hlbiB0aGUgbGF0ZW5jeSBmcm9tIGZpcnN0IGRp
c3BhdGNoIHRvIGNvbXBsZXRpb24gaXMgZ3JlYXRlciB0aGFuIDQgY3ljbGVzLiIsDQo+ICsg
ICAgICAgICJUYWtlbkFsb25lIjogIjEiDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAg
ICAgICJQRUJTIjogIjIiLA0KPiArICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIs
DQo+ICsgICAgICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJDb3VudHMgcmFuZG9tbHkgc2Vs
ZWN0ZWQgbG9hZHMgd2hlbiB0aGUgbGF0ZW5jeSBmcm9tIGZpcnN0IGRpc3BhdGNoIHRvIGNv
bXBsZXRpb24gaXMgZ3JlYXRlciB0aGFuIDggY3ljbGVzLiAgUmVwb3J0ZWQgbGF0ZW5jeSBt
YXkgYmUgbG9uZ2VyIHRoYW4ganVzdCB0aGUgbWVtb3J5IGxhdGVuY3kuIiwNCj4gKyAgICAg
ICAgIkV2ZW50Q29kZSI6ICIweGNkIiwNCj4gKyAgICAgICAgIk1TUlZhbHVlIjogIjB4OCIs
DQo+ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAg
ICJVTWFzayI6ICIweDEiLA0KPiArICAgICAgICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMs
NCw1LDYsNyIsDQo+ICsgICAgICAgICJFdmVudE5hbWUiOiAiTUVNX1RSQU5TX1JFVElSRUQu
TE9BRF9MQVRFTkNZX0dUXzgiLA0KPiArICAgICAgICAiTVNSSW5kZXgiOiAiMHgzRjYiLA0K
PiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICI1MDAyMSIsDQo+ICsgICAgICAgICJC
cmllZkRlc2NyaXB0aW9uIjogIkNvdW50cyByYW5kb21seSBzZWxlY3RlZCBsb2FkcyB3aGVu
IHRoZSBsYXRlbmN5IGZyb20gZmlyc3QgZGlzcGF0Y2ggdG8gY29tcGxldGlvbiBpcyBncmVh
dGVyIHRoYW4gOCBjeWNsZXMuIiwNCj4gKyAgICAgICAgIlRha2VuQWxvbmUiOiAiMSINCj4g
KyAgICB9LA0KPiArICAgIHsNCj4gKyAgICAgICAgIlBFQlMiOiAiMiIsDQo+ICsgICAgICAg
ICJDb2xsZWN0UEVCU1JlY29yZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0
aW9uIjogIkNvdW50cyByYW5kb21seSBzZWxlY3RlZCBsb2FkcyB3aGVuIHRoZSBsYXRlbmN5
IGZyb20gZmlyc3QgZGlzcGF0Y2ggdG8gY29tcGxldGlvbiBpcyBncmVhdGVyIHRoYW4gMTYg
Y3ljbGVzLiAgUmVwb3J0ZWQgbGF0ZW5jeSBtYXkgYmUgbG9uZ2VyIHRoYW4ganVzdCB0aGUg
bWVtb3J5IGxhdGVuY3kuIiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIweGNkIiwNCj4g
KyAgICAgICAgIk1TUlZhbHVlIjogIjB4MTAiLA0KPiArICAgICAgICAiQ291bnRlciI6ICIw
LDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAgICAiVU1hc2siOiAiMHgxIiwNCj4gKyAgICAg
ICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAgICAiRXZl
bnROYW1lIjogIk1FTV9UUkFOU19SRVRJUkVELkxPQURfTEFURU5DWV9HVF8xNiIsDQo+ICsg
ICAgICAgICJNU1JJbmRleCI6ICIweDNGNiIsDQo+ICsgICAgICAgICJTYW1wbGVBZnRlclZh
bHVlIjogIjIwMDExIiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiQ291bnRz
IHJhbmRvbWx5IHNlbGVjdGVkIGxvYWRzIHdoZW4gdGhlIGxhdGVuY3kgZnJvbSBmaXJzdCBk
aXNwYXRjaCB0byBjb21wbGV0aW9uIGlzIGdyZWF0ZXIgdGhhbiAxNiBjeWNsZXMuIiwNCj4g
KyAgICAgICAgIlRha2VuQWxvbmUiOiAiMSINCj4gKyAgICB9LA0KPiArICAgIHsNCj4gKyAg
ICAgICAgIlBFQlMiOiAiMiIsDQo+ICsgICAgICAgICJDb2xsZWN0UEVCU1JlY29yZCI6ICIy
IiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9uIjogIkNvdW50cyByYW5kb21seSBz
ZWxlY3RlZCBsb2FkcyB3aGVuIHRoZSBsYXRlbmN5IGZyb20gZmlyc3QgZGlzcGF0Y2ggdG8g
Y29tcGxldGlvbiBpcyBncmVhdGVyIHRoYW4gMzIgY3ljbGVzLiAgUmVwb3J0ZWQgbGF0ZW5j
eSBtYXkgYmUgbG9uZ2VyIHRoYW4ganVzdCB0aGUgbWVtb3J5IGxhdGVuY3kuIiwNCj4gKyAg
ICAgICAgIkV2ZW50Q29kZSI6ICIweGNkIiwNCj4gKyAgICAgICAgIk1TUlZhbHVlIjogIjB4
MjAiLA0KPiArICAgICAgICAiQ291bnRlciI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAg
ICAgICAiVU1hc2siOiAiMHgxIiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEs
MiwzLDQsNSw2LDciLA0KPiArICAgICAgICAiRXZlbnROYW1lIjogIk1FTV9UUkFOU19SRVRJ
UkVELkxPQURfTEFURU5DWV9HVF8zMiIsDQo+ICsgICAgICAgICJNU1JJbmRleCI6ICIweDNG
NiIsDQo+ICsgICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjEwMDAwNyIsDQo+ICsgICAg
ICAgICJCcmllZkRlc2NyaXB0aW9uIjogIkNvdW50cyByYW5kb21seSBzZWxlY3RlZCBsb2Fk
cyB3aGVuIHRoZSBsYXRlbmN5IGZyb20gZmlyc3QgZGlzcGF0Y2ggdG8gY29tcGxldGlvbiBp
cyBncmVhdGVyIHRoYW4gMzIgY3ljbGVzLiIsDQo+ICsgICAgICAgICJUYWtlbkFsb25lIjog
IjEiDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJQRUJTIjogIjIiLA0KPiAr
ICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNE
ZXNjcmlwdGlvbiI6ICJDb3VudHMgcmFuZG9tbHkgc2VsZWN0ZWQgbG9hZHMgd2hlbiB0aGUg
bGF0ZW5jeSBmcm9tIGZpcnN0IGRpc3BhdGNoIHRvIGNvbXBsZXRpb24gaXMgZ3JlYXRlciB0
aGFuIDY0IGN5Y2xlcy4gIFJlcG9ydGVkIGxhdGVuY3kgbWF5IGJlIGxvbmdlciB0aGFuIGp1
c3QgdGhlIG1lbW9yeSBsYXRlbmN5LiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHhj
ZCIsDQo+ICsgICAgICAgICJNU1JWYWx1ZSI6ICIweDQwIiwNCj4gKyAgICAgICAgIkNvdW50
ZXIiOiAiMCwxLDIsMyw0LDUsNiw3IiwNCj4gKyAgICAgICAgIlVNYXNrIjogIjB4MSIsDQo+
ICsgICAgICAgICJQRUJTY291bnRlcnMiOiAiMCwxLDIsMyw0LDUsNiw3IiwNCj4gKyAgICAg
ICAgIkV2ZW50TmFtZSI6ICJNRU1fVFJBTlNfUkVUSVJFRC5MT0FEX0xBVEVOQ1lfR1RfNjQi
LA0KPiArICAgICAgICAiTVNSSW5kZXgiOiAiMHgzRjYiLA0KPiArICAgICAgICAiU2FtcGxl
QWZ0ZXJWYWx1ZSI6ICIyMDAzIiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAi
Q291bnRzIHJhbmRvbWx5IHNlbGVjdGVkIGxvYWRzIHdoZW4gdGhlIGxhdGVuY3kgZnJvbSBm
aXJzdCBkaXNwYXRjaCB0byBjb21wbGV0aW9uIGlzIGdyZWF0ZXIgdGhhbiA2NCBjeWNsZXMu
IiwNCj4gKyAgICAgICAgIlRha2VuQWxvbmUiOiAiMSINCj4gKyAgICB9LA0KPiArICAgIHsN
Cj4gKyAgICAgICAgIlBFQlMiOiAiMiIsDQo+ICsgICAgICAgICJDb2xsZWN0UEVCU1JlY29y
ZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9uIjogIkNvdW50cyByYW5k
b21seSBzZWxlY3RlZCBsb2FkcyB3aGVuIHRoZSBsYXRlbmN5IGZyb20gZmlyc3QgZGlzcGF0
Y2ggdG8gY29tcGxldGlvbiBpcyBncmVhdGVyIHRoYW4gMTI4IGN5Y2xlcy4gIFJlcG9ydGVk
IGxhdGVuY3kgbWF5IGJlIGxvbmdlciB0aGFuIGp1c3QgdGhlIG1lbW9yeSBsYXRlbmN5LiIs
DQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHhjZCIsDQo+ICsgICAgICAgICJNU1JWYWx1
ZSI6ICIweDgwIiwNCj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMCwxLDIsMyw0LDUsNiw3IiwN
Cj4gKyAgICAgICAgIlVNYXNrIjogIjB4MSIsDQo+ICsgICAgICAgICJQRUJTY291bnRlcnMi
OiAiMCwxLDIsMyw0LDUsNiw3IiwNCj4gKyAgICAgICAgIkV2ZW50TmFtZSI6ICJNRU1fVFJB
TlNfUkVUSVJFRC5MT0FEX0xBVEVOQ1lfR1RfMTI4IiwNCj4gKyAgICAgICAgIk1TUkluZGV4
IjogIjB4M0Y2IiwNCj4gKyAgICAgICAgIlNhbXBsZUFmdGVyVmFsdWUiOiAiMTAwOSIsDQo+
ICsgICAgICAgICJCcmllZkRlc2NyaXB0aW9uIjogIkNvdW50cyByYW5kb21seSBzZWxlY3Rl
ZCBsb2FkcyB3aGVuIHRoZSBsYXRlbmN5IGZyb20gZmlyc3QgZGlzcGF0Y2ggdG8gY29tcGxl
dGlvbiBpcyBncmVhdGVyIHRoYW4gMTI4IGN5Y2xlcy4iLA0KPiArICAgICAgICAiVGFrZW5B
bG9uZSI6ICIxIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAiUEVCUyI6ICIy
IiwNCj4gKyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAi
UHVibGljRGVzY3JpcHRpb24iOiAiQ291bnRzIHJhbmRvbWx5IHNlbGVjdGVkIGxvYWRzIHdo
ZW4gdGhlIGxhdGVuY3kgZnJvbSBmaXJzdCBkaXNwYXRjaCB0byBjb21wbGV0aW9uIGlzIGdy
ZWF0ZXIgdGhhbiAyNTYgY3ljbGVzLiAgUmVwb3J0ZWQgbGF0ZW5jeSBtYXkgYmUgbG9uZ2Vy
IHRoYW4ganVzdCB0aGUgbWVtb3J5IGxhdGVuY3kuIiwNCj4gKyAgICAgICAgIkV2ZW50Q29k
ZSI6ICIweGNkIiwNCj4gKyAgICAgICAgIk1TUlZhbHVlIjogIjB4MTAwIiwNCj4gKyAgICAg
ICAgIkNvdW50ZXIiOiAiMCwxLDIsMyw0LDUsNiw3IiwNCj4gKyAgICAgICAgIlVNYXNrIjog
IjB4MSIsDQo+ICsgICAgICAgICJQRUJTY291bnRlcnMiOiAiMCwxLDIsMyw0LDUsNiw3IiwN
Cj4gKyAgICAgICAgIkV2ZW50TmFtZSI6ICJNRU1fVFJBTlNfUkVUSVJFRC5MT0FEX0xBVEVO
Q1lfR1RfMjU2IiwNCj4gKyAgICAgICAgIk1TUkluZGV4IjogIjB4M0Y2IiwNCj4gKyAgICAg
ICAgIlNhbXBsZUFmdGVyVmFsdWUiOiAiNTAzIiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3Jp
cHRpb24iOiAiQ291bnRzIHJhbmRvbWx5IHNlbGVjdGVkIGxvYWRzIHdoZW4gdGhlIGxhdGVu
Y3kgZnJvbSBmaXJzdCBkaXNwYXRjaCB0byBjb21wbGV0aW9uIGlzIGdyZWF0ZXIgdGhhbiAy
NTYgY3ljbGVzLiIsDQo+ICsgICAgICAgICJUYWtlbkFsb25lIjogIjEiDQo+ICsgICAgfSwN
Cj4gKyAgICB7DQo+ICsgICAgICAgICJQRUJTIjogIjIiLA0KPiArICAgICAgICAiQ29sbGVj
dFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJD
b3VudHMgcmFuZG9tbHkgc2VsZWN0ZWQgbG9hZHMgd2hlbiB0aGUgbGF0ZW5jeSBmcm9tIGZp
cnN0IGRpc3BhdGNoIHRvIGNvbXBsZXRpb24gaXMgZ3JlYXRlciB0aGFuIDUxMiBjeWNsZXMu
ICBSZXBvcnRlZCBsYXRlbmN5IG1heSBiZSBsb25nZXIgdGhhbiBqdXN0IHRoZSBtZW1vcnkg
bGF0ZW5jeS4iLA0KPiArICAgICAgICAiRXZlbnRDb2RlIjogIjB4Y2QiLA0KPiArICAgICAg
ICAiTVNSVmFsdWUiOiAiMHgyMDAiLA0KPiArICAgICAgICAiQ291bnRlciI6ICIwLDEsMiwz
LDQsNSw2LDciLA0KPiArICAgICAgICAiVU1hc2siOiAiMHgxIiwNCj4gKyAgICAgICAgIlBF
QlNjb3VudGVycyI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAgICAiRXZlbnROYW1l
IjogIk1FTV9UUkFOU19SRVRJUkVELkxPQURfTEFURU5DWV9HVF81MTIiLA0KPiArICAgICAg
ICAiTVNSSW5kZXgiOiAiMHgzRjYiLA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6
ICIxMDEiLA0KPiArICAgICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJDb3VudHMgcmFuZG9t
bHkgc2VsZWN0ZWQgbG9hZHMgd2hlbiB0aGUgbGF0ZW5jeSBmcm9tIGZpcnN0IGRpc3BhdGNo
IHRvIGNvbXBsZXRpb24gaXMgZ3JlYXRlciB0aGFuIDUxMiBjeWNsZXMuIiwNCj4gKyAgICAg
ICAgIlRha2VuQWxvbmUiOiAiMSINCj4gKyAgICB9DQo+ICtdDQo+IFwgTm8gbmV3bGluZSBh
dCBlbmQgb2YgZmlsZQ0KPiBkaWZmIC0tZ2l0IGEvdG9vbHMvcGVyZi9wbXUtZXZlbnRzL2Fy
Y2gveDg2L2ljZWxha2Uvb3RoZXIuanNvbiBiL3Rvb2xzL3BlcmYvcG11LWV2ZW50cy9hcmNo
L3g4Ni9pY2VsYWtlL290aGVyLmpzb24NCj4gbmV3IGZpbGUgbW9kZSAxMDA2NDQNCj4gaW5k
ZXggMDAwMDAwMDAwMDAwLi5mOGRmZGI4NDcyMjQNCj4gLS0tIC9kZXYvbnVsbA0KPiArKysg
Yi90b29scy9wZXJmL3BtdS1ldmVudHMvYXJjaC94ODYvaWNlbGFrZS9vdGhlci5qc29uDQo+
IEBAIC0wLDAgKzEsMTIxIEBADQo+ICtbDQo+ICsgICAgew0KPiArICAgICAgICAiQ29sbGVj
dFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJD
b3VudHMgdGhlIG51bWJlciBvZiBhdmFpbGFibGUgc2xvdHMgZm9yIGFuIHVuaGFsdGVkIGxv
Z2ljYWwgcHJvY2Vzc29yLiBUaGUgZXZlbnQgaW5jcmVtZW50cyBieSBtYWNoaW5lLXdpZHRo
IG9mIHRoZSBuYXJyb3dlc3QgcGlwZWxpbmUgYXMgZW1wbG95ZWQgYnkgdGhlIFRvcC1kb3du
IE1pY3JvYXJjaGl0ZWN0dXJlIEFuYWx5c2lzIG1ldGhvZC4gVGhlIGNvdW50IGlzIGRpc3Ry
aWJ1dGVkIGFtb25nIHVuaGFsdGVkIGxvZ2ljYWwgcHJvY2Vzc29ycyAoaHlwZXItdGhyZWFk
cykgd2hvIHNoYXJlIHRoZSBzYW1lIHBoeXNpY2FsIGNvcmUuIFNvZnR3YXJlIGNhbiB1c2Ug
dGhpcyBldmVudCBhcyB0aGUgZGVub21pbmF0b3IgZm9yIHRoZSB0b3AtbGV2ZWwgbWV0cmlj
cyBvZiB0aGUgVG9wLWRvd24gTWljcm9hcmNoaXRlY3R1cmUgQW5hbHlzaXMgbWV0aG9kLiBU
aGlzIGV2ZW50IGlzIGNvdW50ZWQgb24gYSBkZXNpZ25hdGVkIGZpeGVkIGNvdW50ZXIgKEZp
eGVkIENvdW50ZXIgMykgYW5kIGlzIGFuIGFyY2hpdGVjdHVyYWwgZXZlbnQuIiwNCj4gKyAg
ICAgICAgIkNvdW50ZXIiOiAiMzUiLA0KPiArICAgICAgICAiVU1hc2siOiAiMHg0IiwNCj4g
KyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIzNSIsDQo+ICsgICAgICAgICJFdmVudE5hbWUi
OiAiVE9QRE9XTi5TTE9UUyIsDQo+ICsgICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjEw
MDAwMDAzIiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiQ291bnRzIHRoZSBu
dW1iZXIgb2YgYXZhaWxhYmxlIHNsb3RzIGZvciBhbiB1bmhhbHRlZCBsb2dpY2FsIHByb2Nl
c3Nvci4iDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJDb2xsZWN0UEVCU1Jl
Y29yZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9uIjogIkNvdW50cyBD
b3JlIGN5Y2xlcyB3aGVyZSB0aGUgY29yZSB3YXMgcnVubmluZyB3aXRoIHBvd2VyLWRlbGl2
ZXJ5IGZvciBiYXNlbGluZSBsaWNlbnNlIGxldmVsIDAuICBUaGlzIGluY2x1ZGVzIG5vbi1B
VlggY29kZXMsIFNTRSwgQVZYIDEyOC1iaXQsIGFuZCBsb3ctY3VycmVudCBBVlggMjU2LWJp
dCBjb2Rlcy4iLA0KPiArICAgICAgICAiRXZlbnRDb2RlIjogIjB4MjgiLA0KPiArICAgICAg
ICAiQ291bnRlciI6ICIwLDEsMiwzIiwNCj4gKyAgICAgICAgIlVNYXNrIjogIjB4NyIsDQo+
ICsgICAgICAgICJQRUJTY291bnRlcnMiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJFdmVu
dE5hbWUiOiAiQ09SRV9QT1dFUi5MVkwwX1RVUkJPX0xJQ0VOU0UiLA0KPiArICAgICAgICAi
U2FtcGxlQWZ0ZXJWYWx1ZSI6ICIyMDAwMDMiLA0KPiArICAgICAgICAiQnJpZWZEZXNjcmlw
dGlvbiI6ICJDb3JlIGN5Y2xlcyB3aGVyZSB0aGUgY29yZSB3YXMgcnVubmluZyBpbiBhIG1h
bm5lciB3aGVyZSBUdXJibyBtYXkgYmUgY2xpcHBlZCB0byB0aGUgTm9uLUFWWCB0dXJibyBz
Y2hlZHVsZS4iDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJDb2xsZWN0UEVC
U1JlY29yZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9uIjogIkNvdW50
cyBDb3JlIGN5Y2xlcyB3aGVyZSB0aGUgY29yZSB3YXMgcnVubmluZyB3aXRoIHBvd2VyLWRl
bGl2ZXJ5IGZvciBsaWNlbnNlIGxldmVsIDEuICBUaGlzIGluY2x1ZGVzIGhpZ2ggY3VycmVu
dCBBVlggMjU2LWJpdCBpbnN0cnVjdGlvbnMgYXMgd2VsbCBhcyBsb3cgY3VycmVudCBBVlgg
NTEyLWJpdCBpbnN0cnVjdGlvbnMuIiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIweDI4
IiwNCj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJVTWFz
ayI6ICIweDE4IiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzIiwNCj4g
KyAgICAgICAgIkV2ZW50TmFtZSI6ICJDT1JFX1BPV0VSLkxWTDFfVFVSQk9fTElDRU5TRSIs
DQo+ICsgICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjIwMDAwMyIsDQo+ICsgICAgICAg
ICJCcmllZkRlc2NyaXB0aW9uIjogIkNvcmUgY3ljbGVzIHdoZXJlIHRoZSBjb3JlIHdhcyBy
dW5uaW5nIGluIGEgbWFubmVyIHdoZXJlIFR1cmJvIG1heSBiZSBjbGlwcGVkIHRvIHRoZSBB
VlgyIHR1cmJvIHNjaGVkdWxlLiINCj4gKyAgICB9LA0KPiArICAgIHsNCj4gKyAgICAgICAg
IkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAiUHVibGljRGVzY3JpcHRp
b24iOiAiQ29yZSBjeWNsZXMgd2hlcmUgdGhlIGNvcmUgd2FzIHJ1bm5pbmcgd2l0aCBwb3dl
ci1kZWxpdmVyeSBmb3IgbGljZW5zZSBsZXZlbCAyIChpbnRyb2R1Y2VkIGluIFNreWxha2Ug
U2VydmVyIG1pY3JvYXJjaHRlY3R1cmUpLiAgVGhpcyBpbmNsdWRlcyBoaWdoIGN1cnJlbnQg
QVZYIDUxMi1iaXQgaW5zdHJ1Y3Rpb25zLiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAi
MHgyOCIsDQo+ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMiLA0KPiArICAgICAgICAi
VU1hc2siOiAiMHgyMCIsDQo+ICsgICAgICAgICJQRUJTY291bnRlcnMiOiAiMCwxLDIsMyIs
DQo+ICsgICAgICAgICJFdmVudE5hbWUiOiAiQ09SRV9QT1dFUi5MVkwyX1RVUkJPX0xJQ0VO
U0UiLA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIyMDAwMDMiLA0KPiArICAg
ICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJDb3JlIGN5Y2xlcyB3aGVyZSB0aGUgY29yZSB3
YXMgcnVubmluZyBpbiBhIG1hbm5lciB3aGVyZSBUdXJibyBtYXkgYmUgY2xpcHBlZCB0byB0
aGUgQVZYNTEyIHR1cmJvIHNjaGVkdWxlLiINCj4gKyAgICB9LA0KPiArICAgIHsNCj4gKyAg
ICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAiUHVibGljRGVz
Y3JpcHRpb24iOiAiQ291bnRzIHRoZSBudW1iZXIgb2YgUFJFRkVUQ0hOVEEgaW5zdHJ1Y3Rp
b25zIGV4ZWN1dGVkLiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHgzMiIsDQo+ICsg
ICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMiLA0KPiArICAgICAgICAiVU1hc2siOiAiMHgx
IiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzIiwNCj4gKyAgICAgICAg
IkV2ZW50TmFtZSI6ICJTV19QUkVGRVRDSF9BQ0NFU1MuTlRBIiwNCj4gKyAgICAgICAgIlNh
bXBsZUFmdGVyVmFsdWUiOiAiMjAwMDAwMyIsDQo+ICsgICAgICAgICJCcmllZkRlc2NyaXB0
aW9uIjogIk51bWJlciBvZiBQUkVGRVRDSE5UQSBpbnN0cnVjdGlvbnMgZXhlY3V0ZWQuIg0K
PiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAi
MiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJDb3VudHMgdGhlIG51bWJl
ciBvZiBQUkVGRVRDSFQwIGluc3RydWN0aW9ucyBleGVjdXRlZC4iLA0KPiArICAgICAgICAi
RXZlbnRDb2RlIjogIjB4MzIiLA0KPiArICAgICAgICAiQ291bnRlciI6ICIwLDEsMiwzIiwN
Cj4gKyAgICAgICAgIlVNYXNrIjogIjB4MiIsDQo+ICsgICAgICAgICJQRUJTY291bnRlcnMi
OiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJFdmVudE5hbWUiOiAiU1dfUFJFRkVUQ0hfQUND
RVNTLlQwIiwNCj4gKyAgICAgICAgIlNhbXBsZUFmdGVyVmFsdWUiOiAiMjAwMDAwMyIsDQo+
ICsgICAgICAgICJCcmllZkRlc2NyaXB0aW9uIjogIk51bWJlciBvZiBQUkVGRVRDSFQwIGlu
c3RydWN0aW9ucyBleGVjdXRlZC4iDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAg
ICJDb2xsZWN0UEVCU1JlY29yZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0
aW9uIjogIkNvdW50cyB0aGUgbnVtYmVyIG9mIFBSRUZFVENIVDEgb3IgUFJFRkVUQ0hUMiBp
bnN0cnVjdGlvbnMgZXhlY3V0ZWQuIiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIweDMy
IiwNCj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJVTWFz
ayI6ICIweDQiLA0KPiArICAgICAgICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMiLA0KPiAr
ICAgICAgICAiRXZlbnROYW1lIjogIlNXX1BSRUZFVENIX0FDQ0VTUy5UMV9UMiIsDQo+ICsg
ICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjIwMDAwMDMiLA0KPiArICAgICAgICAiQnJp
ZWZEZXNjcmlwdGlvbiI6ICJOdW1iZXIgb2YgUFJFRkVUQ0hUMSBvciBQUkVGRVRDSFQyIGlu
c3RydWN0aW9ucyBleGVjdXRlZC4iDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAg
ICJDb2xsZWN0UEVCU1JlY29yZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0
aW9uIjogIkNvdW50cyB0aGUgbnVtYmVyIG9mIFBSRUZFVENIVyBpbnN0cnVjdGlvbnMgZXhl
Y3V0ZWQuIiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIweDMyIiwNCj4gKyAgICAgICAg
IkNvdW50ZXIiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJVTWFzayI6ICIweDgiLA0KPiAr
ICAgICAgICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMiLA0KPiArICAgICAgICAiRXZlbnRO
YW1lIjogIlNXX1BSRUZFVENIX0FDQ0VTUy5QUkVGRVRDSFciLA0KPiArICAgICAgICAiU2Ft
cGxlQWZ0ZXJWYWx1ZSI6ICIyMDAwMDAzIiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRp
b24iOiAiTnVtYmVyIG9mIFBSRUZFVENIVyBpbnN0cnVjdGlvbnMgZXhlY3V0ZWQuIg0KPiAr
ICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIs
DQo+ICsgICAgICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJDb3VudHMgdGhlIG51bWJlciBv
ZiBhdmFpbGFibGUgc2xvdHMgZm9yIGFuIHVuaGFsdGVkIGxvZ2ljYWwgcHJvY2Vzc29yLiBU
aGUgZXZlbnQgaW5jcmVtZW50cyBieSBtYWNoaW5lLXdpZHRoIG9mIHRoZSBuYXJyb3dlc3Qg
cGlwZWxpbmUgYXMgZW1wbG95ZWQgYnkgdGhlIFRvcC1kb3duIE1pY3JvYXJjaGl0ZWN0dXJl
IEFuYWx5c2lzIG1ldGhvZC4gVGhlIGNvdW50IGlzIGRpc3RyaWJ1dGVkIGFtb25nIHVuaGFs
dGVkIGxvZ2ljYWwgcHJvY2Vzc29ycyAoaHlwZXItdGhyZWFkcykgd2hvIHNoYXJlIHRoZSBz
YW1lIHBoeXNpY2FsIGNvcmUuIiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIweGE0IiwN
Cj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMCwxLDIsMyw0LDUsNiw3IiwNCj4gKyAgICAgICAg
IlVNYXNrIjogIjB4MSIsDQo+ICsgICAgICAgICJQRUJTY291bnRlcnMiOiAiMCwxLDIsMyw0
LDUsNiw3IiwNCj4gKyAgICAgICAgIkV2ZW50TmFtZSI6ICJUT1BET1dOLlNMT1RTX1AiLA0K
PiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIxMDAwMDAwMyIsDQo+ICsgICAgICAg
ICJCcmllZkRlc2NyaXB0aW9uIjogIkNvdW50cyB0aGUgbnVtYmVyIG9mIGF2YWlsYWJsZSBz
bG90cyBmb3IgYW4gdW5oYWx0ZWQgbG9naWNhbCBwcm9jZXNzb3IuIg0KPiArICAgIH0sDQo+
ICsgICAgew0KPiArICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAg
ICAgICJFdmVudENvZGUiOiAiMHhBNCIsDQo+ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwy
LDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJVTWFzayI6ICIweDIiLA0KPiArICAgICAgICAi
UEVCU2NvdW50ZXJzIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJFdmVudE5h
bWUiOiAiVE9QRE9XTi5CQUNLRU5EX0JPVU5EX1NMT1RTIiwNCj4gKyAgICAgICAgIlNhbXBs
ZUFmdGVyVmFsdWUiOiAiMTAwMDAwMDMiLA0KPiArICAgICAgICAiQnJpZWZEZXNjcmlwdGlv
biI6ICJJc3N1ZSBzbG90cyB3aGVyZSBubyB1b3BzIHdlcmUgYmVpbmcgaXNzdWVkIGR1ZSB0
byBsYWNrIG9mIGJhY2sgZW5kIHJlc291cmNlcy4iDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+
ICsgICAgICAgICJDb2xsZWN0UEVCU1JlY29yZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1Ymxp
Y0Rlc2NyaXB0aW9uIjogIkNvdW50cyB0aGUgbnVtYmVyIG9mIG9jY3VycmVuY2VzIHdoZXJl
IGEgbWljcm9jb2RlIGFzc2lzdCBpcyBpbnZva2VkIGJ5IGhhcmR3YXJlIEV4YW1wbGVzIGlu
Y2x1ZGUgQUQgKHBhZ2UgQWNjZXNzIERpcnR5KSwgRlAgYW5kIEFWWCByZWxhdGVkIGFzc2lz
dHMuIiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIweGMxIiwNCj4gKyAgICAgICAgIkNv
dW50ZXIiOiAiMCwxLDIsMyw0LDUsNiw3IiwNCj4gKyAgICAgICAgIlVNYXNrIjogIjB4NyIs
DQo+ICsgICAgICAgICJQRUJTY291bnRlcnMiOiAiMCwxLDIsMyw0LDUsNiw3IiwNCj4gKyAg
ICAgICAgIkV2ZW50TmFtZSI6ICJBU1NJU1RTLkFOWSIsDQo+ICsgICAgICAgICJTYW1wbGVB
ZnRlclZhbHVlIjogIjEwMDAwMyIsDQo+ICsgICAgICAgICJCcmllZkRlc2NyaXB0aW9uIjog
Ik51bWJlciBvZiBvY2N1cnJlbmNlcyB3aGVyZSBhIG1pY3JvY29kZSBhc3Npc3QgaXMgaW52
b2tlZCBieSBoYXJkd2FyZS4iDQo+ICsgICAgfQ0KPiArXQ0KPiBcIE5vIG5ld2xpbmUgYXQg
ZW5kIG9mIGZpbGUNCj4gZGlmZiAtLWdpdCBhL3Rvb2xzL3BlcmYvcG11LWV2ZW50cy9hcmNo
L3g4Ni9pY2VsYWtlL3BpcGVsaW5lLmpzb24gYi90b29scy9wZXJmL3BtdS1ldmVudHMvYXJj
aC94ODYvaWNlbGFrZS9waXBlbGluZS5qc29uDQo+IG5ldyBmaWxlIG1vZGUgMTAwNjQ0DQo+
IGluZGV4IDAwMDAwMDAwMDAwMC4uNmQ4MzExZTYzNGFhDQo+IC0tLSAvZGV2L251bGwNCj4g
KysrIGIvdG9vbHMvcGVyZi9wbXUtZXZlbnRzL2FyY2gveDg2L2ljZWxha2UvcGlwZWxpbmUu
anNvbg0KPiBAQCAtMCwwICsxLDg5MiBAQA0KPiArWw0KPiArICAgIHsNCj4gKyAgICAgICAg
IkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAiUHVibGljRGVzY3JpcHRp
b24iOiAiQ291bnRzIHRoZSBudW1iZXIgb2YgWDg2IGluc3RydWN0aW9ucyByZXRpcmVkIC0g
YW4gQXJjaGl0ZWN0dXJhbCBQZXJmTW9uIGV2ZW50LiBDb3VudGluZyBjb250aW51ZXMgZHVy
aW5nIGhhcmR3YXJlIGludGVycnVwdHMsIHRyYXBzLCBhbmQgaW5zaWRlIGludGVycnVwdCBo
YW5kbGVycy4gTm90ZXM6IElOU1RfUkVUSVJFRC5BTlkgaXMgY291bnRlZCBieSBhIGRlc2ln
bmF0ZWQgZml4ZWQgY291bnRlciBmcmVlaW5nIHVwIHByb2dyYW1tYWJsZSBjb3VudGVycyB0
byBjb3VudCBvdGhlciBldmVudHMuIElOU1RfUkVUSVJFRC5BTllfUCBpcyBjb3VudGVkIGJ5
IGEgcHJvZ3JhbW1hYmxlIGNvdW50ZXIuIiwNCj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMzIi
LA0KPiArICAgICAgICAiVU1hc2siOiAiMHgxIiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVy
cyI6ICIzMiIsDQo+ICsgICAgICAgICJFdmVudE5hbWUiOiAiSU5TVF9SRVRJUkVELkFOWSIs
DQo+ICsgICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjIwMDAwMDMiLA0KPiArICAgICAg
ICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJOdW1iZXIgb2YgaW5zdHJ1Y3Rpb25zIHJldGlyZWQu
IEZpeGVkIENvdW50ZXIgLSBhcmNoaXRlY3R1cmFsIGV2ZW50Ig0KPiArICAgIH0sDQo+ICsg
ICAgew0KPiArICAgICAgICAiUEVCUyI6ICIyIiwNCj4gKyAgICAgICAgIkNvbGxlY3RQRUJT
UmVjb3JkIjogIjMiLA0KPiArICAgICAgICAiUHVibGljRGVzY3JpcHRpb24iOiAiQSB2ZXJz
aW9uIG9mIElOU1RfUkVUSVJFRCB0aGF0IGFsbG93cyBmb3IgYSBtb3JlIHVuYmlhc2VkIGRp
c3RyaWJ1dGlvbiBvZiBzYW1wbGVzIGFjcm9zcyBpbnN0cnVjdGlvbnMgcmV0aXJlZC4gSXQg
dXRpbGl6ZXMgdGhlIFByZWNpc2UgRGlzdHJpYnV0aW9uIG9mIEluc3RydWN0aW9ucyBSZXRp
cmVkIChQRElSKSBmZWF0dXJlIHRvIG1pdGlnYXRlIHNvbWUgYmlhcyBpbiBob3cgcmV0aXJl
ZCBpbnN0cnVjdGlvbnMgZ2V0IHNhbXBsZWQuIFVzZSBvbiBGaXhlZCBDb3VudGVyIDAuIiwN
Cj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMzIiLA0KPiArICAgICAgICAiVU1hc2siOiAiMHgx
IiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIzMiIsDQo+ICsgICAgICAgICJFdmVu
dE5hbWUiOiAiSU5TVF9SRVRJUkVELlBSRUNfRElTVCIsDQo+ICsgICAgICAgICJTYW1wbGVB
ZnRlclZhbHVlIjogIjIwMDAwMDMiLA0KPiArICAgICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6
ICJQcmVjaXNlIGluc3RydWN0aW9uIHJldGlyZWQgZXZlbnQgd2l0aCBhIHJlZHVjZWQgZWZm
ZWN0IG9mIFBFQlMgc2hhZG93IGluIElQIGRpc3RyaWJ1dGlvbiINCj4gKyAgICB9LA0KPiAr
ICAgIHsNCj4gKyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAg
ICAiUHVibGljRGVzY3JpcHRpb24iOiAiQ291bnRzIHRoZSBudW1iZXIgb2YgY29yZSBjeWNs
ZXMgd2hpbGUgdGhlIHRocmVhZCBpcyBub3QgaW4gYSBoYWx0IHN0YXRlLiBUaGUgdGhyZWFk
IGVudGVycyB0aGUgaGFsdCBzdGF0ZSB3aGVuIGl0IGlzIHJ1bm5pbmcgdGhlIEhMVCBpbnN0
cnVjdGlvbi4gVGhpcyBldmVudCBpcyBhIGNvbXBvbmVudCBpbiBtYW55IGtleSBldmVudCBy
YXRpb3MuIFRoZSBjb3JlIGZyZXF1ZW5jeSBtYXkgY2hhbmdlIGZyb20gdGltZSB0byB0aW1l
IGR1ZSB0byB0cmFuc2l0aW9ucyBhc3NvY2lhdGVkIHdpdGggRW5oYW5jZWQgSW50ZWwgU3Bl
ZWRTdGVwIFRlY2hub2xvZ3kgb3IgVE0yLiBGb3IgdGhpcyByZWFzb24gdGhpcyBldmVudCBt
YXkgaGF2ZSBhIGNoYW5naW5nIHJhdGlvIHdpdGggcmVnYXJkcyB0byB0aW1lLiBXaGVuIHRo
ZSBjb3JlIGZyZXF1ZW5jeSBpcyBjb25zdGFudCwgdGhpcyBldmVudCBjYW4gYXBwcm94aW1h
dGUgZWxhcHNlZCB0aW1lIHdoaWxlIHRoZSBjb3JlIHdhcyBub3QgaW4gdGhlIGhhbHQgc3Rh
dGUuIEl0IGlzIGNvdW50ZWQgb24gYSBkZWRpY2F0ZWQgZml4ZWQgY291bnRlciwgbGVhdmlu
ZyB0aGUgZm91ciAoZWlnaHQgd2hlbiBIeXBlcnRocmVhZGluZyBpcyBkaXNhYmxlZCkgcHJv
Z3JhbW1hYmxlIGNvdW50ZXJzIGF2YWlsYWJsZSBmb3Igb3RoZXIgZXZlbnRzLiIsDQo+ICsg
ICAgICAgICJDb3VudGVyIjogIjMzIiwNCj4gKyAgICAgICAgIlVNYXNrIjogIjB4MiIsDQo+
ICsgICAgICAgICJQRUJTY291bnRlcnMiOiAiMzMiLA0KPiArICAgICAgICAiRXZlbnROYW1l
IjogIkNQVV9DTEtfVU5IQUxURUQuVEhSRUFEIiwNCj4gKyAgICAgICAgIlNhbXBsZUFmdGVy
VmFsdWUiOiAiMjAwMDAwMyIsDQo+ICsgICAgICAgICJCcmllZkRlc2NyaXB0aW9uIjogIkNv
cmUgY3ljbGVzIHdoZW4gdGhlIHRocmVhZCBpcyBub3QgaW4gaGFsdCBzdGF0ZSINCj4gKyAg
ICB9LA0KPiArICAgIHsNCj4gKyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0K
PiArICAgICAgICAiUHVibGljRGVzY3JpcHRpb24iOiAiQ291bnRzIHRoZSBudW1iZXIgb2Yg
cmVmZXJlbmNlIGN5Y2xlcyB3aGVuIHRoZSBjb3JlIGlzIG5vdCBpbiBhIGhhbHQgc3RhdGUu
IFRoZSBjb3JlIGVudGVycyB0aGUgaGFsdCBzdGF0ZSB3aGVuIGl0IGlzIHJ1bm5pbmcgdGhl
IEhMVCBpbnN0cnVjdGlvbiBvciB0aGUgTVdBSVQgaW5zdHJ1Y3Rpb24uIFRoaXMgZXZlbnQg
aXMgbm90IGFmZmVjdGVkIGJ5IGNvcmUgZnJlcXVlbmN5IGNoYW5nZXMgKGZvciBleGFtcGxl
LCBQIHN0YXRlcywgVE0yIHRyYW5zaXRpb25zKSBidXQgaGFzIHRoZSBzYW1lIGluY3JlbWVu
dGluZyBmcmVxdWVuY3kgYXMgdGhlIHRpbWUgc3RhbXAgY291bnRlci4gVGhpcyBldmVudCBj
YW4gYXBwcm94aW1hdGUgZWxhcHNlZCB0aW1lIHdoaWxlIHRoZSBjb3JlIHdhcyBub3QgaW4g
YSBoYWx0IHN0YXRlLiBUaGlzIGV2ZW50IGhhcyBhIGNvbnN0YW50IHJhdGlvIHdpdGggdGhl
IENQVV9DTEtfVU5IQUxURUQuUkVGX1hDTEsgZXZlbnQuIEl0IGlzIGNvdW50ZWQgb24gYSBk
ZWRpY2F0ZWQgZml4ZWQgY291bnRlciwgbGVhdmluZyB0aGUgZm91ciAoZWlnaHQgd2hlbiBI
eXBlcnRocmVhZGluZyBpcyBkaXNhYmxlZCkgcHJvZ3JhbW1hYmxlIGNvdW50ZXJzIGF2YWls
YWJsZSBmb3Igb3RoZXIgZXZlbnRzLiBOb3RlOiBPbiBhbGwgY3VycmVudCBwbGF0Zm9ybXMg
dGhpcyBldmVudCBzdG9wcyBjb3VudGluZyBkdXJpbmcgJ3Rocm90dGxpbmcgKFRNKScgc3Rh
dGVzIGR1dHkgb2ZmIHBlcmlvZHMgdGhlIHByb2Nlc3NvciBpcyAnaGFsdGVkJy4gIFRoZSBj
b3VudGVyIHVwZGF0ZSBpcyBkb25lIGF0IGEgbG93ZXIgY2xvY2sgcmF0ZSB0aGVuIHRoZSBj
b3JlIGNsb2NrIHRoZSBvdmVyZmxvdyBzdGF0dXMgYml0IGZvciB0aGlzIGNvdW50ZXIgbWF5
IGFwcGVhciAnc3RpY2t5Jy4gIEFmdGVyIHRoZSBjb3VudGVyIGhhcyBvdmVyZmxvd2VkIGFu
ZCBzb2Z0d2FyZSBjbGVhcnMgdGhlIG92ZXJmbG93IHN0YXR1cyBiaXQgYW5kIHJlc2V0cyB0
aGUgY291bnRlciB0byBsZXNzIHRoYW4gTUFYLiBUaGUgcmVzZXQgdmFsdWUgdG8gdGhlIGNv
dW50ZXIgaXMgbm90IGNsb2NrZWQgaW1tZWRpYXRlbHkgc28gdGhlIG92ZXJmbG93IHN0YXR1
cyBiaXQgd2lsbCBmbGlwICdoaWdoICgxKScgYW5kIGdlbmVyYXRlIGFub3RoZXIgUE1JIChp
ZiBlbmFibGVkKSBhZnRlciB3aGljaCB0aGUgcmVzZXQgdmFsdWUgZ2V0cyBjbG9ja2VkIGlu
dG8gdGhlIGNvdW50ZXIuIFRoZXJlZm9yZSwgc29mdHdhcmUgd2lsbCBnZXQgdGhlIGludGVy
cnVwdCwgcmVhZCB0aGUgb3ZlcmZsb3cgc3RhdHVzIGJpdCAnMSBmb3IgYml0IDM0IHdoaWxl
IHRoZSBjb3VudGVyIHZhbHVlIGlzIGxlc3MgdGhhbiBNQVguIFNvZnR3YXJlIHNob3VsZCBp
Z25vcmUgdGhpcyBjYXNlLiIsDQo+ICsgICAgICAgICJDb3VudGVyIjogIjM0IiwNCj4gKyAg
ICAgICAgIlVNYXNrIjogIjB4MyIsDQo+ICsgICAgICAgICJQRUJTY291bnRlcnMiOiAiMzQi
LA0KPiArICAgICAgICAiRXZlbnROYW1lIjogIkNQVV9DTEtfVU5IQUxURUQuUkVGX1RTQyIs
DQo+ICsgICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjIwMDAwMDMiLA0KPiArICAgICAg
ICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJSZWZlcmVuY2UgY3ljbGVzIHdoZW4gdGhlIGNvcmUg
aXMgbm90IGluIGhhbHQgc3RhdGUuIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAg
ICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNjcmlw
dGlvbiI6ICJDb3VudHMgdGhlIG51bWJlciBvZiB0aW1lcyB0aGUgbG9hZCBvcGVyYXRpb24g
Z290IHRoZSB0cnVlIEJsb2NrLW9uLVN0b3JlIGJsb2NraW5nIGNvZGUgcHJldmVudGluZyBz
dG9yZSBmb3J3YXJkaW5nLiBUaGlzIGluY2x1ZGVzIGNhc2VzIHdoZW46IGEuIHByZWNlZGlu
ZyBzdG9yZSBjb25mbGljdHMgd2l0aCB0aGUgbG9hZCAoaW5jb21wbGV0ZSBvdmVybGFwKSxi
LiBzdG9yZSBmb3J3YXJkaW5nIGlzIGltcG9zc2libGUgZHVlIHRvIHUtYXJjaCBsaW1pdGF0
aW9ucywgYy4gcHJlY2VkaW5nIGxvY2sgUk1XIG9wZXJhdGlvbnMgYXJlIG5vdCBmb3J3YXJk
ZWQsIGQuIHN0b3JlIGhhcyB0aGUgbm8tZm9yd2FyZCBiaXQgc2V0ICh1bmNhY2hlYWJsZS9w
YWdlLXNwbGl0L21hc2tlZCBzdG9yZXMpLCBlLiBhbGwtYmxvY2tpbmcgc3RvcmVzIGFyZSB1
c2VkIChtb3N0bHksIGZlbmNlcyBhbmQgcG9ydCBJL08pLCBhbmQgb3RoZXJzLiBUaGUgbW9z
dCBjb21tb24gY2FzZSBpcyBhIGxvYWQgYmxvY2tlZCBkdWUgdG8gaXRzIGFkZHJlc3MgcmFu
Z2Ugb3ZlcmxhcHBpbmcgd2l0aCBhIHByZWNlZGluZyBzbWFsbGVyIHVuY29tcGxldGVkIHN0
b3JlLiBOb3RlOiBUaGlzIGV2ZW50IGRvZXMgbm90IHRha2UgaW50byBhY2NvdW50IGNhc2Vz
IG9mIG91dC1vZi1TVy1jb250cm9sIChmb3IgZXhhbXBsZSwgU2JUYWlsSGl0KSwgdW5rbm93
biBwaHlzaWNhbCBTVEEsIGFuZCBjYXNlcyBvZiBibG9ja2luZyBsb2FkcyBvbiBzdG9yZSBk
dWUgdG8gYmVpbmcgbm9uLVdCIG1lbW9yeSB0eXBlIG9yIGEgbG9jay4gVGhlc2UgY2FzZXMg
YXJlIGNvdmVyZWQgYnkgb3RoZXIgZXZlbnRzLiBTZWUgdGhlIHRhYmxlIG9mIG5vdCBzdXBw
b3J0ZWQgc3RvcmUgZm9yd2FyZHMgaW4gdGhlIE9wdGltaXphdGlvbiBHdWlkZS4iLA0KPiAr
ICAgICAgICAiRXZlbnRDb2RlIjogIjB4MDMiLA0KPiArICAgICAgICAiQ291bnRlciI6ICIw
LDEsMiwzIiwNCj4gKyAgICAgICAgIlVNYXNrIjogIjB4MiIsDQo+ICsgICAgICAgICJQRUJT
Y291bnRlcnMiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJFdmVudE5hbWUiOiAiTERfQkxP
Q0tTLlNUT1JFX0ZPUldBUkQiLA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIx
MDAwMDMiLA0KPiArICAgICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJMb2FkcyBibG9ja2Vk
IGJ5IG92ZXJsYXBwaW5nIHdpdGggc3RvcmUgYnVmZmVyIHRoYXQgY2Fubm90IGJlIGZvcndh
cmRlZC4iDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJDb2xsZWN0UEVCU1Jl
Y29yZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9uIjogIkNvdW50cyB0
aGUgbnVtYmVyIG9mIHRpbWVzIHRoYXQgc3BsaXQgbG9hZCBvcGVyYXRpb25zIGFyZSB0ZW1w
b3JhcmlseSBibG9ja2VkIGJlY2F1c2UgYWxsIHJlc291cmNlcyBmb3IgaGFuZGxpbmcgdGhl
IHNwbGl0IGFjY2Vzc2VzIGFyZSBpbiB1c2UuIiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6
ICIweDAzIiwNCj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAg
ICJVTWFzayI6ICIweDgiLA0KPiArICAgICAgICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMi
LA0KPiArICAgICAgICAiRXZlbnROYW1lIjogIkxEX0JMT0NLUy5OT19TUiIsDQo+ICsgICAg
ICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjEwMDAwMyIsDQo+ICsgICAgICAgICJCcmllZkRl
c2NyaXB0aW9uIjogIlRoZSBudW1iZXIgb2YgdGltZXMgdGhhdCBzcGxpdCBsb2FkIG9wZXJh
dGlvbnMgYXJlIHRlbXBvcmFyaWx5IGJsb2NrZWQgYmVjYXVzZSBhbGwgcmVzb3VyY2VzIGZv
ciBoYW5kbGluZyB0aGUgc3BsaXQgYWNjZXNzZXMgYXJlIGluIHVzZS4iDQo+ICsgICAgfSwN
Cj4gKyAgICB7DQo+ICsgICAgICAgICJDb2xsZWN0UEVCU1JlY29yZCI6ICIyIiwNCj4gKyAg
ICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9uIjogIkNvdW50cyB0aGUgbnVtYmVyIG9mIHRpbWVz
IGEgbG9hZCBnb3QgYmxvY2tlZCBkdWUgdG8gZmFsc2UgZGVwZW5kZW5jaWVzIGluIE1PQiBk
dWUgdG8gcGFydGlhbCBjb21wYXJlIG9uIGFkZHJlc3MuIiwNCj4gKyAgICAgICAgIkV2ZW50
Q29kZSI6ICIweDA3IiwNCj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMCwxLDIsMyIsDQo+ICsg
ICAgICAgICJVTWFzayI6ICIweDEiLA0KPiArICAgICAgICAiUEVCU2NvdW50ZXJzIjogIjAs
MSwyLDMiLA0KPiArICAgICAgICAiRXZlbnROYW1lIjogIkxEX0JMT0NLU19QQVJUSUFMLkFE
RFJFU1NfQUxJQVMiLA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIxMDAwMDMi
LA0KPiArICAgICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJGYWxzZSBkZXBlbmRlbmNpZXMg
aW4gTU9CIGR1ZSB0byBwYXJ0aWFsIGNvbXBhcmUgb24gYWRkcmVzcy4iDQo+ICsgICAgfSwN
Cj4gKyAgICB7DQo+ICsgICAgICAgICJDb2xsZWN0UEVCU1JlY29yZCI6ICIyIiwNCj4gKyAg
ICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9uIjogIkNvdW50cyBjb3JlIGN5Y2xlcyB3aGVuIHRo
ZSBSZXNvdXJjZSBhbGxvY2F0b3Igd2FzIHN0YWxsZWQgZHVlIHRvIHJlY292ZXJ5IGZyb20g
YW4gZWFybGllciBicmFuY2ggbWlzcHJlZGljdGlvbiBvciBtYWNoaW5lIGNsZWFyIGV2ZW50
LiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHgwRCIsDQo+ICsgICAgICAgICJDb3Vu
dGVyIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJVTWFzayI6ICIweDEiLA0K
PiArICAgICAgICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAg
ICAgICJFdmVudE5hbWUiOiAiSU5UX01JU0MuUkVDT1ZFUllfQ1lDTEVTIiwNCj4gKyAgICAg
ICAgIlNhbXBsZUFmdGVyVmFsdWUiOiAiMjAwMDAwMyIsDQo+ICsgICAgICAgICJCcmllZkRl
c2NyaXB0aW9uIjogIkNvcmUgY3ljbGVzIHRoZSBhbGxvY2F0b3Igd2FzIHN0YWxsZWQgZHVl
IHRvIHJlY292ZXJ5IGZyb20gZWFybGllciBjbGVhciBldmVudCBmb3IgdGhpcyB0aHJlYWQi
DQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJDb2xsZWN0UEVCU1JlY29yZCI6
ICIyIiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9uIjogIkNvdW50cyBjeWNsZXMg
dGhlIEJhY2tlbmQgY2x1c3RlciBpcyByZWNvdmVyaW5nIGFmdGVyIGEgbWlzcy1zcGVjdWxh
dGlvbiBvciBhIFN0b3JlIEJ1ZmZlciBvciBMb2FkIEJ1ZmZlciBkcmFpbiBzdGFsbC4iLA0K
PiArICAgICAgICAiRXZlbnRDb2RlIjogIjB4MEQiLA0KPiArICAgICAgICAiQ291bnRlciI6
ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAgICAiVU1hc2siOiAiMHgzIiwNCj4gKyAg
ICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAgICAi
RXZlbnROYW1lIjogIklOVF9NSVNDLkFMTF9SRUNPVkVSWV9DWUNMRVMiLA0KPiArICAgICAg
ICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIyMDAwMDAzIiwNCj4gKyAgICAgICAgIkJyaWVmRGVz
Y3JpcHRpb24iOiAiQ3ljbGVzIHRoZSBCYWNrZW5kIGNsdXN0ZXIgaXMgcmVjb3ZlcmluZyBh
ZnRlciBhIG1pc3Mtc3BlY3VsYXRpb24gb3IgYSBTdG9yZSBCdWZmZXIgb3IgTG9hZCBCdWZm
ZXIgZHJhaW4gc3RhbGwuIiwNCj4gKyAgICAgICAgIkNvdW50ZXJNYXNrIjogIjEiDQo+ICsg
ICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJDb2xsZWN0UEVCU1JlY29yZCI6ICIyIiwN
Cj4gKyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9uIjogIkN5Y2xlcyBhZnRlciByZWNvdmVy
eSBmcm9tIGEgYnJhbmNoIG1pc3ByZWRpY3Rpb24gb3IgbWFjaGluZSBjbGVhciB0aWxsIHRo
ZSBmaXJzdCB1b3AgaXMgaXNzdWVkIGZyb20gdGhlIHJlc3RlZXJlZCBwYXRoLiIsDQo+ICsg
ICAgICAgICJFdmVudENvZGUiOiAiMHgwZCIsDQo+ICsgICAgICAgICJDb3VudGVyIjogIjAs
MSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJVTWFzayI6ICIweDgwIiwNCj4gKyAgICAg
ICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAgICAiRXZl
bnROYW1lIjogIklOVF9NSVNDLkNMRUFSX1JFU1RFRVJfQ1lDTEVTIiwNCj4gKyAgICAgICAg
IlNhbXBsZUFmdGVyVmFsdWUiOiAiMjAwMDAwMyIsDQo+ICsgICAgICAgICJCcmllZkRlc2Ny
aXB0aW9uIjogIkNvdW50cyBjeWNsZXMgYWZ0ZXIgcmVjb3ZlcnkgZnJvbSBhIGJyYW5jaCBt
aXNwcmVkaWN0aW9uIG9yIG1hY2hpbmUgY2xlYXIgdGlsbCB0aGUgZmlyc3QgdW9wIGlzIGlz
c3VlZCBmcm9tIHRoZSByZXN0ZWVyZWQgcGF0aC4iDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+
ICsgICAgICAgICJDb2xsZWN0UEVCU1JlY29yZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1Ymxp
Y0Rlc2NyaXB0aW9uIjogIkNvdW50cyB0aGUgbnVtYmVyIG9mIHVvcHMgdGhhdCB0aGUgUmVz
b3VyY2UgQWxsb2NhdGlvbiBUYWJsZSAoUkFUKSBpc3N1ZXMgdG8gdGhlIFJlc2VydmF0aW9u
IFN0YXRpb24gKFJTKS4iLA0KPiArICAgICAgICAiRXZlbnRDb2RlIjogIjB4MEUiLA0KPiAr
ICAgICAgICAiQ291bnRlciI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAgICAiVU1h
c2siOiAiMHgxIiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzLDQsNSw2
LDciLA0KPiArICAgICAgICAiRXZlbnROYW1lIjogIlVPUFNfSVNTVUVELkFOWSIsDQo+ICsg
ICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjIwMDAwMDMiLA0KPiArICAgICAgICAiQnJp
ZWZEZXNjcmlwdGlvbiI6ICJVb3BzIHRoYXQgUkFUIGlzc3VlcyB0byBSUyINCj4gKyAgICB9
LA0KPiArICAgIHsNCj4gKyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiAr
ICAgICAgICAiUHVibGljRGVzY3JpcHRpb24iOiAiQ291bnRzIGN5Y2xlcyBkdXJpbmcgd2hp
Y2ggdGhlIFJlc291cmNlIEFsbG9jYXRpb24gVGFibGUgKFJBVCkgZG9lcyBub3QgaXNzdWUg
YW55IFVvcHMgdG8gdGhlIHJlc2VydmF0aW9uIHN0YXRpb24gKFJTKSBmb3IgdGhlIGN1cnJl
bnQgdGhyZWFkLiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHgwRSIsDQo+ICsgICAg
ICAgICJJbnZlcnQiOiAiMSIsDQo+ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMsNCw1
LDYsNyIsDQo+ICsgICAgICAgICJVTWFzayI6ICIweDEiLA0KPiArICAgICAgICAiUEVCU2Nv
dW50ZXJzIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJFdmVudE5hbWUiOiAi
VU9QU19JU1NVRUQuU1RBTExfQ1lDTEVTIiwNCj4gKyAgICAgICAgIlNhbXBsZUFmdGVyVmFs
dWUiOiAiMjAwMDAwMyIsDQo+ICsgICAgICAgICJCcmllZkRlc2NyaXB0aW9uIjogIkN5Y2xl
cyB3aGVuIFJBVCBkb2VzIG5vdCBpc3N1ZSBVb3BzIHRvIFJTIGZvciB0aGUgdGhyZWFkIiwN
Cj4gKyAgICAgICAgIkNvdW50ZXJNYXNrIjogIjEiDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+
ICsgICAgICAgICJDb2xsZWN0UEVCU1JlY29yZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1Ymxp
Y0Rlc2NyaXB0aW9uIjogIkNvdW50cyBjeWNsZXMgd2hlbiBkaXZpZGUgdW5pdCBpcyBidXN5
IGV4ZWN1dGluZyBkaXZpZGUgb3Igc3F1YXJlIHJvb3Qgb3BlcmF0aW9ucy4gQWNjb3VudHMg
Zm9yIGludGVnZXIgYW5kIGZsb2F0aW5nLXBvaW50IG9wZXJhdGlvbnMuIiwNCj4gKyAgICAg
ICAgIkV2ZW50Q29kZSI6ICIweDE0IiwNCj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMCwxLDIs
Myw0LDUsNiw3IiwNCj4gKyAgICAgICAgIlVNYXNrIjogIjB4OSIsDQo+ICsgICAgICAgICJQ
RUJTY291bnRlcnMiOiAiMCwxLDIsMyw0LDUsNiw3IiwNCj4gKyAgICAgICAgIkV2ZW50TmFt
ZSI6ICJBUklUSC5ESVZJREVSX0FDVElWRSIsDQo+ICsgICAgICAgICJTYW1wbGVBZnRlclZh
bHVlIjogIjIwMDAwMDMiLA0KPiArICAgICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJDeWNs
ZXMgd2hlbiBkaXZpZGUgdW5pdCBpcyBidXN5IGV4ZWN1dGluZyBkaXZpZGUgb3Igc3F1YXJl
IHJvb3Qgb3BlcmF0aW9ucy4iLA0KPiArICAgICAgICAiQ291bnRlck1hc2siOiAiMSINCj4g
KyAgICB9LA0KPiArICAgIHsNCj4gKyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIi
LA0KPiArICAgICAgICAiUHVibGljRGVzY3JpcHRpb24iOiAiVGhpcyBpcyBhbiBhcmNoaXRl
Y3R1cmFsIGV2ZW50IHRoYXQgY291bnRzIHRoZSBudW1iZXIgb2YgdGhyZWFkIGN5Y2xlcyB3
aGlsZSB0aGUgdGhyZWFkIGlzIG5vdCBpbiBhIGhhbHQgc3RhdGUuIFRoZSB0aHJlYWQgZW50
ZXJzIHRoZSBoYWx0IHN0YXRlIHdoZW4gaXQgaXMgcnVubmluZyB0aGUgSExUIGluc3RydWN0
aW9uLiBUaGUgY29yZSBmcmVxdWVuY3kgbWF5IGNoYW5nZSBmcm9tIHRpbWUgdG8gdGltZSBk
dWUgdG8gcG93ZXIgb3IgdGhlcm1hbCB0aHJvdHRsaW5nLiBGb3IgdGhpcyByZWFzb24sIHRo
aXMgZXZlbnQgbWF5IGhhdmUgYSBjaGFuZ2luZyByYXRpbyB3aXRoIHJlZ2FyZHMgdG8gd2Fs
bCBjbG9jayB0aW1lLiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHgzQyIsDQo+ICsg
ICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJQRUJT
Y291bnRlcnMiOiAiMCwxLDIsMyw0LDUsNiw3IiwNCj4gKyAgICAgICAgIkV2ZW50TmFtZSI6
ICJDUFVfQ0xLX1VOSEFMVEVELlRIUkVBRF9QIiwNCj4gKyAgICAgICAgIlNhbXBsZUFmdGVy
VmFsdWUiOiAiMjAwMDAwMyIsDQo+ICsgICAgICAgICJCcmllZkRlc2NyaXB0aW9uIjogIlRo
cmVhZCBjeWNsZXMgd2hlbiB0aHJlYWQgaXMgbm90IGluIGhhbHQgc3RhdGUiDQo+ICsgICAg
fSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJDb2xsZWN0UEVCU1JlY29yZCI6ICIyIiwNCj4g
KyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9uIjogIkNvdW50cyBjb3JlIGNyeXN0YWwgY2xv
Y2sgY3ljbGVzIHdoZW4gdGhlIHRocmVhZCBpcyB1bmhhbHRlZC4iLA0KPiArICAgICAgICAi
RXZlbnRDb2RlIjogIjB4M0MiLA0KPiArICAgICAgICAiQ291bnRlciI6ICIwLDEsMiwzLDQs
NSw2LDciLA0KPiArICAgICAgICAiVU1hc2siOiAiMHgxIiwNCj4gKyAgICAgICAgIlBFQlNj
b3VudGVycyI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAgICAiRXZlbnROYW1lIjog
IkNQVV9DTEtfVU5IQUxURUQuUkVGX1hDTEsiLA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJW
YWx1ZSI6ICIyNTAwMyIsDQo+ICsgICAgICAgICJCcmllZkRlc2NyaXB0aW9uIjogIkNvcmUg
Y3J5c3RhbCBjbG9jayBjeWNsZXMgd2hlbiB0aGUgdGhyZWFkIGlzIHVuaGFsdGVkLiINCj4g
KyAgICB9LA0KPiArICAgIHsNCj4gKyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIi
LA0KPiArICAgICAgICAiUHVibGljRGVzY3JpcHRpb24iOiAiQ291bnRzIENvcmUgY3J5c3Rh
bCBjbG9jayBjeWNsZXMgd2hlbiBjdXJyZW50IHRocmVhZCBpcyB1bmhhbHRlZCBhbmQgdGhl
IG90aGVyIHRocmVhZCBpcyBoYWx0ZWQuIiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIw
eDNDIiwNCj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMCwxLDIsMyw0LDUsNiw3IiwNCj4gKyAg
ICAgICAgIlVNYXNrIjogIjB4MiIsDQo+ICsgICAgICAgICJQRUJTY291bnRlcnMiOiAiMCwx
LDIsMyw0LDUsNiw3IiwNCj4gKyAgICAgICAgIkV2ZW50TmFtZSI6ICJDUFVfQ0xLX1VOSEFM
VEVELk9ORV9USFJFQURfQUNUSVZFIiwNCj4gKyAgICAgICAgIlNhbXBsZUFmdGVyVmFsdWUi
OiAiMjUwMDMiLA0KPiArICAgICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJDb3JlIGNyeXN0
YWwgY2xvY2sgY3ljbGVzIHdoZW4gdGhpcyB0aHJlYWQgaXMgdW5oYWx0ZWQgYW5kIHRoZSBv
dGhlciB0aHJlYWQgaXMgaGFsdGVkLiINCj4gKyAgICB9LA0KPiArICAgIHsNCj4gKyAgICAg
ICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAiUHVibGljRGVzY3Jp
cHRpb24iOiAiQ291bnRzIGFsbCBub3Qgc29mdHdhcmUtcHJlZmV0Y2ggbG9hZCBkaXNwYXRj
aGVzIHRoYXQgaGl0IHRoZSBmaWxsIGJ1ZmZlciAoRkIpIGFsbG9jYXRlZCBmb3IgdGhlIHNv
ZnR3YXJlIHByZWZldGNoLiBJdCBjYW4gYWxzbyBiZSBpbmNyZW1lbnRlZCBieSBzb21lIGxv
Y2sgaW5zdHJ1Y3Rpb25zLiBTbyBpdCBzaG91bGQgb25seSBiZSB1c2VkIHdpdGggcHJvZmls
aW5nIHNvIHRoYXQgdGhlIGxvY2tzIGNhbiBiZSBleGNsdWRlZCBieSBBU00gKEFzc2VtYmx5
IEZpbGUpIGluc3BlY3Rpb24gb2YgdGhlIG5lYXJieSBpbnN0cnVjdGlvbnMuIiwNCj4gKyAg
ICAgICAgIkV2ZW50Q29kZSI6ICIweDRjIiwNCj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMCwx
LDIsMyIsDQo+ICsgICAgICAgICJVTWFzayI6ICIweDEiLA0KPiArICAgICAgICAiUEVCU2Nv
dW50ZXJzIjogIjAsMSwyLDMiLA0KPiArICAgICAgICAiRXZlbnROYW1lIjogIkxPQURfSElU
X1BSRUZFVENILlNXUEYiLA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIxMDAw
MDMiLA0KPiArICAgICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJDb3VudHMgdGhlIG51bWJl
ciBvZiBkZW1hbmQgbG9hZCBkaXNwYXRjaGVzIHRoYXQgaGl0IEwxRCBmaWxsIGJ1ZmZlciAo
RkIpIGFsbG9jYXRlZCBmb3Igc29mdHdhcmUgcHJlZmV0Y2guIg0KPiArICAgIH0sDQo+ICsg
ICAgew0KPiArICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAg
ICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJDb3VudHMgY3ljbGVzIGR1cmluZyB3aGljaCB0aGUg
cmVzZXJ2YXRpb24gc3RhdGlvbiAoUlMpIGlzIGVtcHR5IGZvciB0aGlzIGxvZ2ljYWwgcHJv
Y2Vzc29yLiBUaGlzIGlzIHVzdWFsbHkgY2F1c2VkIHdoZW4gdGhlIGZyb250LWVuZCBwaXBl
bGluZSBydW5zIGludG8gc3RyYXZhdGlvbiBwZXJpb2RzIChlLmcuIGJyYW5jaCBtaXNwcmVk
aWN0aW9ucyBvciBpLWNhY2hlIG1pc3NlcykiLA0KPiArICAgICAgICAiRXZlbnRDb2RlIjog
IjB4NUUiLA0KPiArICAgICAgICAiQ291bnRlciI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiAr
ICAgICAgICAiVU1hc2siOiAiMHgxIiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIw
LDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAgICAiRXZlbnROYW1lIjogIlJTX0VWRU5UUy5F
TVBUWV9DWUNMRVMiLA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIyMDAwMDAz
IiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiQ3ljbGVzIHdoZW4gUmVzZXJ2
YXRpb24gU3RhdGlvbiAoUlMpIGlzIGVtcHR5IGZvciB0aGUgdGhyZWFkIg0KPiArICAgIH0s
DQo+ICsgICAgew0KPiArICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsg
ICAgICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJDb3VudHMgZW5kIG9mIHBlcmlvZHMgd2hl
cmUgdGhlIFJlc2VydmF0aW9uIFN0YXRpb24gKFJTKSB3YXMgZW1wdHkuIENvdWxkIGJlIHVz
ZWZ1bCB0byBjbG9zZWx5IHNhbXBsZSBvbiBmcm9udC1lbmQgbGF0ZW5jeSBpc3N1ZXMgKHNl
ZSB0aGUgRlJPTlRFTkRfUkVUSVJFRCBldmVudCBvZiBkZXNpZ25hdGVkIHByZWNpc2UgZXZl
bnRzKSIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHg1RSIsDQo+ICsgICAgICAgICJJ
bnZlcnQiOiAiMSIsDQo+ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMsNCw1LDYsNyIs
DQo+ICsgICAgICAgICJVTWFzayI6ICIweDEiLA0KPiArICAgICAgICAiUEVCU2NvdW50ZXJz
IjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJFdmVudE5hbWUiOiAiUlNfRVZF
TlRTLkVNUFRZX0VORCIsDQo+ICsgICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjIwMDAw
MDMiLA0KPiArICAgICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJDb3VudHMgZW5kIG9mIHBl
cmlvZHMgd2hlcmUgdGhlIFJlc2VydmF0aW9uIFN0YXRpb24gKFJTKSB3YXMgZW1wdHkuIiwN
Cj4gKyAgICAgICAgIkNvdW50ZXJNYXNrIjogIjEiLA0KPiArICAgICAgICAiRWRnZURldGVj
dCI6ICIxIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAiQ29sbGVjdFBFQlNS
ZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJDb3VudHMg
Y3ljbGVzIHRoYXQgdGhlIEluc3RydWN0aW9uIExlbmd0aCBkZWNvZGVyIChJTEQpIHN0YWxs
cyBvY2N1cnJlZCBkdWUgdG8gZHluYW1pY2FsbHkgY2hhbmdpbmcgcHJlZml4IGxlbmd0aCBv
ZiB0aGUgZGVjb2RlZCBpbnN0cnVjdGlvbiAoYnkgb3BlcmFuZCBzaXplIHByZWZpeCBpbnN0
cnVjdGlvbiAweDY2LCBhZGRyZXNzIHNpemUgcHJlZml4IGluc3RydWN0aW9uIDB4Njcgb3Ig
UkVYLlcgZm9yIEludGVsNjQpLiBDb3VudCBpcyBwcm9wb3J0aW9uYWwgdG8gdGhlIG51bWJl
ciBvZiBwcmVmaXhlcyBpbiBhIDE2Qi1saW5lLiBUaGlzIG1heSByZXN1bHQgaW4gYSB0aHJl
ZS1jeWNsZSBwZW5hbHR5IGZvciBlYWNoIExDUCAoTGVuZ3RoIGNoYW5naW5nIHByZWZpeCkg
aW4gYSAxNi1ieXRlIGNodW5rLiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHg4NyIs
DQo+ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMiLA0KPiArICAgICAgICAiVU1hc2si
OiAiMHgxIiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzIiwNCj4gKyAg
ICAgICAgIkV2ZW50TmFtZSI6ICJJTERfU1RBTEwuTENQIiwNCj4gKyAgICAgICAgIlNhbXBs
ZUFmdGVyVmFsdWUiOiAiMjAwMDAwMyIsDQo+ICsgICAgICAgICJCcmllZkRlc2NyaXB0aW9u
IjogIlN0YWxscyBjYXVzZWQgYnkgY2hhbmdpbmcgcHJlZml4IGxlbmd0aCBvZiB0aGUgaW5z
dHJ1Y3Rpb24uIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAiQ29sbGVjdFBF
QlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJDb3Vu
dHMsIG9uIHRoZSBwZXItdGhyZWFkIGJhc2lzLCBjeWNsZXMgZHVyaW5nIHdoaWNoIGF0IGxl
YXN0IG9uZSB1b3AgaXMgZGlzcGF0Y2hlZCBmcm9tIHRoZSBSZXNlcnZhdGlvbiBTdGF0aW9u
IChSUykgdG8gcG9ydCAwLiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHhhMSIsDQo+
ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJV
TWFzayI6ICIweDEiLA0KPiArICAgICAgICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMsNCw1
LDYsNyIsDQo+ICsgICAgICAgICJFdmVudE5hbWUiOiAiVU9QU19ESVNQQVRDSEVELlBPUlRf
MCIsDQo+ICsgICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjIwMDAwMDMiLA0KPiArICAg
ICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJOdW1iZXIgb2YgdW9wcyBleGVjdXRlZCBvbiBw
b3J0IDAiDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJDb2xsZWN0UEVCU1Jl
Y29yZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9uIjogIkNvdW50cywg
b24gdGhlIHBlci10aHJlYWQgYmFzaXMsIGN5Y2xlcyBkdXJpbmcgd2hpY2ggYXQgbGVhc3Qg
b25lIHVvcCBpcyBkaXNwYXRjaGVkIGZyb20gdGhlIFJlc2VydmF0aW9uIFN0YXRpb24gKFJT
KSB0byBwb3J0IDEuIiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIweGExIiwNCj4gKyAg
ICAgICAgIkNvdW50ZXIiOiAiMCwxLDIsMyw0LDUsNiw3IiwNCj4gKyAgICAgICAgIlVNYXNr
IjogIjB4MiIsDQo+ICsgICAgICAgICJQRUJTY291bnRlcnMiOiAiMCwxLDIsMyw0LDUsNiw3
IiwNCj4gKyAgICAgICAgIkV2ZW50TmFtZSI6ICJVT1BTX0RJU1BBVENIRUQuUE9SVF8xIiwN
Cj4gKyAgICAgICAgIlNhbXBsZUFmdGVyVmFsdWUiOiAiMjAwMDAwMyIsDQo+ICsgICAgICAg
ICJCcmllZkRlc2NyaXB0aW9uIjogIk51bWJlciBvZiB1b3BzIGV4ZWN1dGVkIG9uIHBvcnQg
MSINCj4gKyAgICB9LA0KPiArICAgIHsNCj4gKyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3Jk
IjogIjIiLA0KPiArICAgICAgICAiUHVibGljRGVzY3JpcHRpb24iOiAiQ291bnRzLCBvbiB0
aGUgcGVyLXRocmVhZCBiYXNpcywgY3ljbGVzIGR1cmluZyB3aGljaCBhdCBsZWFzdCBvbmUg
dW9wIGlzIGRpc3BhdGNoZWQgZnJvbSB0aGUgUmVzZXJ2YXRpb24gU3RhdGlvbiAoUlMpIHRv
IHBvcnRzIDIgYW5kIDMuIiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIweGExIiwNCj4g
KyAgICAgICAgIkNvdW50ZXIiOiAiMCwxLDIsMyw0LDUsNiw3IiwNCj4gKyAgICAgICAgIlVN
YXNrIjogIjB4NCIsDQo+ICsgICAgICAgICJQRUJTY291bnRlcnMiOiAiMCwxLDIsMyw0LDUs
Niw3IiwNCj4gKyAgICAgICAgIkV2ZW50TmFtZSI6ICJVT1BTX0RJU1BBVENIRUQuUE9SVF8y
XzMiLA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIyMDAwMDAzIiwNCj4gKyAg
ICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiTnVtYmVyIG9mIHVvcHMgZXhlY3V0ZWQgb24g
cG9ydCAyIGFuZCAzIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAiQ29sbGVj
dFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJD
b3VudHMsIG9uIHRoZSBwZXItdGhyZWFkIGJhc2lzLCBjeWNsZXMgZHVyaW5nIHdoaWNoIGF0
IGxlYXN0IG9uZSB1b3AgaXMgZGlzcGF0Y2hlZCBmcm9tIHRoZSBSZXNlcnZhdGlvbiBTdGF0
aW9uIChSUykgdG8gcG9ydHMgNSBhbmQgOS4iLA0KPiArICAgICAgICAiRXZlbnRDb2RlIjog
IjB4YTEiLA0KPiArICAgICAgICAiQ291bnRlciI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiAr
ICAgICAgICAiVU1hc2siOiAiMHgxMCIsDQo+ICsgICAgICAgICJQRUJTY291bnRlcnMiOiAi
MCwxLDIsMyw0LDUsNiw3IiwNCj4gKyAgICAgICAgIkV2ZW50TmFtZSI6ICJVT1BTX0RJU1BB
VENIRUQuUE9SVF80XzkiLA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIyMDAw
MDAzIiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiTnVtYmVyIG9mIHVvcHMg
ZXhlY3V0ZWQgb24gcG9ydCA0IGFuZCA5Ig0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAg
ICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNj
cmlwdGlvbiI6ICJDb3VudHMsIG9uIHRoZSBwZXItdGhyZWFkIGJhc2lzLCBjeWNsZXMgZHVy
aW5nIHdoaWNoIGF0IGxlYXN0IG9uZSB1b3AgaXMgZGlzcGF0Y2hlZCBmcm9tIHRoZSBSZXNl
cnZhdGlvbiBTdGF0aW9uIChSUykgdG8gcG9ydCA1LiIsDQo+ICsgICAgICAgICJFdmVudENv
ZGUiOiAiMHhhMSIsDQo+ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMsNCw1LDYsNyIs
DQo+ICsgICAgICAgICJVTWFzayI6ICIweDIwIiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVy
cyI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAgICAiRXZlbnROYW1lIjogIlVPUFNf
RElTUEFUQ0hFRC5QT1JUXzUiLA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIy
MDAwMDAzIiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiTnVtYmVyIG9mIHVv
cHMgZXhlY3V0ZWQgb24gcG9ydCA1Ig0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAg
ICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNjcmlw
dGlvbiI6ICJDb3VudHMsIG9uIHRoZSBwZXItdGhyZWFkIGJhc2lzLCBjeWNsZXMgZHVyaW5n
IHdoaWNoIGF0IGxlYXN0IG9uZSB1b3AgaXMgZGlzcGF0Y2hlZCBmcm9tIHRoZSBSZXNlcnZh
dGlvbiBTdGF0aW9uIChSUykgdG8gcG9ydCA2LiIsDQo+ICsgICAgICAgICJFdmVudENvZGUi
OiAiMHhhMSIsDQo+ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+
ICsgICAgICAgICJVTWFzayI6ICIweDQwIiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6
ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAgICAiRXZlbnROYW1lIjogIlVPUFNfRElT
UEFUQ0hFRC5QT1JUXzYiLA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIyMDAw
MDAzIiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiTnVtYmVyIG9mIHVvcHMg
ZXhlY3V0ZWQgb24gcG9ydCA2Ig0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAi
Q29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNjcmlwdGlv
biI6ICJDb3VudHMsIG9uIHRoZSBwZXItdGhyZWFkIGJhc2lzLCBjeWNsZXMgZHVyaW5nIHdo
aWNoIGF0IGxlYXN0IG9uZSB1b3AgaXMgZGlzcGF0Y2hlZCBmcm9tIHRoZSBSZXNlcnZhdGlv
biBTdGF0aW9uIChSUykgdG8gcG9ydHMgNyBhbmQgOC4iLA0KPiArICAgICAgICAiRXZlbnRD
b2RlIjogIjB4YTEiLA0KPiArICAgICAgICAiQ291bnRlciI6ICIwLDEsMiwzLDQsNSw2LDci
LA0KPiArICAgICAgICAiVU1hc2siOiAiMHg4MCIsDQo+ICsgICAgICAgICJQRUJTY291bnRl
cnMiOiAiMCwxLDIsMyw0LDUsNiw3IiwNCj4gKyAgICAgICAgIkV2ZW50TmFtZSI6ICJVT1BT
X0RJU1BBVENIRUQuUE9SVF83XzgiLA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6
ICIyMDAwMDAzIiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiTnVtYmVyIG9m
IHVvcHMgZXhlY3V0ZWQgb24gcG9ydCA3IGFuZCA4Ig0KPiArICAgIH0sDQo+ICsgICAgew0K
PiArICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJFdmVu
dENvZGUiOiAiMHhhMiIsDQo+ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMsNCw1LDYs
NyIsDQo+ICsgICAgICAgICJVTWFzayI6ICIweDIiLA0KPiArICAgICAgICAiUEVCU2NvdW50
ZXJzIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJFdmVudE5hbWUiOiAiUkVT
T1VSQ0VfU1RBTExTLlNDT1JFQk9BUkQiLA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1
ZSI6ICIyMDAwMDAzIiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiQ291bnRz
IGN5Y2xlcyB3aGVyZSB0aGUgcGlwZWxpbmUgaXMgc3RhbGxlZCBkdWUgdG8gc2VyaWFsaXpp
bmcgb3BlcmF0aW9ucy4iDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJDb2xs
ZWN0UEVCU1JlY29yZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9uIjog
IkNvdW50cyBhbGxvY2F0aW9uIHN0YWxsIGN5Y2xlcyBjYXVzZWQgYnkgdGhlIHN0b3JlIGJ1
ZmZlciAoU0IpIGJlaW5nIGZ1bGwuIFRoaXMgY291bnRzIGN5Y2xlcyB0aGF0IHRoZSBwaXBl
bGluZSBiYWNrLWVuZCBibG9ja2VkIHVvcCBkZWxpdmVyeSBmcm9tIHRoZSBmcm9udC1lbmQu
IiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIweEEyIiwNCj4gKyAgICAgICAgIkNvdW50
ZXIiOiAiMCwxLDIsMyw0LDUsNiw3IiwNCj4gKyAgICAgICAgIlVNYXNrIjogIjB4OCIsDQo+
ICsgICAgICAgICJQRUJTY291bnRlcnMiOiAiMCwxLDIsMyw0LDUsNiw3IiwNCj4gKyAgICAg
ICAgIkV2ZW50TmFtZSI6ICJSRVNPVVJDRV9TVEFMTFMuU0IiLA0KPiArICAgICAgICAiU2Ft
cGxlQWZ0ZXJWYWx1ZSI6ICIyMDAwMDAzIiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRp
b24iOiAiQ3ljbGVzIHN0YWxsZWQgZHVlIHRvIG5vIHN0b3JlIGJ1ZmZlcnMgYXZhaWxhYmxl
LiAobm90IGluY2x1ZGluZyBkcmFpbmluZyBmb3JtIHN5bmMpLiINCj4gKyAgICB9LA0KPiAr
ICAgIHsNCj4gKyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAg
ICAiRXZlbnRDb2RlIjogIjB4QTMiLA0KPiArICAgICAgICAiQ291bnRlciI6ICIwLDEsMiwz
IiwNCj4gKyAgICAgICAgIlVNYXNrIjogIjB4MSIsDQo+ICsgICAgICAgICJQRUJTY291bnRl
cnMiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJFdmVudE5hbWUiOiAiQ1lDTEVfQUNUSVZJ
VFkuQ1lDTEVTX0wyX01JU1MiLA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIy
MDAwMDAzIiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiQ3ljbGVzIHdoaWxl
IEwyIGNhY2hlIG1pc3MgZGVtYW5kIGxvYWQgaXMgb3V0c3RhbmRpbmcuIiwNCj4gKyAgICAg
ICAgIkNvdW50ZXJNYXNrIjogIjEiDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAg
ICJDb2xsZWN0UEVCU1JlY29yZCI6ICIyIiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIw
eEEzIiwNCj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMCwxLDIsMyw0LDUsNiw3IiwNCj4gKyAg
ICAgICAgIlVNYXNrIjogIjB4NCIsDQo+ICsgICAgICAgICJQRUJTY291bnRlcnMiOiAiMCwx
LDIsMyw0LDUsNiw3IiwNCj4gKyAgICAgICAgIkV2ZW50TmFtZSI6ICJDWUNMRV9BQ1RJVklU
WS5TVEFMTFNfVE9UQUwiLA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIyMDAw
MDAzIiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiVG90YWwgZXhlY3V0aW9u
IHN0YWxscy4iLA0KPiArICAgICAgICAiQ291bnRlck1hc2siOiAiNCINCj4gKyAgICB9LA0K
PiArICAgIHsNCj4gKyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAg
ICAgICAiRXZlbnRDb2RlIjogIjB4QTMiLA0KPiArICAgICAgICAiQ291bnRlciI6ICIwLDEs
MiwzIiwNCj4gKyAgICAgICAgIlVNYXNrIjogIjB4NSIsDQo+ICsgICAgICAgICJQRUJTY291
bnRlcnMiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJFdmVudE5hbWUiOiAiQ1lDTEVfQUNU
SVZJVFkuU1RBTExTX0wyX01JU1MiLA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6
ICIyMDAwMDAzIiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiRXhlY3V0aW9u
IHN0YWxscyB3aGlsZSBMMiBjYWNoZSBtaXNzIGRlbWFuZCBsb2FkIGlzIG91dHN0YW5kaW5n
LiIsDQo+ICsgICAgICAgICJDb3VudGVyTWFzayI6ICI1Ig0KPiArICAgIH0sDQo+ICsgICAg
ew0KPiArICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJF
dmVudENvZGUiOiAiMHhBMyIsDQo+ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMiLA0K
PiArICAgICAgICAiVU1hc2siOiAiMHg4IiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6
ICIwLDEsMiwzIiwNCj4gKyAgICAgICAgIkV2ZW50TmFtZSI6ICJDWUNMRV9BQ1RJVklUWS5D
WUNMRVNfTDFEX01JU1MiLA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIyMDAw
MDAzIiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiQ3ljbGVzIHdoaWxlIEwx
IGNhY2hlIG1pc3MgZGVtYW5kIGxvYWQgaXMgb3V0c3RhbmRpbmcuIiwNCj4gKyAgICAgICAg
IkNvdW50ZXJNYXNrIjogIjgiDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJD
b2xsZWN0UEVCU1JlY29yZCI6ICIyIiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIweEEz
IiwNCj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJVTWFz
ayI6ICIweGMiLA0KPiArICAgICAgICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMiLA0KPiAr
ICAgICAgICAiRXZlbnROYW1lIjogIkNZQ0xFX0FDVElWSVRZLlNUQUxMU19MMURfTUlTUyIs
DQo+ICsgICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjIwMDAwMDMiLA0KPiArICAgICAg
ICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJFeGVjdXRpb24gc3RhbGxzIHdoaWxlIEwxIGNhY2hl
IG1pc3MgZGVtYW5kIGxvYWQgaXMgb3V0c3RhbmRpbmcuIiwNCj4gKyAgICAgICAgIkNvdW50
ZXJNYXNrIjogIjEyIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAiQ29sbGVj
dFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHhBMyIsDQo+
ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJV
TWFzayI6ICIweDEwIiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzLDQs
NSw2LDciLA0KPiArICAgICAgICAiRXZlbnROYW1lIjogIkNZQ0xFX0FDVElWSVRZLkNZQ0xF
U19NRU1fQU5ZIiwNCj4gKyAgICAgICAgIlNhbXBsZUFmdGVyVmFsdWUiOiAiMjAwMDAwMyIs
DQo+ICsgICAgICAgICJCcmllZkRlc2NyaXB0aW9uIjogIkN5Y2xlcyB3aGlsZSBtZW1vcnkg
c3Vic3lzdGVtIGhhcyBhbiBvdXRzdGFuZGluZyBsb2FkLiIsDQo+ICsgICAgICAgICJDb3Vu
dGVyTWFzayI6ICIxNiINCj4gKyAgICB9LA0KPiArICAgIHsNCj4gKyAgICAgICAgIkNvbGxl
Y3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAiRXZlbnRDb2RlIjogIjB4QTMiLA0K
PiArICAgICAgICAiQ291bnRlciI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAgICAi
VU1hc2siOiAiMHgxNCIsDQo+ICsgICAgICAgICJQRUJTY291bnRlcnMiOiAiMCwxLDIsMyw0
LDUsNiw3IiwNCj4gKyAgICAgICAgIkV2ZW50TmFtZSI6ICJDWUNMRV9BQ1RJVklUWS5TVEFM
TFNfTUVNX0FOWSIsDQo+ICsgICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjIwMDAwMDMi
LA0KPiArICAgICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJFeGVjdXRpb24gc3RhbGxzIHdo
aWxlIG1lbW9yeSBzdWJzeXN0ZW0gaGFzIGFuIG91dHN0YW5kaW5nIGxvYWQuIiwNCj4gKyAg
ICAgICAgIkNvdW50ZXJNYXNrIjogIjIwIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAg
ICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNj
cmlwdGlvbiI6ICJDb3VudHMgY3ljbGVzIGR1cmluZyB3aGljaCBhIHRvdGFsIG9mIDEgdW9w
IHdhcyBleGVjdXRlZCBvbiBhbGwgcG9ydHMgYW5kIFJlc2VydmF0aW9uIFN0YXRpb24gKFJT
KSB3YXMgbm90IGVtcHR5LiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHhhNiIsDQo+
ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJV
TWFzayI6ICIweDIiLA0KPiArICAgICAgICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMsNCw1
LDYsNyIsDQo+ICsgICAgICAgICJFdmVudE5hbWUiOiAiRVhFX0FDVElWSVRZLjFfUE9SVFNf
VVRJTCIsDQo+ICsgICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjIwMDAwMDMiLA0KPiAr
ICAgICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJDeWNsZXMgdG90YWwgb2YgMSB1b3AgaXMg
ZXhlY3V0ZWQgb24gYWxsIHBvcnRzIGFuZCBSZXNlcnZhdGlvbiBTdGF0aW9uIHdhcyBub3Qg
ZW1wdHkuIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAiQ29sbGVjdFBFQlNS
ZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJDb3VudHMg
Y3ljbGVzIGR1cmluZyB3aGljaCBhIHRvdGFsIG9mIDIgdW9wcyB3ZXJlIGV4ZWN1dGVkIG9u
IGFsbCBwb3J0cyBhbmQgUmVzZXJ2YXRpb24gU3RhdGlvbiAoUlMpIHdhcyBub3QgZW1wdHku
IiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIweGE2IiwNCj4gKyAgICAgICAgIkNvdW50
ZXIiOiAiMCwxLDIsMyw0LDUsNiw3IiwNCj4gKyAgICAgICAgIlVNYXNrIjogIjB4NCIsDQo+
ICsgICAgICAgICJQRUJTY291bnRlcnMiOiAiMCwxLDIsMyw0LDUsNiw3IiwNCj4gKyAgICAg
ICAgIkV2ZW50TmFtZSI6ICJFWEVfQUNUSVZJVFkuMl9QT1JUU19VVElMIiwNCj4gKyAgICAg
ICAgIlNhbXBsZUFmdGVyVmFsdWUiOiAiMjAwMDAwMyIsDQo+ICsgICAgICAgICJCcmllZkRl
c2NyaXB0aW9uIjogIkN5Y2xlcyB0b3RhbCBvZiAyIHVvcHMgYXJlIGV4ZWN1dGVkIG9uIGFs
bCBwb3J0cyBhbmQgUmVzZXJ2YXRpb24gU3RhdGlvbiB3YXMgbm90IGVtcHR5LiINCj4gKyAg
ICB9LA0KPiArICAgIHsNCj4gKyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0K
PiArICAgICAgICAiUHVibGljRGVzY3JpcHRpb24iOiAiQ291bnRzIGN5Y2xlcyB3aGVyZSB0
aGUgU3RvcmUgQnVmZmVyIHdhcyBmdWxsIGFuZCBubyBsb2FkcyBjYXVzZWQgYW4gZXhlY3V0
aW9uIHN0YWxsLiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHhBNiIsDQo+ICsgICAg
ICAgICJDb3VudGVyIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJVTWFzayI6
ICIweDQwIiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzLDQsNSw2LDci
LA0KPiArICAgICAgICAiRXZlbnROYW1lIjogIkVYRV9BQ1RJVklUWS5CT1VORF9PTl9TVE9S
RVMiLA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIyMDAwMDAzIiwNCj4gKyAg
ICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiQ3ljbGVzIHdoZXJlIHRoZSBTdG9yZSBCdWZm
ZXIgd2FzIGZ1bGwgYW5kIG5vIGxvYWRzIGNhdXNlZCBhbiBleGVjdXRpb24gc3RhbGwuIiwN
Cj4gKyAgICAgICAgIkNvdW50ZXJNYXNrIjogIjIiDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+
ICsgICAgICAgICJDb2xsZWN0UEVCU1JlY29yZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1Ymxp
Y0Rlc2NyaXB0aW9uIjogIkNvdW50cyBjeWNsZXMgZHVyaW5nIHdoaWNoIG5vIHVvcHMgd2Vy
ZSBleGVjdXRlZCBvbiBhbGwgcG9ydHMgYW5kIFJlc2VydmF0aW9uIFN0YXRpb24gKFJTKSB3
YXMgbm90IGVtcHR5LiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHhhNiIsDQo+ICsg
ICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJVTWFz
ayI6ICIweDgwIiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzLDQsNSw2
LDciLA0KPiArICAgICAgICAiRXZlbnROYW1lIjogIkVYRV9BQ1RJVklUWS5FWEVfQk9VTkRf
MF9QT1JUUyIsDQo+ICsgICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjIwMDAwMDMiLA0K
PiArICAgICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJDeWNsZXMgd2hlcmUgbm8gdW9wcyB3
ZXJlIGV4ZWN1dGVkLCB0aGUgUmVzZXJ2YXRpb24gU3RhdGlvbiB3YXMgbm90IGVtcHR5LCB0
aGUgU3RvcmUgQnVmZmVyIHdhcyBmdWxsIGFuZCB0aGVyZSB3YXMgbm8gb3V0c3RhbmRpbmcg
bG9hZC4iDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJDb2xsZWN0UEVCU1Jl
Y29yZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9uIjogIkNvdW50cyB0
aGUgbnVtYmVyIG9mIHVvcHMgZGVsaXZlcmVkIHRvIHRoZSBiYWNrLWVuZCBieSB0aGUgTFNE
KExvb3AgU3RyZWFtIERldGVjdG9yKS4iLA0KPiArICAgICAgICAiRXZlbnRDb2RlIjogIjB4
QTgiLA0KPiArICAgICAgICAiQ291bnRlciI6ICIwLDEsMiwzIiwNCj4gKyAgICAgICAgIlVN
YXNrIjogIjB4MSIsDQo+ICsgICAgICAgICJQRUJTY291bnRlcnMiOiAiMCwxLDIsMyIsDQo+
ICsgICAgICAgICJFdmVudE5hbWUiOiAiTFNELlVPUFMiLA0KPiArICAgICAgICAiU2FtcGxl
QWZ0ZXJWYWx1ZSI6ICIyMDAwMDAzIiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24i
OiAiTnVtYmVyIG9mIFVvcHMgZGVsaXZlcmVkIGJ5IHRoZSBMU0QuIg0KPiArICAgIH0sDQo+
ICsgICAgew0KPiArICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAg
ICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJDb3VudHMgdGhlIGN5Y2xlcyB3aGVuIGF0IGxl
YXN0IG9uZSB1b3AgaXMgZGVsaXZlcmVkIGJ5IHRoZSBMU0QgKExvb3Atc3RyZWFtIGRldGVj
dG9yKS4iLA0KPiArICAgICAgICAiRXZlbnRDb2RlIjogIjB4QTgiLA0KPiArICAgICAgICAi
Q291bnRlciI6ICIwLDEsMiwzIiwNCj4gKyAgICAgICAgIlVNYXNrIjogIjB4MSIsDQo+ICsg
ICAgICAgICJQRUJTY291bnRlcnMiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJFdmVudE5h
bWUiOiAiTFNELkNZQ0xFU19BQ1RJVkUiLA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1
ZSI6ICIyMDAwMDAzIiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiQ3ljbGVz
IFVvcHMgZGVsaXZlcmVkIGJ5IHRoZSBMU0QsIGJ1dCBkaWRuJ3QgY29tZSBmcm9tIHRoZSBk
ZWNvZGVyLiIsDQo+ICsgICAgICAgICJDb3VudGVyTWFzayI6ICIxIg0KPiArICAgIH0sDQo+
ICsgICAgew0KPiArICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAg
ICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJDb3VudHMgdGhlIGN5Y2xlcyB3aGVuIG9wdGlt
YWwgbnVtYmVyIG9mIHVvcHMgaXMgZGVsaXZlcmVkIGJ5IHRoZSBMU0QgKExvb3Atc3RyZWFt
IGRldGVjdG9yKS4iLA0KPiArICAgICAgICAiRXZlbnRDb2RlIjogIjB4YTgiLA0KPiArICAg
ICAgICAiQ291bnRlciI6ICIwLDEsMiwzIiwNCj4gKyAgICAgICAgIlVNYXNrIjogIjB4MSIs
DQo+ICsgICAgICAgICJQRUJTY291bnRlcnMiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJF
dmVudE5hbWUiOiAiTFNELkNZQ0xFU19PSyIsDQo+ICsgICAgICAgICJTYW1wbGVBZnRlclZh
bHVlIjogIjIwMDAwMDMiLA0KPiArICAgICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJDeWNs
ZXMgb3B0aW1hbCBudW1iZXIgb2YgVW9wcyBkZWxpdmVyZWQgYnkgdGhlIExTRCwgYnV0IGRp
ZCBub3QgY29tZSBmcm9tIHRoZSBkZWNvZGVyLiIsDQo+ICsgICAgICAgICJDb3VudGVyTWFz
ayI6ICI1Ig0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAiQ29sbGVjdFBFQlNS
ZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHhCMSIsDQo+ICsgICAg
ICAgICJDb3VudGVyIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJVTWFzayI6
ICIweDEiLA0KPiArICAgICAgICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMsNCw1LDYsNyIs
DQo+ICsgICAgICAgICJFdmVudE5hbWUiOiAiVU9QU19FWEVDVVRFRC5USFJFQUQiLA0KPiAr
ICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIyMDAwMDAzIiwNCj4gKyAgICAgICAgIkJy
aWVmRGVzY3JpcHRpb24iOiAiQ291bnRzIHRoZSBudW1iZXIgb2YgdW9wcyB0byBiZSBleGVj
dXRlZCBwZXItdGhyZWFkIGVhY2ggY3ljbGUuIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiAr
ICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNE
ZXNjcmlwdGlvbiI6ICJDb3VudHMgY3ljbGVzIGR1cmluZyB3aGljaCBubyB1b3BzIHdlcmUg
ZGlzcGF0Y2hlZCBmcm9tIHRoZSBSZXNlcnZhdGlvbiBTdGF0aW9uIChSUykgcGVyIHRocmVh
ZC4iLA0KPiArICAgICAgICAiRXZlbnRDb2RlIjogIjB4QjEiLA0KPiArICAgICAgICAiSW52
ZXJ0IjogIjEiLA0KPiArICAgICAgICAiQ291bnRlciI6ICIwLDEsMiwzLDQsNSw2LDciLA0K
PiArICAgICAgICAiVU1hc2siOiAiMHgxIiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6
ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAgICAiRXZlbnROYW1lIjogIlVPUFNfRVhF
Q1VURUQuU1RBTExfQ1lDTEVTIiwNCj4gKyAgICAgICAgIlNhbXBsZUFmdGVyVmFsdWUiOiAi
MjAwMDAwMyIsDQo+ICsgICAgICAgICJCcmllZkRlc2NyaXB0aW9uIjogIkNvdW50cyBudW1i
ZXIgb2YgY3ljbGVzIG5vIHVvcHMgd2VyZSBkaXNwYXRjaGVkIHRvIGJlIGV4ZWN1dGVkIG9u
IHRoaXMgdGhyZWFkLiIsDQo+ICsgICAgICAgICJDb3VudGVyTWFzayI6ICIxIg0KPiArICAg
IH0sDQo+ICsgICAgew0KPiArICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+
ICsgICAgICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJDeWNsZXMgd2hlcmUgYXQgbGVhc3Qg
MSB1b3Agd2FzIGV4ZWN1dGVkIHBlci10aHJlYWQuIiwNCj4gKyAgICAgICAgIkV2ZW50Q29k
ZSI6ICIweGIxIiwNCj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMCwxLDIsMyw0LDUsNiw3IiwN
Cj4gKyAgICAgICAgIlVNYXNrIjogIjB4MSIsDQo+ICsgICAgICAgICJQRUJTY291bnRlcnMi
OiAiMCwxLDIsMyw0LDUsNiw3IiwNCj4gKyAgICAgICAgIkV2ZW50TmFtZSI6ICJVT1BTX0VY
RUNVVEVELkNZQ0xFU19HRV8xIiwNCj4gKyAgICAgICAgIlNhbXBsZUFmdGVyVmFsdWUiOiAi
MjAwMDAwMyIsDQo+ICsgICAgICAgICJCcmllZkRlc2NyaXB0aW9uIjogIkN5Y2xlcyB3aGVy
ZSBhdCBsZWFzdCAxIHVvcCB3YXMgZXhlY3V0ZWQgcGVyLXRocmVhZCIsDQo+ICsgICAgICAg
ICJDb3VudGVyTWFzayI6ICIxIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAi
Q29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNjcmlwdGlv
biI6ICJDeWNsZXMgd2hlcmUgYXQgbGVhc3QgMiB1b3BzIHdlcmUgZXhlY3V0ZWQgcGVyLXRo
cmVhZC4iLA0KPiArICAgICAgICAiRXZlbnRDb2RlIjogIjB4YjEiLA0KPiArICAgICAgICAi
Q291bnRlciI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAgICAiVU1hc2siOiAiMHgx
IiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiAr
ICAgICAgICAiRXZlbnROYW1lIjogIlVPUFNfRVhFQ1VURUQuQ1lDTEVTX0dFXzIiLA0KPiAr
ICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIyMDAwMDAzIiwNCj4gKyAgICAgICAgIkJy
aWVmRGVzY3JpcHRpb24iOiAiQ3ljbGVzIHdoZXJlIGF0IGxlYXN0IDIgdW9wcyB3ZXJlIGV4
ZWN1dGVkIHBlci10aHJlYWQiLA0KPiArICAgICAgICAiQ291bnRlck1hc2siOiAiMiINCj4g
KyAgICB9LA0KPiArICAgIHsNCj4gKyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIi
LA0KPiArICAgICAgICAiUHVibGljRGVzY3JpcHRpb24iOiAiQ3ljbGVzIHdoZXJlIGF0IGxl
YXN0IDMgdW9wcyB3ZXJlIGV4ZWN1dGVkIHBlci10aHJlYWQuIiwNCj4gKyAgICAgICAgIkV2
ZW50Q29kZSI6ICIweGIxIiwNCj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMCwxLDIsMyw0LDUs
Niw3IiwNCj4gKyAgICAgICAgIlVNYXNrIjogIjB4MSIsDQo+ICsgICAgICAgICJQRUJTY291
bnRlcnMiOiAiMCwxLDIsMyw0LDUsNiw3IiwNCj4gKyAgICAgICAgIkV2ZW50TmFtZSI6ICJV
T1BTX0VYRUNVVEVELkNZQ0xFU19HRV8zIiwNCj4gKyAgICAgICAgIlNhbXBsZUFmdGVyVmFs
dWUiOiAiMjAwMDAwMyIsDQo+ICsgICAgICAgICJCcmllZkRlc2NyaXB0aW9uIjogIkN5Y2xl
cyB3aGVyZSBhdCBsZWFzdCAzIHVvcHMgd2VyZSBleGVjdXRlZCBwZXItdGhyZWFkIiwNCj4g
KyAgICAgICAgIkNvdW50ZXJNYXNrIjogIjMiDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsg
ICAgICAgICJDb2xsZWN0UEVCU1JlY29yZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1YmxpY0Rl
c2NyaXB0aW9uIjogIkN5Y2xlcyB3aGVyZSBhdCBsZWFzdCA0IHVvcHMgd2VyZSBleGVjdXRl
ZCBwZXItdGhyZWFkLiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHhiMSIsDQo+ICsg
ICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJVTWFz
ayI6ICIweDEiLA0KPiArICAgICAgICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMsNCw1LDYs
NyIsDQo+ICsgICAgICAgICJFdmVudE5hbWUiOiAiVU9QU19FWEVDVVRFRC5DWUNMRVNfR0Vf
NCIsDQo+ICsgICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjIwMDAwMDMiLA0KPiArICAg
ICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJDeWNsZXMgd2hlcmUgYXQgbGVhc3QgNCB1b3Bz
IHdlcmUgZXhlY3V0ZWQgcGVyLXRocmVhZCIsDQo+ICsgICAgICAgICJDb3VudGVyTWFzayI6
ICI0Ig0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAiQ29sbGVjdFBFQlNSZWNv
cmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJDb3VudHMgdGhl
IG51bWJlciBvZiB1b3BzIGV4ZWN1dGVkIGZyb20gYW55IHRocmVhZC4iLA0KPiArICAgICAg
ICAiRXZlbnRDb2RlIjogIjB4QjEiLA0KPiArICAgICAgICAiQ291bnRlciI6ICIwLDEsMiwz
LDQsNSw2LDciLA0KPiArICAgICAgICAiVU1hc2siOiAiMHgyIiwNCj4gKyAgICAgICAgIlBF
QlNjb3VudGVycyI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAgICAiRXZlbnROYW1l
IjogIlVPUFNfRVhFQ1VURUQuQ09SRSIsDQo+ICsgICAgICAgICJTYW1wbGVBZnRlclZhbHVl
IjogIjIwMDAwMDMiLA0KPiArICAgICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJOdW1iZXIg
b2YgdW9wcyBleGVjdXRlZCBvbiB0aGUgY29yZS4iDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+
ICsgICAgICAgICJDb2xsZWN0UEVCU1JlY29yZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1Ymxp
Y0Rlc2NyaXB0aW9uIjogIkNvdW50cyBjeWNsZXMgd2hlbiBhdCBsZWFzdCAxIG1pY3JvLW9w
IGlzIGV4ZWN1dGVkIGZyb20gYW55IHRocmVhZCBvbiBwaHlzaWNhbCBjb3JlLiIsDQo+ICsg
ICAgICAgICJFdmVudENvZGUiOiAiMHhCMSIsDQo+ICsgICAgICAgICJDb3VudGVyIjogIjAs
MSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJVTWFzayI6ICIweDIiLA0KPiArICAgICAg
ICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJFdmVu
dE5hbWUiOiAiVU9QU19FWEVDVVRFRC5DT1JFX0NZQ0xFU19HRV8xIiwNCj4gKyAgICAgICAg
IlNhbXBsZUFmdGVyVmFsdWUiOiAiMjAwMDAwMyIsDQo+ICsgICAgICAgICJCcmllZkRlc2Ny
aXB0aW9uIjogIkN5Y2xlcyBhdCBsZWFzdCAxIG1pY3JvLW9wIGlzIGV4ZWN1dGVkIGZyb20g
YW55IHRocmVhZCBvbiBwaHlzaWNhbCBjb3JlLiIsDQo+ICsgICAgICAgICJDb3VudGVyTWFz
ayI6ICIxIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAiQ29sbGVjdFBFQlNS
ZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJDb3VudHMg
Y3ljbGVzIHdoZW4gYXQgbGVhc3QgMiBtaWNyby1vcHMgYXJlIGV4ZWN1dGVkIGZyb20gYW55
IHRocmVhZCBvbiBwaHlzaWNhbCBjb3JlLiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAi
MHhCMSIsDQo+ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsg
ICAgICAgICJVTWFzayI6ICIweDIiLA0KPiArICAgICAgICAiUEVCU2NvdW50ZXJzIjogIjAs
MSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJFdmVudE5hbWUiOiAiVU9QU19FWEVDVVRF
RC5DT1JFX0NZQ0xFU19HRV8yIiwNCj4gKyAgICAgICAgIlNhbXBsZUFmdGVyVmFsdWUiOiAi
MjAwMDAwMyIsDQo+ICsgICAgICAgICJCcmllZkRlc2NyaXB0aW9uIjogIkN5Y2xlcyBhdCBs
ZWFzdCAyIG1pY3JvLW9wIGlzIGV4ZWN1dGVkIGZyb20gYW55IHRocmVhZCBvbiBwaHlzaWNh
bCBjb3JlLiIsDQo+ICsgICAgICAgICJDb3VudGVyTWFzayI6ICIyIg0KPiArICAgIH0sDQo+
ICsgICAgew0KPiArICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAg
ICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJDb3VudHMgY3ljbGVzIHdoZW4gYXQgbGVhc3Qg
MyBtaWNyby1vcHMgYXJlIGV4ZWN1dGVkIGZyb20gYW55IHRocmVhZCBvbiBwaHlzaWNhbCBj
b3JlLiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHhCMSIsDQo+ICsgICAgICAgICJD
b3VudGVyIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJVTWFzayI6ICIweDIi
LA0KPiArICAgICAgICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsg
ICAgICAgICJFdmVudE5hbWUiOiAiVU9QU19FWEVDVVRFRC5DT1JFX0NZQ0xFU19HRV8zIiwN
Cj4gKyAgICAgICAgIlNhbXBsZUFmdGVyVmFsdWUiOiAiMjAwMDAwMyIsDQo+ICsgICAgICAg
ICJCcmllZkRlc2NyaXB0aW9uIjogIkN5Y2xlcyBhdCBsZWFzdCAzIG1pY3JvLW9wIGlzIGV4
ZWN1dGVkIGZyb20gYW55IHRocmVhZCBvbiBwaHlzaWNhbCBjb3JlLiIsDQo+ICsgICAgICAg
ICJDb3VudGVyTWFzayI6ICIzIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAi
Q29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNjcmlwdGlv
biI6ICJDb3VudHMgY3ljbGVzIHdoZW4gYXQgbGVhc3QgNCBtaWNyby1vcHMgYXJlIGV4ZWN1
dGVkIGZyb20gYW55IHRocmVhZCBvbiBwaHlzaWNhbCBjb3JlLiIsDQo+ICsgICAgICAgICJF
dmVudENvZGUiOiAiMHhCMSIsDQo+ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMsNCw1
LDYsNyIsDQo+ICsgICAgICAgICJVTWFzayI6ICIweDIiLA0KPiArICAgICAgICAiUEVCU2Nv
dW50ZXJzIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJFdmVudE5hbWUiOiAi
VU9QU19FWEVDVVRFRC5DT1JFX0NZQ0xFU19HRV80IiwNCj4gKyAgICAgICAgIlNhbXBsZUFm
dGVyVmFsdWUiOiAiMjAwMDAwMyIsDQo+ICsgICAgICAgICJCcmllZkRlc2NyaXB0aW9uIjog
IkN5Y2xlcyBhdCBsZWFzdCA0IG1pY3JvLW9wIGlzIGV4ZWN1dGVkIGZyb20gYW55IHRocmVh
ZCBvbiBwaHlzaWNhbCBjb3JlLiIsDQo+ICsgICAgICAgICJDb3VudGVyTWFzayI6ICI0Ig0K
PiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAi
MiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJDb3VudHMgdGhlIG51bWJl
ciBvZiB4ODcgdW9wcyBleGVjdXRlZC4iLA0KPiArICAgICAgICAiRXZlbnRDb2RlIjogIjB4
QjEiLA0KPiArICAgICAgICAiQ291bnRlciI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAg
ICAgICAiVU1hc2siOiAiMHgxMCIsDQo+ICsgICAgICAgICJQRUJTY291bnRlcnMiOiAiMCwx
LDIsMyw0LDUsNiw3IiwNCj4gKyAgICAgICAgIkV2ZW50TmFtZSI6ICJVT1BTX0VYRUNVVEVE
Llg4NyIsDQo+ICsgICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjIwMDAwMDMiLA0KPiAr
ICAgICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJDb3VudHMgdGhlIG51bWJlciBvZiB4ODcg
dW9wcyBkaXNwYXRjaGVkLiINCj4gKyAgICB9LA0KPiArICAgIHsNCj4gKyAgICAgICAgIkNv
bGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAiUHVibGljRGVzY3JpcHRpb24i
OiAiQ291bnRzIHRoZSBudW1iZXIgb2YgWDg2IGluc3RydWN0aW9ucyByZXRpcmVkIC0gYW4g
QXJjaGl0ZWN0dXJhbCBQZXJmTW9uIGV2ZW50LiBDb3VudGluZyBjb250aW51ZXMgZHVyaW5n
IGhhcmR3YXJlIGludGVycnVwdHMsIHRyYXBzLCBhbmQgaW5zaWRlIGludGVycnVwdCBoYW5k
bGVycy4gTm90ZXM6IElOU1RfUkVUSVJFRC5BTlkgaXMgY291bnRlZCBieSBhIGRlc2lnbmF0
ZWQgZml4ZWQgY291bnRlciBmcmVlaW5nIHVwIHByb2dyYW1tYWJsZSBjb3VudGVycyB0byBj
b3VudCBvdGhlciBldmVudHMuIElOU1RfUkVUSVJFRC5BTllfUCBpcyBjb3VudGVkIGJ5IGEg
cHJvZ3JhbW1hYmxlIGNvdW50ZXIuIiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIweEMw
IiwNCj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMCwxLDIsMyw0LDUsNiw3IiwNCj4gKyAgICAg
ICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAgICAiRXZl
bnROYW1lIjogIklOU1RfUkVUSVJFRC5BTllfUCIsDQo+ICsgICAgICAgICJTYW1wbGVBZnRl
clZhbHVlIjogIjIwMDAwMDMiLA0KPiArICAgICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJO
dW1iZXIgb2YgaW5zdHJ1Y3Rpb25zIHJldGlyZWQuIEdlbmVyYWwgQ291bnRlciAtIGFyY2hp
dGVjdHVyYWwgZXZlbnQiDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJDb2xs
ZWN0UEVCU1JlY29yZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9uIjog
IkNvdW50cyB0aGUgbnVtYmVyIG9mIGN5Y2xlcyB1c2luZyBhbHdheXMgdHJ1ZSBjb25kaXRp
b24gKHVvcHNfcmV0ICZhbXA7bHQ7IDE2KSBhcHBsaWVkIHRvIG5vbiBQRUJTIHVvcHMgcmV0
aXJlZCBldmVudC4iLA0KPiArICAgICAgICAiRXZlbnRDb2RlIjogIjB4QzIiLA0KPiArICAg
ICAgICAiSW52ZXJ0IjogIjEiLA0KPiArICAgICAgICAiQ291bnRlciI6ICIwLDEsMiwzLDQs
NSw2LDciLA0KPiArICAgICAgICAiVU1hc2siOiAiMHgyIiwNCj4gKyAgICAgICAgIlBFQlNj
b3VudGVycyI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAgICAiRXZlbnROYW1lIjog
IlVPUFNfUkVUSVJFRC5UT1RBTF9DWUNMRVMiLA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJW
YWx1ZSI6ICIyMDAwMDAzIiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiQ3lj
bGVzIHdpdGggbGVzcyB0aGFuIDEwIGFjdHVhbGx5IHJldGlyZWQgdW9wcy4iLA0KPiArICAg
ICAgICAiQ291bnRlck1hc2siOiAiMTAiDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAg
ICAgICJDb2xsZWN0UEVCU1JlY29yZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2Ny
aXB0aW9uIjogIkNvdW50cyB0aGUgcmV0aXJlbWVudCBzbG90cyB1c2VkIGVhY2ggY3ljbGUu
IiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIweGMyIiwNCj4gKyAgICAgICAgIkNvdW50
ZXIiOiAiMCwxLDIsMyw0LDUsNiw3IiwNCj4gKyAgICAgICAgIlVNYXNrIjogIjB4MiIsDQo+
ICsgICAgICAgICJQRUJTY291bnRlcnMiOiAiMCwxLDIsMyw0LDUsNiw3IiwNCj4gKyAgICAg
ICAgIkV2ZW50TmFtZSI6ICJVT1BTX1JFVElSRUQuU0xPVFMiLA0KPiArICAgICAgICAiU2Ft
cGxlQWZ0ZXJWYWx1ZSI6ICIyMDAwMDAzIiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRp
b24iOiAiUmV0aXJlbWVudCBzbG90cyB1c2VkLiINCj4gKyAgICB9LA0KPiArICAgIHsNCj4g
KyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAiUHVibGlj
RGVzY3JpcHRpb24iOiAiQ291bnRzIHRoZSBudW1iZXIgb2YgbWFjaGluZSBjbGVhcnMgKG51
a2VzKSBvZiBhbnkgdHlwZS4iLA0KPiArICAgICAgICAiRXZlbnRDb2RlIjogIjB4QzMiLA0K
PiArICAgICAgICAiQ291bnRlciI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAgICAi
VU1hc2siOiAiMHgxIiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzLDQs
NSw2LDciLA0KPiArICAgICAgICAiRXZlbnROYW1lIjogIk1BQ0hJTkVfQ0xFQVJTLkNPVU5U
IiwNCj4gKyAgICAgICAgIlNhbXBsZUFmdGVyVmFsdWUiOiAiMTAwMDAzIiwNCj4gKyAgICAg
ICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiTnVtYmVyIG9mIG1hY2hpbmUgY2xlYXJzIChudWtl
cykgb2YgYW55IHR5cGUuIiwNCj4gKyAgICAgICAgIkNvdW50ZXJNYXNrIjogIjEiLA0KPiAr
ICAgICAgICAiRWRnZURldGVjdCI6ICIxIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAg
ICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNj
cmlwdGlvbiI6ICJDb3VudHMgc2VsZi1tb2RpZnlpbmcgY29kZSAoU01DKSBkZXRlY3RlZCwg
d2hpY2ggY2F1c2VzIGEgbWFjaGluZSBjbGVhci4iLA0KPiArICAgICAgICAiRXZlbnRDb2Rl
IjogIjB4QzMiLA0KPiArICAgICAgICAiQ291bnRlciI6ICIwLDEsMiwzLDQsNSw2LDciLA0K
PiArICAgICAgICAiVU1hc2siOiAiMHg0IiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6
ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAgICAiRXZlbnROYW1lIjogIk1BQ0hJTkVf
Q0xFQVJTLlNNQyIsDQo+ICsgICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjEwMDAwMyIs
DQo+ICsgICAgICAgICJCcmllZkRlc2NyaXB0aW9uIjogIlNlbGYtbW9kaWZ5aW5nIGNvZGUg
KFNNQykgZGV0ZWN0ZWQuIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAiUEVC
UyI6ICIxIiwNCj4gKyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAg
ICAgICAiUHVibGljRGVzY3JpcHRpb24iOiAiQ291bnRzIGFsbCBicmFuY2ggaW5zdHJ1Y3Rp
b25zIHJldGlyZWQuIiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIweEM0IiwNCj4gKyAg
ICAgICAgIkNvdW50ZXIiOiAiMCwxLDIsMyw0LDUsNiw3IiwNCj4gKyAgICAgICAgIlBFQlNj
b3VudGVycyI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAgICAiRXZlbnROYW1lIjog
IkJSX0lOU1RfUkVUSVJFRC5BTExfQlJBTkNIRVMiLA0KPiArICAgICAgICAiU2FtcGxlQWZ0
ZXJWYWx1ZSI6ICI0MDAwMDkiLA0KPiArICAgICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJB
bGwgYnJhbmNoIGluc3RydWN0aW9ucyByZXRpcmVkLiINCj4gKyAgICB9LA0KPiArICAgIHsN
Cj4gKyAgICAgICAgIlBFQlMiOiAiMSIsDQo+ICsgICAgICAgICJDb2xsZWN0UEVCU1JlY29y
ZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9uIjogIkNvdW50cyB0YWtl
biBjb25kaXRpb25hbCBicmFuY2ggaW5zdHJ1Y3Rpb25zIHJldGlyZWQuIiwNCj4gKyAgICAg
ICAgIkV2ZW50Q29kZSI6ICIweGM0IiwNCj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMCwxLDIs
Myw0LDUsNiw3IiwNCj4gKyAgICAgICAgIlVNYXNrIjogIjB4MSIsDQo+ICsgICAgICAgICJQ
RUJTY291bnRlcnMiOiAiMCwxLDIsMyw0LDUsNiw3IiwNCj4gKyAgICAgICAgIkV2ZW50TmFt
ZSI6ICJCUl9JTlNUX1JFVElSRUQuQ09ORF9UQUtFTiIsDQo+ICsgICAgICAgICJTYW1wbGVB
ZnRlclZhbHVlIjogIjQwMDAwOSIsDQo+ICsgICAgICAgICJCcmllZkRlc2NyaXB0aW9uIjog
IlRha2VuIGNvbmRpdGlvbmFsIGJyYW5jaCBpbnN0cnVjdGlvbnMgcmV0aXJlZC4iDQo+ICsg
ICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJQRUJTIjogIjEiLA0KPiArICAgICAgICAi
Q29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNjcmlwdGlv
biI6ICJDb3VudHMgYm90aCBkaXJlY3QgYW5kIGluZGlyZWN0IG5lYXIgY2FsbCBpbnN0cnVj
dGlvbnMgcmV0aXJlZC4iLA0KPiArICAgICAgICAiRXZlbnRDb2RlIjogIjB4QzQiLA0KPiAr
ICAgICAgICAiQ291bnRlciI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAgICAiVU1h
c2siOiAiMHgyIiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzLDQsNSw2
LDciLA0KPiArICAgICAgICAiRXZlbnROYW1lIjogIkJSX0lOU1RfUkVUSVJFRC5ORUFSX0NB
TEwiLA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIxMDAwMDciLA0KPiArICAg
ICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJEaXJlY3QgYW5kIGluZGlyZWN0IG5lYXIgY2Fs
bCBpbnN0cnVjdGlvbnMgcmV0aXJlZC4iDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAg
ICAgICJQRUJTIjogIjEiLA0KPiArICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIs
DQo+ICsgICAgICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJDb3VudHMgcmV0dXJuIGluc3Ry
dWN0aW9ucyByZXRpcmVkLiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHhDNCIsDQo+
ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJV
TWFzayI6ICIweDgiLA0KPiArICAgICAgICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMsNCw1
LDYsNyIsDQo+ICsgICAgICAgICJFdmVudE5hbWUiOiAiQlJfSU5TVF9SRVRJUkVELk5FQVJf
UkVUVVJOIiwNCj4gKyAgICAgICAgIlNhbXBsZUFmdGVyVmFsdWUiOiAiMTAwMDA3IiwNCj4g
KyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiUmV0dXJuIGluc3RydWN0aW9ucyByZXRp
cmVkLiINCj4gKyAgICB9LA0KPiArICAgIHsNCj4gKyAgICAgICAgIlBFQlMiOiAiMSIsDQo+
ICsgICAgICAgICJDb2xsZWN0UEVCU1JlY29yZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1Ymxp
Y0Rlc2NyaXB0aW9uIjogIkNvdW50cyBub3QgdGFrZW4gYnJhbmNoIGluc3RydWN0aW9ucyBy
ZXRpcmVkLiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHhDNCIsDQo+ICsgICAgICAg
ICJDb3VudGVyIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJVTWFzayI6ICIw
eDEwIiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzLDQsNSw2LDciLA0K
PiArICAgICAgICAiRXZlbnROYW1lIjogIkJSX0lOU1RfUkVUSVJFRC5DT05EX05UQUtFTiIs
DQo+ICsgICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjQwMDAwOSIsDQo+ICsgICAgICAg
ICJCcmllZkRlc2NyaXB0aW9uIjogIk5vdCB0YWtlbiBicmFuY2ggaW5zdHJ1Y3Rpb25zIHJl
dGlyZWQuIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAiUEVCUyI6ICIxIiwN
Cj4gKyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAiUHVi
bGljRGVzY3JpcHRpb24iOiAiQ291bnRzIGNvbmRpdGlvbmFsIGJyYW5jaCBpbnN0cnVjdGlv
bnMgcmV0aXJlZC4iLA0KPiArICAgICAgICAiRXZlbnRDb2RlIjogIjB4YzQiLA0KPiArICAg
ICAgICAiQ291bnRlciI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAgICAiVU1hc2si
OiAiMHgxMSIsDQo+ICsgICAgICAgICJQRUJTY291bnRlcnMiOiAiMCwxLDIsMyw0LDUsNiw3
IiwNCj4gKyAgICAgICAgIkV2ZW50TmFtZSI6ICJCUl9JTlNUX1JFVElSRUQuQ09ORCIsDQo+
ICsgICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjQwMDAwOSIsDQo+ICsgICAgICAgICJC
cmllZkRlc2NyaXB0aW9uIjogIkNvbmRpdGlvbmFsIGJyYW5jaCBpbnN0cnVjdGlvbnMgcmV0
aXJlZC4iDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJQRUJTIjogIjEiLA0K
PiArICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJs
aWNEZXNjcmlwdGlvbiI6ICJDb3VudHMgdGFrZW4gYnJhbmNoIGluc3RydWN0aW9ucyByZXRp
cmVkLiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHhDNCIsDQo+ICsgICAgICAgICJD
b3VudGVyIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJVTWFzayI6ICIweDIw
IiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiAr
ICAgICAgICAiRXZlbnROYW1lIjogIkJSX0lOU1RfUkVUSVJFRC5ORUFSX1RBS0VOIiwNCj4g
KyAgICAgICAgIlNhbXBsZUFmdGVyVmFsdWUiOiAiNDAwMDA5IiwNCj4gKyAgICAgICAgIkJy
aWVmRGVzY3JpcHRpb24iOiAiVGFrZW4gYnJhbmNoIGluc3RydWN0aW9ucyByZXRpcmVkLiIN
Cj4gKyAgICB9LA0KPiArICAgIHsNCj4gKyAgICAgICAgIlBFQlMiOiAiMSIsDQo+ICsgICAg
ICAgICJDb2xsZWN0UEVCU1JlY29yZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2Ny
aXB0aW9uIjogIkNvdW50cyBmYXIgYnJhbmNoIGluc3RydWN0aW9ucyByZXRpcmVkLiIsDQo+
ICsgICAgICAgICJFdmVudENvZGUiOiAiMHhDNCIsDQo+ICsgICAgICAgICJDb3VudGVyIjog
IjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJVTWFzayI6ICIweDQwIiwNCj4gKyAg
ICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAgICAi
RXZlbnROYW1lIjogIkJSX0lOU1RfUkVUSVJFRC5GQVJfQlJBTkNIIiwNCj4gKyAgICAgICAg
IlNhbXBsZUFmdGVyVmFsdWUiOiAiMTAwMDA3IiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3Jp
cHRpb24iOiAiRmFyIGJyYW5jaCBpbnN0cnVjdGlvbnMgcmV0aXJlZC4iDQo+ICsgICAgfSwN
Cj4gKyAgICB7DQo+ICsgICAgICAgICJQRUJTIjogIjEiLA0KPiArICAgICAgICAiQ29sbGVj
dFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJD
b3VudHMgYWxsIGluZGlyZWN0IGJyYW5jaCBpbnN0cnVjdGlvbnMgcmV0aXJlZCAoZXhjbHVk
aW5nIFJFVHMuIFRTWCBhYm9ydHMgaXMgY29uc2lkZXJlZCBpbmRpcmVjdCBicmFuY2gpLiIs
DQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHhjNCIsDQo+ICsgICAgICAgICJDb3VudGVy
IjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJVTWFzayI6ICIweDgwIiwNCj4g
KyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAg
ICAiRXZlbnROYW1lIjogIkJSX0lOU1RfUkVUSVJFRC5JTkRJUkVDVCIsDQo+ICsgICAgICAg
ICJTYW1wbGVBZnRlclZhbHVlIjogIjEwMDAwMyIsDQo+ICsgICAgICAgICJCcmllZkRlc2Ny
aXB0aW9uIjogIkFsbCBpbmRpcmVjdCBicmFuY2ggaW5zdHJ1Y3Rpb25zIHJldGlyZWQgKGV4
Y2x1ZGluZyBSRVRzLiBUU1ggYWJvcnRzIGFyZSBjb25zaWRlcmVkIGluZGlyZWN0IGJyYW5j
aCkuIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAiUEVCUyI6ICIxIiwNCj4g
KyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAiUHVibGlj
RGVzY3JpcHRpb24iOiAiQ291bnRzIGFsbCB0aGUgcmV0aXJlZCBicmFuY2ggaW5zdHJ1Y3Rp
b25zIHRoYXQgd2VyZSBtaXNwcmVkaWN0ZWQgYnkgdGhlIHByb2Nlc3Nvci4gQSBicmFuY2gg
bWlzcHJlZGljdGlvbiBvY2N1cnMgd2hlbiB0aGUgcHJvY2Vzc29yIGluY29ycmVjdGx5IHBy
ZWRpY3RzIHRoZSBkZXN0aW5hdGlvbiBvZiB0aGUgYnJhbmNoLiAgV2hlbiB0aGUgbWlzcHJl
ZGljdGlvbiBpcyBkaXNjb3ZlcmVkIGF0IGV4ZWN1dGlvbiwgYWxsIHRoZSBpbnN0cnVjdGlv
bnMgZXhlY3V0ZWQgaW4gdGhlIHdyb25nIChzcGVjdWxhdGl2ZSkgcGF0aCBtdXN0IGJlIGRp
c2NhcmRlZCwgYW5kIHRoZSBwcm9jZXNzb3IgbXVzdCBzdGFydCBmZXRjaGluZyBmcm9tIHRo
ZSBjb3JyZWN0IHBhdGguIiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIweEM1IiwNCj4g
KyAgICAgICAgIkNvdW50ZXIiOiAiMCwxLDIsMyw0LDUsNiw3IiwNCj4gKyAgICAgICAgIlBF
QlNjb3VudGVycyI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAgICAiRXZlbnROYW1l
IjogIkJSX01JU1BfUkVUSVJFRC5BTExfQlJBTkNIRVMiLA0KPiArICAgICAgICAiU2FtcGxl
QWZ0ZXJWYWx1ZSI6ICI0MDAwMDkiLA0KPiArICAgICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6
ICJBbGwgbWlzcHJlZGljdGVkIGJyYW5jaCBpbnN0cnVjdGlvbnMgcmV0aXJlZC4iLA0KPiAr
ICAgICAgICAiRGF0YV9MQSI6ICIxIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAg
ICAiUEVCUyI6ICIxIiwNCj4gKyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0K
PiArICAgICAgICAiUHVibGljRGVzY3JpcHRpb24iOiAiQ291bnRzIHRha2VuIGNvbmRpdGlv
bmFsIG1pc3ByZWRpY3RlZCBicmFuY2ggaW5zdHJ1Y3Rpb25zIHJldGlyZWQuIiwNCj4gKyAg
ICAgICAgIkV2ZW50Q29kZSI6ICIweGM1IiwNCj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMCwx
LDIsMyw0LDUsNiw3IiwNCj4gKyAgICAgICAgIlVNYXNrIjogIjB4MSIsDQo+ICsgICAgICAg
ICJQRUJTY291bnRlcnMiOiAiMCwxLDIsMyw0LDUsNiw3IiwNCj4gKyAgICAgICAgIkV2ZW50
TmFtZSI6ICJCUl9NSVNQX1JFVElSRUQuQ09ORF9UQUtFTiIsDQo+ICsgICAgICAgICJTYW1w
bGVBZnRlclZhbHVlIjogIjQwMDAwOSIsDQo+ICsgICAgICAgICJCcmllZkRlc2NyaXB0aW9u
IjogIm51bWJlciBvZiBicmFuY2ggaW5zdHJ1Y3Rpb25zIHJldGlyZWQgdGhhdCB3ZXJlIG1p
c3ByZWRpY3RlZCBhbmQgdGFrZW4uIE5vbiBQRUJTIiwNCj4gKyAgICAgICAgIkRhdGFfTEEi
OiAiMSINCj4gKyAgICB9LA0KPiArICAgIHsNCj4gKyAgICAgICAgIlBFQlMiOiAiMSIsDQo+
ICsgICAgICAgICJDb2xsZWN0UEVCU1JlY29yZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1Ymxp
Y0Rlc2NyaXB0aW9uIjogIkNvdW50cyBtaXNwcmVkaWN0ZWQgY29uZGl0aW9uYWwgYnJhbmNo
IGluc3RydWN0aW9ucyByZXRpcmVkLiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHhj
NSIsDQo+ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAg
ICAgICJVTWFzayI6ICIweDExIiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEs
MiwzLDQsNSw2LDciLA0KPiArICAgICAgICAiRXZlbnROYW1lIjogIkJSX01JU1BfUkVUSVJF
RC5DT05EIiwNCj4gKyAgICAgICAgIlNhbXBsZUFmdGVyVmFsdWUiOiAiNDAwMDA5IiwNCj4g
KyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiTWlzcHJlZGljdGVkIGNvbmRpdGlvbmFs
IGJyYW5jaCBpbnN0cnVjdGlvbnMgcmV0aXJlZC4iLA0KPiArICAgICAgICAiRGF0YV9MQSI6
ICIxIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAiUEVCUyI6ICIxIiwNCj4g
KyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAiUHVibGlj
RGVzY3JpcHRpb24iOiAiQ291bnRzIG51bWJlciBvZiBuZWFyIGJyYW5jaCBpbnN0cnVjdGlv
bnMgcmV0aXJlZCB0aGF0IHdlcmUgbWlzcHJlZGljdGVkIGFuZCB0YWtlbi4iLA0KPiArICAg
ICAgICAiRXZlbnRDb2RlIjogIjB4QzUiLA0KPiArICAgICAgICAiQ291bnRlciI6ICIwLDEs
MiwzLDQsNSw2LDciLA0KPiArICAgICAgICAiVU1hc2siOiAiMHgyMCIsDQo+ICsgICAgICAg
ICJQRUJTY291bnRlcnMiOiAiMCwxLDIsMyw0LDUsNiw3IiwNCj4gKyAgICAgICAgIkV2ZW50
TmFtZSI6ICJCUl9NSVNQX1JFVElSRUQuTkVBUl9UQUtFTiIsDQo+ICsgICAgICAgICJTYW1w
bGVBZnRlclZhbHVlIjogIjQwMDAwOSIsDQo+ICsgICAgICAgICJCcmllZkRlc2NyaXB0aW9u
IjogIk51bWJlciBvZiBuZWFyIGJyYW5jaCBpbnN0cnVjdGlvbnMgcmV0aXJlZCB0aGF0IHdl
cmUgbWlzcHJlZGljdGVkIGFuZCB0YWtlbi4iLA0KPiArICAgICAgICAiRGF0YV9MQSI6ICIx
Ig0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAiUEVCUyI6ICIxIiwNCj4gKyAg
ICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAiUHVibGljRGVz
Y3JpcHRpb24iOiAiQ291bnRzIGFsbCBtaXNzLXByZWRpY3RlZCBpbmRpcmVjdCBicmFuY2gg
aW5zdHJ1Y3Rpb25zIHJldGlyZWQgKGV4Y2x1ZGluZyBSRVRzLiBUU1ggYWJvcnRzIGlzIGNv
bnNpZGVyZWQgaW5kaXJlY3QgYnJhbmNoKS4iLA0KPiArICAgICAgICAiRXZlbnRDb2RlIjog
IjB4QzUiLA0KPiArICAgICAgICAiQ291bnRlciI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiAr
ICAgICAgICAiVU1hc2siOiAiMHg4MCIsDQo+ICsgICAgICAgICJQRUJTY291bnRlcnMiOiAi
MCwxLDIsMyw0LDUsNiw3IiwNCj4gKyAgICAgICAgIkV2ZW50TmFtZSI6ICJCUl9NSVNQX1JF
VElSRUQuSU5ESVJFQ1QiLA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIxMDAw
MDMiLA0KPiArICAgICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJBbGwgbWlzcy1wcmVkaWN0
ZWQgaW5kaXJlY3QgYnJhbmNoIGluc3RydWN0aW9ucyByZXRpcmVkIChleGNsdWRpbmcgUkVU
cy4gVFNYIGFib3J0cyBpcyBjb25zaWRlcmVkIGluZGlyZWN0IGJyYW5jaCkuIiwNCj4gKyAg
ICAgICAgIkRhdGFfTEEiOiAiMSINCj4gKyAgICB9LA0KPiArICAgIHsNCj4gKyAgICAgICAg
IkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAiUHVibGljRGVzY3JpcHRp
b24iOiAiSW5jcmVtZW50cyB3aGVuIGFuIGVudHJ5IGlzIGFkZGVkIHRvIHRoZSBMYXN0IEJy
YW5jaCBSZWNvcmQgKExCUikgYXJyYXkgKG9yIHJlbW92ZWQgZnJvbSB0aGUgYXJyYXkgaW4g
Y2FzZSBvZiBSRVRVUk5zIGluIGNhbGwgc3RhY2sgbW9kZSkuIFRoZSBldmVudCByZXF1aXJl
cyBMQlIgZW5hYmxlIHZpYSBJQTMyX0RFQlVHQ1RMIE1TUiBhbmQgYnJhbmNoIHR5cGUgc2Vs
ZWN0aW9uIHZpYSBNU1JfTEJSX1NFTEVDVC4iLA0KPiArICAgICAgICAiRXZlbnRDb2RlIjog
IjB4Y2MiLA0KPiArICAgICAgICAiQ291bnRlciI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiAr
ICAgICAgICAiVU1hc2siOiAiMHgyMCIsDQo+ICsgICAgICAgICJQRUJTY291bnRlcnMiOiAi
MCwxLDIsMyw0LDUsNiw3IiwNCj4gKyAgICAgICAgIkV2ZW50TmFtZSI6ICJNSVNDX1JFVElS
RUQuTEJSX0lOU0VSVFMiLA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIyMDAw
MDAzIiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiSW5jcmVtZW50cyB3aGVu
ZXZlciB0aGVyZSBpcyBhbiB1cGRhdGUgdG8gdGhlIExCUiBhcnJheS4iDQo+ICsgICAgfSwN
Cj4gKyAgICB7DQo+ICsgICAgICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJDb3VudHMgbnVt
YmVyIG9mIHJldGlyZWQgUEFVU0UgaW5zdHJ1Y3Rpb25zICh0aGF0IGRvIG5vdCBlbmQgdXAg
d2l0aCBhIFZNRXhpdCB0byB0aGUgVk1NOyBUU1ggYWJvcnRlZCBJbnN0cnVjdGlvbnMgbWF5
IGJlIGNvdW50ZWQpLiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHhjYyIsDQo+ICsg
ICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMsNCw1LDYsNyIsDQo+ICsgICAgICAgICJVTWFz
ayI6ICIweDQwIiwNCj4gKyAgICAgICAgIkV2ZW50TmFtZSI6ICJNSVNDX1JFVElSRUQuUEFV
U0VfSU5TVCIsDQo+ICsgICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjIwMDAwMDMiLA0K
PiArICAgICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJOdW1iZXIgb2YgcmV0aXJlZCBQQVVT
RSBpbnN0cnVjdGlvbnMuIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAiQ29s
bGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6
ICJDb3VudHMgdGhlIG51bWJlciBvZiB0aW1lcyB0aGUgZnJvbnQtZW5kIGlzIHJlc3RlZXJl
ZCB3aGVuIGl0IGZpbmRzIGEgYnJhbmNoIGluc3RydWN0aW9uIGluIGEgZmV0Y2ggbGluZS4g
VGhpcyBvY2N1cnMgZm9yIHRoZSBmaXJzdCB0aW1lIGEgYnJhbmNoIGluc3RydWN0aW9uIGlz
IGZldGNoZWQgb3Igd2hlbiB0aGUgYnJhbmNoIGlzIG5vdCB0cmFja2VkIGJ5IHRoZSBCUFUg
KEJyYW5jaCBQcmVkaWN0aW9uIFVuaXQpIGFueW1vcmUuIiwNCj4gKyAgICAgICAgIkV2ZW50
Q29kZSI6ICIweEU2IiwNCj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMCwxLDIsMyIsDQo+ICsg
ICAgICAgICJVTWFzayI6ICIweDEiLA0KPiArICAgICAgICAiUEVCU2NvdW50ZXJzIjogIjAs
MSwyLDMiLA0KPiArICAgICAgICAiRXZlbnROYW1lIjogIkJBQ0xFQVJTLkFOWSIsDQo+ICsg
ICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjEwMDAwMyIsDQo+ICsgICAgICAgICJCcmll
ZkRlc2NyaXB0aW9uIjogIkNvdW50cyB0aGUgdG90YWwgbnVtYmVyIHdoZW4gdGhlIGZyb250
IGVuZCBpcyByZXN0ZWVyZWQsIG1haW5seSB3aGVuIHRoZSBCUFUgY2Fubm90IHByb3ZpZGUg
YSBjb3JyZWN0IHByZWRpY3Rpb24gYW5kIHRoaXMgaXMgY29ycmVjdGVkIGJ5IG90aGVyIGJy
YW5jaCBoYW5kbGluZyBtZWNoYW5pc21zIGF0IHRoZSBmcm9udCBlbmQuIg0KPiArICAgIH0s
DQo+ICsgICAgew0KPiArICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsg
ICAgICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJUaGlzIGV2ZW50IGRpc3RyaWJ1dGVzIGN5
Y2xlIGNvdW50cyBiZXR3ZWVuIGFjdGl2ZSBoeXBlcnRocmVhZHMsIGkuZS4sIHRob3NlIGlu
IEMwLiAgQSBoeXBlcnRocmVhZCBiZWNvbWVzIGluYWN0aXZlIHdoZW4gaXQgZXhlY3V0ZXMg
dGhlIEhMVCBvciBNV0FJVCBpbnN0cnVjdGlvbnMuICBJZiBhbGwgb3RoZXIgaHlwZXJ0aHJl
YWRzIGFyZSBpbmFjdGl2ZSAob3IgZGlzYWJsZWQgb3IgZG8gbm90IGV4aXN0KSwgYWxsIGNv
dW50cyBhcmUgYXR0cmlidXRlZCB0byB0aGlzIGh5cGVydGhyZWFkLiBUbyBvYnRhaW4gdGhl
IGZ1bGwgY291bnQgd2hlbiB0aGUgQ29yZSBpcyBhY3RpdmUsIHN1bSB0aGUgY291bnRzIGZy
b20gZWFjaCBoeXBlcnRocmVhZC4iLA0KPiArICAgICAgICAiRXZlbnRDb2RlIjogIjB4ZWMi
LA0KPiArICAgICAgICAiQ291bnRlciI6ICIwLDEsMiwzLDQsNSw2LDciLA0KPiArICAgICAg
ICAiVU1hc2siOiAiMHgyIiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwz
LDQsNSw2LDciLA0KPiArICAgICAgICAiRXZlbnROYW1lIjogIkNQVV9DTEtfVU5IQUxURUQu
RElTVFJJQlVURUQiLA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIyMDAwMDAz
IiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiQ3ljbGUgY291bnRzIGFyZSBl
dmVubHkgZGlzdHJpYnV0ZWQgYmV0d2VlbiBhY3RpdmUgdGhyZWFkcyBpbiB0aGUgQ29yZS4i
DQo+ICsgICAgfQ0KPiArXQ0KPiBcIE5vIG5ld2xpbmUgYXQgZW5kIG9mIGZpbGUNCj4gZGlm
ZiAtLWdpdCBhL3Rvb2xzL3BlcmYvcG11LWV2ZW50cy9hcmNoL3g4Ni9pY2VsYWtlL3ZpcnR1
YWwtbWVtb3J5Lmpzb24gYi90b29scy9wZXJmL3BtdS1ldmVudHMvYXJjaC94ODYvaWNlbGFr
ZS92aXJ0dWFsLW1lbW9yeS5qc29uDQo+IG5ldyBmaWxlIG1vZGUgMTAwNjQ0DQo+IGluZGV4
IDAwMDAwMDAwMDAwMC4uNzE4MGE5MDBjMTc1DQo+IC0tLSAvZGV2L251bGwNCj4gKysrIGIv
dG9vbHMvcGVyZi9wbXUtZXZlbnRzL2FyY2gveDg2L2ljZWxha2UvdmlydHVhbC1tZW1vcnku
anNvbg0KPiBAQCAtMCwwICsxLDIzNiBAQA0KPiArWw0KPiArICAgIHsNCj4gKyAgICAgICAg
IkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAiUHVibGljRGVzY3JpcHRp
b24iOiAiQ291bnRzIHBhZ2Ugd2Fsa3MgY29tcGxldGVkIGR1ZSB0byBkZW1hbmQgZGF0YSBs
b2FkcyB3aG9zZSBhZGRyZXNzIHRyYW5zbGF0aW9ucyBtaXNzZWQgaW4gdGhlIFRMQiBhbmQg
d2VyZSBtYXBwZWQgdG8gNEsgcGFnZXMuICBUaGUgcGFnZSB3YWxrcyBjYW4gZW5kIHdpdGgg
b3Igd2l0aG91dCBhIHBhZ2UgZmF1bHQuIiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIw
eDA4IiwNCj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJV
TWFzayI6ICIweDIiLA0KPiArICAgICAgICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMiLA0K
PiArICAgICAgICAiRXZlbnROYW1lIjogIkRUTEJfTE9BRF9NSVNTRVMuV0FMS19DT01QTEVU
RURfNEsiLA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIyMDAwMDAzIiwNCj4g
KyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiUGFnZSB3YWxrcyBjb21wbGV0ZWQgZHVl
IHRvIGEgZGVtYW5kIGRhdGEgbG9hZCB0byBhIDRLIHBhZ2UuIg0KPiArICAgIH0sDQo+ICsg
ICAgew0KPiArICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAg
ICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJDb3VudHMgcGFnZSB3YWxrcyBjb21wbGV0ZWQgZHVl
IHRvIGRlbWFuZCBkYXRhIGxvYWRzIHdob3NlIGFkZHJlc3MgdHJhbnNsYXRpb25zIG1pc3Nl
ZCBpbiB0aGUgVExCIGFuZCB3ZXJlIG1hcHBlZCB0byAyTS80TSBwYWdlcy4gIFRoZSBwYWdl
IHdhbGtzIGNhbiBlbmQgd2l0aCBvciB3aXRob3V0IGEgcGFnZSBmYXVsdC4iLA0KPiArICAg
ICAgICAiRXZlbnRDb2RlIjogIjB4MDgiLA0KPiArICAgICAgICAiQ291bnRlciI6ICIwLDEs
MiwzIiwNCj4gKyAgICAgICAgIlVNYXNrIjogIjB4NCIsDQo+ICsgICAgICAgICJQRUJTY291
bnRlcnMiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJFdmVudE5hbWUiOiAiRFRMQl9MT0FE
X01JU1NFUy5XQUxLX0NPTVBMRVRFRF8yTV80TSIsDQo+ICsgICAgICAgICJTYW1wbGVBZnRl
clZhbHVlIjogIjIwMDAwMDMiLA0KPiArICAgICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJQ
YWdlIHdhbGtzIGNvbXBsZXRlZCBkdWUgdG8gYSBkZW1hbmQgZGF0YSBsb2FkIHRvIGEgMk0v
NE0gcGFnZS4iDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJDb2xsZWN0UEVC
U1JlY29yZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9uIjogIkNvdW50
cyBkZW1hbmQgZGF0YSBsb2FkcyB0aGF0IGNhdXNlZCBhIGNvbXBsZXRlZCBwYWdlIHdhbGsg
b2YgYW55IHBhZ2Ugc2l6ZSAoNEsvMk0vNE0vMUcpLiBUaGlzIGltcGxpZXMgaXQgbWlzc2Vk
IGluIGFsbCBUTEIgbGV2ZWxzLiBUaGUgcGFnZSB3YWxrIGNhbiBlbmQgd2l0aCBvciB3aXRo
b3V0IGEgZmF1bHQuIiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIweDA4IiwNCj4gKyAg
ICAgICAgIkNvdW50ZXIiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJVTWFzayI6ICIweGUi
LA0KPiArICAgICAgICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMiLA0KPiArICAgICAgICAi
RXZlbnROYW1lIjogIkRUTEJfTE9BRF9NSVNTRVMuV0FMS19DT01QTEVURUQiLA0KPiArICAg
ICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIxMDAwMDMiLA0KPiArICAgICAgICAiQnJpZWZE
ZXNjcmlwdGlvbiI6ICJMb2FkIG1pc3MgaW4gYWxsIFRMQiBsZXZlbHMgY2F1c2VzIGEgcGFn
ZSB3YWxrIHRoYXQgY29tcGxldGVzLiAoQWxsIHBhZ2Ugc2l6ZXMpIg0KPiArICAgIH0sDQo+
ICsgICAgew0KPiArICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAg
ICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJDb3VudHMgdGhlIG51bWJlciBvZiBwYWdlIHdh
bGtzIG91dHN0YW5kaW5nIGZvciBhIGRlbWFuZCBsb2FkIGluIHRoZSBQTUggKFBhZ2UgTWlz
cyBIYW5kbGVyKSBlYWNoIGN5Y2xlLiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHgw
OCIsDQo+ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMiLA0KPiArICAgICAgICAiVU1h
c2siOiAiMHgxMCIsDQo+ICsgICAgICAgICJQRUJTY291bnRlcnMiOiAiMCwxLDIsMyIsDQo+
ICsgICAgICAgICJFdmVudE5hbWUiOiAiRFRMQl9MT0FEX01JU1NFUy5XQUxLX1BFTkRJTkci
LA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIyMDAwMDAzIiwNCj4gKyAgICAg
ICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiTnVtYmVyIG9mIHBhZ2Ugd2Fsa3Mgb3V0c3RhbmRp
bmcgZm9yIGEgZGVtYW5kIGxvYWQgaW4gdGhlIFBNSCBlYWNoIGN5Y2xlLiINCj4gKyAgICB9
LA0KPiArICAgIHsNCj4gKyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiAr
ICAgICAgICAiUHVibGljRGVzY3JpcHRpb24iOiAiQ291bnRzIGN5Y2xlcyB3aGVuIGF0IGxl
YXN0IG9uZSBQTUggKFBhZ2UgTWlzcyBIYW5kbGVyKSBpcyBidXN5IHdpdGggYSBwYWdlIHdh
bGsgZm9yIGEgZGVtYW5kIGxvYWQuIiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIweDA4
IiwNCj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJVTWFz
ayI6ICIweDEwIiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzIiwNCj4g
KyAgICAgICAgIkV2ZW50TmFtZSI6ICJEVExCX0xPQURfTUlTU0VTLldBTEtfQUNUSVZFIiwN
Cj4gKyAgICAgICAgIlNhbXBsZUFmdGVyVmFsdWUiOiAiMTAwMDAzIiwNCj4gKyAgICAgICAg
IkJyaWVmRGVzY3JpcHRpb24iOiAiQ3ljbGVzIHdoZW4gYXQgbGVhc3Qgb25lIFBNSCBpcyBi
dXN5IHdpdGggYSBwYWdlIHdhbGsgZm9yIGEgZGVtYW5kIGxvYWQuIiwNCj4gKyAgICAgICAg
IkNvdW50ZXJNYXNrIjogIjEiDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJD
b2xsZWN0UEVCU1JlY29yZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9u
IjogIkNvdW50cyBsb2FkcyB0aGF0IG1pc3MgdGhlIERUTEIgKERhdGEgVExCKSBhbmQgaGl0
IHRoZSBTVExCIChTZWNvbmQgbGV2ZWwgVExCKS4iLA0KPiArICAgICAgICAiRXZlbnRDb2Rl
IjogIjB4MDgiLA0KPiArICAgICAgICAiQ291bnRlciI6ICIwLDEsMiwzIiwNCj4gKyAgICAg
ICAgIlVNYXNrIjogIjB4MjAiLA0KPiArICAgICAgICAiUEVCU2NvdW50ZXJzIjogIjAsMSwy
LDMiLA0KPiArICAgICAgICAiRXZlbnROYW1lIjogIkRUTEJfTE9BRF9NSVNTRVMuU1RMQl9I
SVQiLA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIyMDAwMDAzIiwNCj4gKyAg
ICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiTG9hZHMgdGhhdCBtaXNzIHRoZSBEVExCIGFu
ZCBoaXQgdGhlIFNUTEIuIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAiQ29s
bGVjdFBFQlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6
ICJDb3VudHMgcGFnZSB3YWxrcyBjb21wbGV0ZWQgZHVlIHRvIGRlbWFuZCBkYXRhIHN0b3Jl
cyB3aG9zZSBhZGRyZXNzIHRyYW5zbGF0aW9ucyBtaXNzZWQgaW4gdGhlIFRMQiBhbmQgd2Vy
ZSBtYXBwZWQgdG8gNEsgcGFnZXMuICBUaGUgcGFnZSB3YWxrcyBjYW4gZW5kIHdpdGggb3Ig
d2l0aG91dCBhIHBhZ2UgZmF1bHQuIiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIweDQ5
IiwNCj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJVTWFz
ayI6ICIweDIiLA0KPiArICAgICAgICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMiLA0KPiAr
ICAgICAgICAiRXZlbnROYW1lIjogIkRUTEJfU1RPUkVfTUlTU0VTLldBTEtfQ09NUExFVEVE
XzRLIiwNCj4gKyAgICAgICAgIlNhbXBsZUFmdGVyVmFsdWUiOiAiMTAwMDAzIiwNCj4gKyAg
ICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiUGFnZSB3YWxrcyBjb21wbGV0ZWQgZHVlIHRv
IGEgZGVtYW5kIGRhdGEgc3RvcmUgdG8gYSA0SyBwYWdlLiINCj4gKyAgICB9LA0KPiArICAg
IHsNCj4gKyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAi
UHVibGljRGVzY3JpcHRpb24iOiAiQ291bnRzIHBhZ2Ugd2Fsa3MgY29tcGxldGVkIGR1ZSB0
byBkZW1hbmQgZGF0YSBzdG9yZXMgd2hvc2UgYWRkcmVzcyB0cmFuc2xhdGlvbnMgbWlzc2Vk
IGluIHRoZSBUTEIgYW5kIHdlcmUgbWFwcGVkIHRvIDJNLzRNIHBhZ2VzLiAgVGhlIHBhZ2Ug
d2Fsa3MgY2FuIGVuZCB3aXRoIG9yIHdpdGhvdXQgYSBwYWdlIGZhdWx0LiIsDQo+ICsgICAg
ICAgICJFdmVudENvZGUiOiAiMHg0OSIsDQo+ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwy
LDMiLA0KPiArICAgICAgICAiVU1hc2siOiAiMHg0IiwNCj4gKyAgICAgICAgIlBFQlNjb3Vu
dGVycyI6ICIwLDEsMiwzIiwNCj4gKyAgICAgICAgIkV2ZW50TmFtZSI6ICJEVExCX1NUT1JF
X01JU1NFUy5XQUxLX0NPTVBMRVRFRF8yTV80TSIsDQo+ICsgICAgICAgICJTYW1wbGVBZnRl
clZhbHVlIjogIjEwMDAwMyIsDQo+ICsgICAgICAgICJCcmllZkRlc2NyaXB0aW9uIjogIlBh
Z2Ugd2Fsa3MgY29tcGxldGVkIGR1ZSB0byBhIGRlbWFuZCBkYXRhIHN0b3JlIHRvIGEgMk0v
NE0gcGFnZS4iDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJDb2xsZWN0UEVC
U1JlY29yZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9uIjogIkNvdW50
cyBkZW1hbmQgZGF0YSBzdG9yZXMgdGhhdCBjYXVzZWQgYSBjb21wbGV0ZWQgcGFnZSB3YWxr
IG9mIGFueSBwYWdlIHNpemUgKDRLLzJNLzRNLzFHKS4gVGhpcyBpbXBsaWVzIGl0IG1pc3Nl
ZCBpbiBhbGwgVExCIGxldmVscy4gVGhlIHBhZ2Ugd2FsayBjYW4gZW5kIHdpdGggb3Igd2l0
aG91dCBhIGZhdWx0LiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHg0OSIsDQo+ICsg
ICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMiLA0KPiArICAgICAgICAiVU1hc2siOiAiMHhl
IiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzIiwNCj4gKyAgICAgICAg
IkV2ZW50TmFtZSI6ICJEVExCX1NUT1JFX01JU1NFUy5XQUxLX0NPTVBMRVRFRCIsDQo+ICsg
ICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjEwMDAwMyIsDQo+ICsgICAgICAgICJCcmll
ZkRlc2NyaXB0aW9uIjogIlN0b3JlIG1pc3NlcyBpbiBhbGwgVExCIGxldmVscyBjYXVzZXMg
YSBwYWdlIHdhbGsgdGhhdCBjb21wbGV0ZXMuIChBbGwgcGFnZSBzaXplcykiDQo+ICsgICAg
fSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJDb2xsZWN0UEVCU1JlY29yZCI6ICIyIiwNCj4g
KyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9uIjogIkNvdW50cyB0aGUgbnVtYmVyIG9mIHBh
Z2Ugd2Fsa3Mgb3V0c3RhbmRpbmcgZm9yIGEgc3RvcmUgaW4gdGhlIFBNSCAoUGFnZSBNaXNz
IEhhbmRsZXIpIGVhY2ggY3ljbGUuIiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIweDQ5
IiwNCj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJVTWFz
ayI6ICIweDEwIiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzIiwNCj4g
KyAgICAgICAgIkV2ZW50TmFtZSI6ICJEVExCX1NUT1JFX01JU1NFUy5XQUxLX1BFTkRJTkci
LA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIyMDAwMDAzIiwNCj4gKyAgICAg
ICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiTnVtYmVyIG9mIHBhZ2Ugd2Fsa3Mgb3V0c3RhbmRp
bmcgZm9yIGEgc3RvcmUgaW4gdGhlIFBNSCBlYWNoIGN5Y2xlLiINCj4gKyAgICB9LA0KPiAr
ICAgIHsNCj4gKyAgICAgICAgIkNvbGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAg
ICAiUHVibGljRGVzY3JpcHRpb24iOiAiQ291bnRzIGN5Y2xlcyB3aGVuIGF0IGxlYXN0IG9u
ZSBQTUggKFBhZ2UgTWlzcyBIYW5kbGVyKSBpcyBidXN5IHdpdGggYSBwYWdlIHdhbGsgZm9y
IGEgc3RvcmUuIiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIweDQ5IiwNCj4gKyAgICAg
ICAgIkNvdW50ZXIiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJVTWFzayI6ICIweDEwIiwN
Cj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwzIiwNCj4gKyAgICAgICAgIkV2
ZW50TmFtZSI6ICJEVExCX1NUT1JFX01JU1NFUy5XQUxLX0FDVElWRSIsDQo+ICsgICAgICAg
ICJTYW1wbGVBZnRlclZhbHVlIjogIjEwMDAwMyIsDQo+ICsgICAgICAgICJCcmllZkRlc2Ny
aXB0aW9uIjogIkN5Y2xlcyB3aGVuIGF0IGxlYXN0IG9uZSBQTUggaXMgYnVzeSB3aXRoIGEg
cGFnZSB3YWxrIGZvciBhIHN0b3JlLiIsDQo+ICsgICAgICAgICJDb3VudGVyTWFzayI6ICIx
Ig0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQi
OiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJDb3VudHMgc3RvcmVz
IHRoYXQgbWlzcyB0aGUgRFRMQiAoRGF0YSBUTEIpIGFuZCBoaXQgdGhlIFNUTEIgKDJuZCBM
ZXZlbCBUTEIpLiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAiMHg0OSIsDQo+ICsgICAg
ICAgICJDb3VudGVyIjogIjAsMSwyLDMiLA0KPiArICAgICAgICAiVU1hc2siOiAiMHgyMCIs
DQo+ICsgICAgICAgICJQRUJTY291bnRlcnMiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJF
dmVudE5hbWUiOiAiRFRMQl9TVE9SRV9NSVNTRVMuU1RMQl9ISVQiLA0KPiArICAgICAgICAi
U2FtcGxlQWZ0ZXJWYWx1ZSI6ICIxMDAwMDMiLA0KPiArICAgICAgICAiQnJpZWZEZXNjcmlw
dGlvbiI6ICJTdG9yZXMgdGhhdCBtaXNzIHRoZSBEVExCIGFuZCBoaXQgdGhlIFNUTEIuIg0K
PiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQiOiAi
MiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJDb3VudHMgY29tcGxldGVk
IHBhZ2Ugd2Fsa3MgKDRLIHBhZ2Ugc2l6ZSkgY2F1c2VkIGJ5IGEgY29kZSBmZXRjaC4gVGhp
cyBpbXBsaWVzIGl0IG1pc3NlZCBpbiB0aGUgSVRMQiBhbmQgZnVydGhlciBsZXZlbHMgb2Yg
VExCLiBUaGUgcGFnZSB3YWxrIGNhbiBlbmQgd2l0aCBvciB3aXRob3V0IGEgZmF1bHQuIiwN
Cj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIweDg1IiwNCj4gKyAgICAgICAgIkNvdW50ZXIi
OiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJVTWFzayI6ICIweDIiLA0KPiArICAgICAgICAi
UEVCU2NvdW50ZXJzIjogIjAsMSwyLDMiLA0KPiArICAgICAgICAiRXZlbnROYW1lIjogIklU
TEJfTUlTU0VTLldBTEtfQ09NUExFVEVEXzRLIiwNCj4gKyAgICAgICAgIlNhbXBsZUFmdGVy
VmFsdWUiOiAiMTAwMDAzIiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiQ29k
ZSBtaXNzIGluIGFsbCBUTEIgbGV2ZWxzIGNhdXNlcyBhIHBhZ2Ugd2FsayB0aGF0IGNvbXBs
ZXRlcy4gKDRLKSINCj4gKyAgICB9LA0KPiArICAgIHsNCj4gKyAgICAgICAgIkNvbGxlY3RQ
RUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAiUHVibGljRGVzY3JpcHRpb24iOiAiQ291
bnRzIGNvZGUgbWlzc2VzIGluIGFsbCBJVExCIChJbnN0cnVjdGlvbiBUTEIpIGxldmVscyB0
aGF0IGNhdXNlZCBhIGNvbXBsZXRlZCBwYWdlIHdhbGsgKDJNIGFuZCA0TSBwYWdlIHNpemVz
KS4gVGhlIHBhZ2Ugd2FsayBjYW4gZW5kIHdpdGggb3Igd2l0aG91dCBhIGZhdWx0LiIsDQo+
ICsgICAgICAgICJFdmVudENvZGUiOiAiMHg4NSIsDQo+ICsgICAgICAgICJDb3VudGVyIjog
IjAsMSwyLDMiLA0KPiArICAgICAgICAiVU1hc2siOiAiMHg0IiwNCj4gKyAgICAgICAgIlBF
QlNjb3VudGVycyI6ICIwLDEsMiwzIiwNCj4gKyAgICAgICAgIkV2ZW50TmFtZSI6ICJJVExC
X01JU1NFUy5XQUxLX0NPTVBMRVRFRF8yTV80TSIsDQo+ICsgICAgICAgICJTYW1wbGVBZnRl
clZhbHVlIjogIjEwMDAwMyIsDQo+ICsgICAgICAgICJCcmllZkRlc2NyaXB0aW9uIjogIkNv
ZGUgbWlzcyBpbiBhbGwgVExCIGxldmVscyBjYXVzZXMgYSBwYWdlIHdhbGsgdGhhdCBjb21w
bGV0ZXMuICgyTS80TSkiDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJDb2xs
ZWN0UEVCU1JlY29yZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9uIjog
IkNvdW50cyBjb21wbGV0ZWQgcGFnZSB3YWxrcyAoMk0gYW5kIDRNIHBhZ2Ugc2l6ZXMpIGNh
dXNlZCBieSBhIGNvZGUgZmV0Y2guIFRoaXMgaW1wbGllcyBpdCBtaXNzZWQgaW4gdGhlIElU
TEIgKEluc3RydWN0aW9uIFRMQikgYW5kIGZ1cnRoZXIgbGV2ZWxzIG9mIFRMQi4gVGhlIHBh
Z2Ugd2FsayBjYW4gZW5kIHdpdGggb3Igd2l0aG91dCBhIGZhdWx0LiIsDQo+ICsgICAgICAg
ICJFdmVudENvZGUiOiAiMHg4NSIsDQo+ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMi
LA0KPiArICAgICAgICAiVU1hc2siOiAiMHhlIiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVy
cyI6ICIwLDEsMiwzIiwNCj4gKyAgICAgICAgIkV2ZW50TmFtZSI6ICJJVExCX01JU1NFUy5X
QUxLX0NPTVBMRVRFRCIsDQo+ICsgICAgICAgICJTYW1wbGVBZnRlclZhbHVlIjogIjEwMDAw
MyIsDQo+ICsgICAgICAgICJCcmllZkRlc2NyaXB0aW9uIjogIkNvZGUgbWlzcyBpbiBhbGwg
VExCIGxldmVscyBjYXVzZXMgYSBwYWdlIHdhbGsgdGhhdCBjb21wbGV0ZXMuIChBbGwgcGFn
ZSBzaXplcykiDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJDb2xsZWN0UEVC
U1JlY29yZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9uIjogIkNvdW50
cyB0aGUgbnVtYmVyIG9mIHBhZ2Ugd2Fsa3Mgb3V0c3RhbmRpbmcgZm9yIGFuIG91dHN0YW5k
aW5nIGNvZGUgKGluc3RydWN0aW9uIGZldGNoKSByZXF1ZXN0IGluIHRoZSBQTUggKFBhZ2Ug
TWlzcyBIYW5kbGVyKSBlYWNoIGN5Y2xlLiIsDQo+ICsgICAgICAgICJFdmVudENvZGUiOiAi
MHg4NSIsDQo+ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMiLA0KPiArICAgICAgICAi
VU1hc2siOiAiMHgxMCIsDQo+ICsgICAgICAgICJQRUJTY291bnRlcnMiOiAiMCwxLDIsMyIs
DQo+ICsgICAgICAgICJFdmVudE5hbWUiOiAiSVRMQl9NSVNTRVMuV0FMS19QRU5ESU5HIiwN
Cj4gKyAgICAgICAgIlNhbXBsZUFmdGVyVmFsdWUiOiAiMTAwMDAzIiwNCj4gKyAgICAgICAg
IkJyaWVmRGVzY3JpcHRpb24iOiAiTnVtYmVyIG9mIHBhZ2Ugd2Fsa3Mgb3V0c3RhbmRpbmcg
Zm9yIGFuIG91dHN0YW5kaW5nIGNvZGUgcmVxdWVzdCBpbiB0aGUgUE1IIGVhY2ggY3ljbGUu
Ig0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAiQ29sbGVjdFBFQlNSZWNvcmQi
OiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJDb3VudHMgY3ljbGVz
IHdoZW4gYXQgbGVhc3Qgb25lIFBNSCAoUGFnZSBNaXNzIEhhbmRsZXIpIGlzIGJ1c3kgd2l0
aCBhIHBhZ2Ugd2FsayBmb3IgYSBjb2RlIChpbnN0cnVjdGlvbiBmZXRjaCkgcmVxdWVzdC4i
LA0KPiArICAgICAgICAiRXZlbnRDb2RlIjogIjB4ODUiLA0KPiArICAgICAgICAiQ291bnRl
ciI6ICIwLDEsMiwzIiwNCj4gKyAgICAgICAgIlVNYXNrIjogIjB4MTAiLA0KPiArICAgICAg
ICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMiLA0KPiArICAgICAgICAiRXZlbnROYW1lIjog
IklUTEJfTUlTU0VTLldBTEtfQUNUSVZFIiwNCj4gKyAgICAgICAgIlNhbXBsZUFmdGVyVmFs
dWUiOiAiMTAwMDAzIiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiQ3ljbGVz
IHdoZW4gYXQgbGVhc3Qgb25lIFBNSCBpcyBidXN5IHdpdGggYSBwYWdlIHdhbGsgZm9yIGNv
ZGUgKGluc3RydWN0aW9uIGZldGNoKSByZXF1ZXN0LiIsDQo+ICsgICAgICAgICJDb3VudGVy
TWFzayI6ICIxIg0KPiArICAgIH0sDQo+ICsgICAgew0KPiArICAgICAgICAiQ29sbGVjdFBF
QlNSZWNvcmQiOiAiMiIsDQo+ICsgICAgICAgICJQdWJsaWNEZXNjcmlwdGlvbiI6ICJDb3Vu
dHMgaW5zdHJ1Y3Rpb24gZmV0Y2ggcmVxdWVzdHMgdGhhdCBtaXNzIHRoZSBJVExCIChJbnN0
cnVjdGlvbiBUTEIpIGFuZCBoaXQgdGhlIFNUTEIgKFNlY29uZC1sZXZlbCBUTEIpLiIsDQo+
ICsgICAgICAgICJFdmVudENvZGUiOiAiMHg4NSIsDQo+ICsgICAgICAgICJDb3VudGVyIjog
IjAsMSwyLDMiLA0KPiArICAgICAgICAiVU1hc2siOiAiMHgyMCIsDQo+ICsgICAgICAgICJQ
RUJTY291bnRlcnMiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJFdmVudE5hbWUiOiAiSVRM
Ql9NSVNTRVMuU1RMQl9ISVQiLA0KPiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIx
MDAwMDMiLA0KPiArICAgICAgICAiQnJpZWZEZXNjcmlwdGlvbiI6ICJJbnN0cnVjdGlvbiBm
ZXRjaCByZXF1ZXN0cyB0aGF0IG1pc3MgdGhlIElUTEIgYW5kIGhpdCB0aGUgU1RMQi4iDQo+
ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAgICAgICJDb2xsZWN0UEVCU1JlY29yZCI6ICIy
IiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2NyaXB0aW9uIjogIkNvdW50cyB0aGUgbnVtYmVy
IG9mIGZsdXNoZXMgb2YgdGhlIGJpZyBvciBzbWFsbCBJVExCIHBhZ2VzLiBDb3VudGluZyBp
bmNsdWRlIGJvdGggVExCIEZsdXNoIChjb3ZlcmluZyBhbGwgc2V0cykgYW5kIFRMQiBTZXQg
Q2xlYXIgKHNldC1zcGVjaWZpYykuIiwNCj4gKyAgICAgICAgIkV2ZW50Q29kZSI6ICIweEFF
IiwNCj4gKyAgICAgICAgIkNvdW50ZXIiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJVTWFz
ayI6ICIweDEiLA0KPiArICAgICAgICAiUEVCU2NvdW50ZXJzIjogIjAsMSwyLDMiLA0KPiAr
ICAgICAgICAiRXZlbnROYW1lIjogIklUTEIuSVRMQl9GTFVTSCIsDQo+ICsgICAgICAgICJT
YW1wbGVBZnRlclZhbHVlIjogIjEwMDAwNyIsDQo+ICsgICAgICAgICJCcmllZkRlc2NyaXB0
aW9uIjogIkZsdXNoaW5nIG9mIHRoZSBJbnN0cnVjdGlvbiBUTEIgKElUTEIpIHBhZ2VzLCBp
bmNsdWRlcyA0ay8yTS80TSBwYWdlcy4iDQo+ICsgICAgfSwNCj4gKyAgICB7DQo+ICsgICAg
ICAgICJDb2xsZWN0UEVCU1JlY29yZCI6ICIyIiwNCj4gKyAgICAgICAgIlB1YmxpY0Rlc2Ny
aXB0aW9uIjogIkNvdW50cyB0aGUgbnVtYmVyIG9mIERUTEIgZmx1c2ggYXR0ZW1wdHMgb2Yg
dGhlIHRocmVhZC1zcGVjaWZpYyBlbnRyaWVzLiIsDQo+ICsgICAgICAgICJFdmVudENvZGUi
OiAiMHhCRCIsDQo+ICsgICAgICAgICJDb3VudGVyIjogIjAsMSwyLDMiLA0KPiArICAgICAg
ICAiVU1hc2siOiAiMHgxIiwNCj4gKyAgICAgICAgIlBFQlNjb3VudGVycyI6ICIwLDEsMiwz
IiwNCj4gKyAgICAgICAgIkV2ZW50TmFtZSI6ICJUTEJfRkxVU0guRFRMQl9USFJFQUQiLA0K
PiArICAgICAgICAiU2FtcGxlQWZ0ZXJWYWx1ZSI6ICIxMDAwMDciLA0KPiArICAgICAgICAi
QnJpZWZEZXNjcmlwdGlvbiI6ICJEVExCIGZsdXNoIGF0dGVtcHRzIG9mIHRoZSB0aHJlYWQt
c3BlY2lmaWMgZW50cmllcyINCj4gKyAgICB9LA0KPiArICAgIHsNCj4gKyAgICAgICAgIkNv
bGxlY3RQRUJTUmVjb3JkIjogIjIiLA0KPiArICAgICAgICAiUHVibGljRGVzY3JpcHRpb24i
OiAiQ291bnRzIHRoZSBudW1iZXIgb2YgYW55IFNUTEIgZmx1c2ggYXR0ZW1wdHMgKHN1Y2gg
YXMgZW50aXJlLCBWUElELCBQQ0lELCBJbnZQYWdlLCBDUjMgd3JpdGUsIGV0Yy4pLiIsDQo+
ICsgICAgICAgICJFdmVudENvZGUiOiAiMHhCRCIsDQo+ICsgICAgICAgICJDb3VudGVyIjog
IjAsMSwyLDMiLA0KPiArICAgICAgICAiVU1hc2siOiAiMHgyMCIsDQo+ICsgICAgICAgICJQ
RUJTY291bnRlcnMiOiAiMCwxLDIsMyIsDQo+ICsgICAgICAgICJFdmVudE5hbWUiOiAiVExC
X0ZMVVNILlNUTEJfQU5ZIiwNCj4gKyAgICAgICAgIlNhbXBsZUFmdGVyVmFsdWUiOiAiMTAw
MDA3IiwNCj4gKyAgICAgICAgIkJyaWVmRGVzY3JpcHRpb24iOiAiU1RMQiBmbHVzaCBhdHRl
bXB0cyINCj4gKyAgICB9DQo+ICtdDQo+IFwgTm8gbmV3bGluZSBhdCBlbmQgb2YgZmlsZQ0K
PiBkaWZmIC0tZ2l0IGEvdG9vbHMvcGVyZi9wbXUtZXZlbnRzL2FyY2gveDg2L21hcGZpbGUu
Y3N2IGIvdG9vbHMvcGVyZi9wbXUtZXZlbnRzL2FyY2gveDg2L21hcGZpbGUuY3N2DQo+IGlu
ZGV4IGQ2OTg0YTMwMTdlMC4uYjkwZTVmZWMyZjMyIDEwMDY0NA0KPiAtLS0gYS90b29scy9w
ZXJmL3BtdS1ldmVudHMvYXJjaC94ODYvbWFwZmlsZS5jc3YNCj4gKysrIGIvdG9vbHMvcGVy
Zi9wbXUtZXZlbnRzL2FyY2gveDg2L21hcGZpbGUuY3N2DQo+IEBAIC0zMyw0ICszMyw2IEBA
IEdlbnVpbmVJbnRlbC02LTI1LHYyLHdlc3RtZXJlZXAtc3AsY29yZQ0KPiAgIEdlbnVpbmVJ
bnRlbC02LTJGLHYyLHdlc3RtZXJlZXgsY29yZQ0KPiAgIEdlbnVpbmVJbnRlbC02LTU1LVsw
MTIzNF0sdjEsc2t5bGFrZXgsY29yZQ0KPiAgIEdlbnVpbmVJbnRlbC02LTU1LVs1Njc4OUFC
Q0RFRl0sdjEsY2FzY2FkZWxha2V4LGNvcmUNCj4gK0dlbnVpbmVJbnRlbC02LTdELHYxLGlj
ZWxha2UsY29yZQ0KPiArR2VudWluZUludGVsLTYtN0UsdjEsaWNlbGFrZSxjb3JlDQo+ICAg
QXV0aGVudGljQU1ELTIzLVtbOnhkaWdpdDpdXSssdjEsYW1kZmFtMTdoLGNvcmUNCj4gDQoN
Cg==
--------------B6D82FEC6D7B90C545327241
Content-Type: text/x-patch;
 name="0001-perf-vendor-events-Add-Icelake-V1.00-event-file.patch"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: attachment;
 filename*0="0001-perf-vendor-events-Add-Icelake-V1.00-event-file.patch"

=46rom e87c547be14f42434b2a8c8f7f207a6036f033db Mon Sep 17 00:00:00 2001
From: Haiyan Song <haiyanx.song@intel.com>
Date: Wed, 12 Jun 2019 16:15:42 +0800
Subject: [PATCH v2] perf vendor events: Add Icelake V1.00 event file

Add a Intel event file for perf.

Signed-off-by: Haiyan Song <haiyanx.song@intel.com>
---
 tools/perf/pmu-events/arch/x86/icelake/cache.json  | 552 +++++++++++++
 .../arch/x86/icelake/floating-point.json           | 102 +++
 .../perf/pmu-events/arch/x86/icelake/frontend.json | 424 ++++++++++
 tools/perf/pmu-events/arch/x86/icelake/memory.json | 410 ++++++++++
 tools/perf/pmu-events/arch/x86/icelake/other.json  | 121 +++
 .../perf/pmu-events/arch/x86/icelake/pipeline.json | 892 +++++++++++++++=
++++++
 .../arch/x86/icelake/virtual-memory.json           | 236 ++++++
 tools/perf/pmu-events/arch/x86/mapfile.csv         |   2 +
 8 files changed, 2739 insertions(+)
 create mode 100644 tools/perf/pmu-events/arch/x86/icelake/cache.json
 create mode 100644 tools/perf/pmu-events/arch/x86/icelake/floating-point=
=2Ejson
 create mode 100644 tools/perf/pmu-events/arch/x86/icelake/frontend.json
 create mode 100644 tools/perf/pmu-events/arch/x86/icelake/memory.json
 create mode 100644 tools/perf/pmu-events/arch/x86/icelake/other.json
 create mode 100644 tools/perf/pmu-events/arch/x86/icelake/pipeline.json
 create mode 100644 tools/perf/pmu-events/arch/x86/icelake/virtual-memory=
=2Ejson

diff --git a/tools/perf/pmu-events/arch/x86/icelake/cache.json b/tools/pe=
rf/pmu-events/arch/x86/icelake/cache.json
new file mode 100644
index 000000000000..3529fc338c17
--- /dev/null
+++ b/tools/perf/pmu-events/arch/x86/icelake/cache.json
@@ -0,0 +1,552 @@
+[
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of demand Data Read requ=
ests that miss L2 cache. Only not rejected loads are counted.",
+        "EventCode": "0x24",
+        "Counter": "0,1,2,3",
+        "UMask": "0x21",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "L2_RQSTS.DEMAND_DATA_RD_MISS",
+        "SampleAfterValue": "200003",
+        "BriefDescription": "Demand Data Read miss L2, no rejects"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the RFO (Read-for-Ownership) reques=
ts that miss L2 cache.",
+        "EventCode": "0x24",
+        "Counter": "0,1,2,3",
+        "UMask": "0x22",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "L2_RQSTS.RFO_MISS",
+        "SampleAfterValue": "200003",
+        "BriefDescription": "RFO requests that miss L2 cache"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts L2 cache misses when fetching instr=
uctions.",
+        "EventCode": "0x24",
+        "Counter": "0,1,2,3",
+        "UMask": "0x24",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "L2_RQSTS.CODE_RD_MISS",
+        "SampleAfterValue": "200003",
+        "BriefDescription": "L2 cache misses when fetching instructions"=

+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts demand requests that miss L2 cache.=
",
+        "EventCode": "0x24",
+        "Counter": "0,1,2,3",
+        "UMask": "0x27",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "L2_RQSTS.ALL_DEMAND_MISS",
+        "SampleAfterValue": "200003",
+        "BriefDescription": "Demand requests that miss L2 cache"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts Software prefetch requests that mis=
s the L2 cache. This event accounts for PREFETCHNTA and PREFETCHT0/1/2 in=
structions.",
+        "EventCode": "0x24",
+        "Counter": "0,1,2,3",
+        "UMask": "0x28",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "L2_RQSTS.SWPF_MISS",
+        "SampleAfterValue": "200003",
+        "BriefDescription": "SW prefetch requests that miss L2 cache."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of demand Data Read requ=
ests initiated by load instructions that hit L2 cache.",
+        "EventCode": "0x24",
+        "Counter": "0,1,2,3",
+        "UMask": "0xc1",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "L2_RQSTS.DEMAND_DATA_RD_HIT",
+        "SampleAfterValue": "200003",
+        "BriefDescription": "Demand Data Read requests that hit L2 cache=
"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the RFO (Read-for-Ownership) reques=
ts that hit L2 cache.",
+        "EventCode": "0x24",
+        "Counter": "0,1,2,3",
+        "UMask": "0xc2",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "L2_RQSTS.RFO_HIT",
+        "SampleAfterValue": "200003",
+        "BriefDescription": "RFO requests that hit L2 cache"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts L2 cache hits when fetching instruc=
tions, code reads.",
+        "EventCode": "0x24",
+        "Counter": "0,1,2,3",
+        "UMask": "0xc4",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "L2_RQSTS.CODE_RD_HIT",
+        "SampleAfterValue": "200003",
+        "BriefDescription": "L2 cache hits when fetching instructions, c=
ode reads."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts Software prefetch requests that hit=
 the L2 cache. This event accounts for PREFETCHNTA and PREFETCHT0/1/2 ins=
tructions.",
+        "EventCode": "0x24",
+        "Counter": "0,1,2,3",
+        "UMask": "0xc8",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "L2_RQSTS.SWPF_HIT",
+        "SampleAfterValue": "200003",
+        "BriefDescription": "SW prefetch requests that hit L2 cache."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of demand Data Read requ=
ests (including requests from L1D hardware prefetchers). These loads may =
hit or miss L2 cache. Only non rejected loads are counted.",
+        "EventCode": "0x24",
+        "Counter": "0,1,2,3",
+        "UMask": "0xe1",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "L2_RQSTS.ALL_DEMAND_DATA_RD",
+        "SampleAfterValue": "200003",
+        "BriefDescription": "Demand Data Read requests"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the total number of RFO (read for o=
wnership) requests to L2 cache. L2 RFO requests include both L1D demand R=
FO misses as well as L1D RFO prefetches.",
+        "EventCode": "0x24",
+        "Counter": "0,1,2,3",
+        "UMask": "0xe2",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "L2_RQSTS.ALL_RFO",
+        "SampleAfterValue": "200003",
+        "BriefDescription": "RFO requests to L2 cache"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the total number of L2 code request=
s.",
+        "EventCode": "0x24",
+        "Counter": "0,1,2,3",
+        "UMask": "0xe4",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "L2_RQSTS.ALL_CODE_RD",
+        "SampleAfterValue": "200003",
+        "BriefDescription": "L2 code requests"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts demand requests to L2 cache.",
+        "EventCode": "0x24",
+        "Counter": "0,1,2,3",
+        "UMask": "0xe7",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "L2_RQSTS.ALL_DEMAND_REFERENCES",
+        "SampleAfterValue": "200003",
+        "BriefDescription": "Demand requests to L2 cache"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts number of L1D misses that are outst=
anding in each cycle, that is each cycle the number of Fill Buffers (FB) =
outstanding required by Demand Reads. FB either is held by demand loads, =
or it is held by non-demand loads and gets hit at least once by demand. T=
he valid outstanding interval is defined until the FB deallocation by one=
 of the following ways: from FB allocation, if FB is allocated by demand =
from the demand Hit FB, if it is allocated by hardware or software prefet=
ch. Note: In the L1D, a Demand Read contains cacheable or noncacheable de=
mand loads, including ones causing cache-line splits and reads due to pag=
e walks resulted from any request type.",
+        "EventCode": "0x48",
+        "Counter": "0,1,2,3",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "L1D_PEND_MISS.PENDING",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of L1D misses that are outstanding"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts duration of L1D miss outstanding in=
 cycles.",
+        "EventCode": "0x48",
+        "Counter": "0,1,2,3",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "L1D_PEND_MISS.PENDING_CYCLES",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Cycles with L1D load Misses outstanding.",
+        "CounterMask": "1"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts number of cycles a demand request h=
as waited due to L1D Fill Buffer (FB) unavailablability. Demand requests =
include cacheable/uncacheable demand load, store, lock or SW prefetch acc=
esses.",
+        "EventCode": "0x48",
+        "Counter": "0,1,2,3",
+        "UMask": "0x2",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "L1D_PEND_MISS.FB_FULL",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of cycles a demand request has waite=
d due to L1D Fill Buffer (FB) unavailablability."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts number of phases a demand request h=
as waited due to L1D Fill Buffer (FB) unavailablability. Demand requests =
include cacheable/uncacheable demand load, store, lock or SW prefetch acc=
esses.",
+        "EventCode": "0x48",
+        "Counter": "0,1,2,3",
+        "UMask": "0x2",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "L1D_PEND_MISS.FB_FULL_PERIODS",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of phases a demand request has waite=
d due to L1D Fill Buffer (FB) unavailablability.",
+        "CounterMask": "1",
+        "EdgeDetect": "1"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts number of cycles a demand request h=
as waited due to L1D due to lack of L2 resources. Demand requests include=
 cacheable/uncacheable demand load, store, lock or SW prefetch accesses."=
,
+        "EventCode": "0x48",
+        "Counter": "0,1,2,3",
+        "UMask": "0x4",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "L1D_PEND_MISS.L2_STALL",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of cycles a demand request has waite=
d due to L1D due to lack of L2 resources."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts L1D data line replacements includin=
g opportunistic replacements, and replacements that require stall-for-rep=
lace or block-for-replace.",
+        "EventCode": "0x51",
+        "Counter": "0,1,2,3",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "L1D.REPLACEMENT",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Counts the number of cache lines replaced i=
n L1 data cache."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of offcore outstanding d=
emand rfo Reads transactions in the super queue every cycle. The 'Offcore=
 outstanding' state of the transaction lasts from the L2 miss until the s=
ending transaction completion to requestor (SQ deallocation). See the cor=
responding Umask under OFFCORE_REQUESTS.",
+        "EventCode": "0x60",
+        "Counter": "0,1,2,3",
+        "UMask": "0x4",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_RF=
O",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Cycles with offcore outstanding demand rfo =
reads transactions in SuperQueue (SQ), queue to uncore.",
+        "CounterMask": "1"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of offcore outstanding c=
acheable Core Data Read transactions in the super queue every cycle. A tr=
ansaction is considered to be in the Offcore outstanding state between L2=
 miss and transaction completion sent to requestor (SQ de-allocation). Se=
e corresponding Umask under OFFCORE_REQUESTS.",
+        "EventCode": "0x60",
+        "Counter": "0,1,2,3",
+        "UMask": "0x8",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "OFFCORE_REQUESTS_OUTSTANDING.ALL_DATA_RD",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Offcore outstanding cacheable Core Data Rea=
d transactions in SuperQueue (SQ), queue to uncore"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts cycles when offcore outstanding cac=
heable Core Data Read transactions are present in the super queue. A tran=
saction is considered to be in the Offcore outstanding state between L2 m=
iss and transaction completion sent to requestor (SQ de-allocation). See =
corresponding Umask under OFFCORE_REQUESTS.",
+        "EventCode": "0x60",
+        "Counter": "0,1,2,3",
+        "UMask": "0x8",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DATA_RD",=

+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Cycles when offcore outstanding cacheable C=
ore Data Read transactions are present in SuperQueue (SQ), queue to uncor=
e.",
+        "CounterMask": "1"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the Demand Data Read requests sent =
to uncore. Use it in conjunction with OFFCORE_REQUESTS_OUTSTANDING to det=
ermine average latency in the uncore.",
+        "EventCode": "0xB0",
+        "Counter": "0,1,2,3",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "OFFCORE_REQUESTS.DEMAND_DATA_RD",
+        "SampleAfterValue": "100003",
+        "BriefDescription": "Demand Data Read requests sent to uncore"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the demand RFO (read for ownership)=
 requests including regular RFOs, locks, ItoM.",
+        "EventCode": "0xB0",
+        "Counter": "0,1,2,3",
+        "UMask": "0x4",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "OFFCORE_REQUESTS.DEMAND_RFO",
+        "SampleAfterValue": "100003",
+        "BriefDescription": "Demand RFO requests including regular RFOs,=
 locks, ItoM"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the demand and prefetch data reads.=
 All Core Data Reads include cacheable 'Demands' and L2 prefetchers (not =
L3 prefetchers). Counting also covers reads due to page walks resulted fr=
om any request type.",
+        "EventCode": "0xB0",
+        "Counter": "0,1,2,3",
+        "UMask": "0x8",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "OFFCORE_REQUESTS.ALL_DATA_RD",
+        "SampleAfterValue": "100003",
+        "BriefDescription": "Demand and prefetch data reads"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts memory transactions reached the sup=
er queue including requests initiated by the core, all L3 prefetches, pag=
e walks, etc..",
+        "EventCode": "0xB0",
+        "Counter": "0,1,2,3",
+        "UMask": "0x80",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "OFFCORE_REQUESTS.ALL_REQUESTS",
+        "SampleAfterValue": "100003",
+        "BriefDescription": "Any memory transaction that reached the SQ.=
"
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts retired load instructions that true=
 miss the STLB.",
+        "EventCode": "0xD0",
+        "Counter": "0,1,2,3",
+        "UMask": "0x11",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "MEM_INST_RETIRED.STLB_MISS_LOADS",
+        "SampleAfterValue": "100003",
+        "BriefDescription": "Retired load instructions that miss the STL=
B.",
+        "Data_LA": "1"
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts retired store instructions that tru=
e miss the STLB.",
+        "EventCode": "0xD0",
+        "Counter": "0,1,2,3",
+        "UMask": "0x12",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "MEM_INST_RETIRED.STLB_MISS_STORES",
+        "SampleAfterValue": "100003",
+        "BriefDescription": "Retired store instructions that miss the ST=
LB.",
+        "Data_LA": "1",
+        "L1_Hit_Indication": "1"
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts retired load instructions with lock=
ed access.",
+        "EventCode": "0xD0",
+        "Counter": "0,1,2,3",
+        "UMask": "0x21",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "MEM_INST_RETIRED.LOCK_LOADS",
+        "SampleAfterValue": "100007",
+        "BriefDescription": "Retired load instructions with locked acces=
s.",
+        "Data_LA": "1"
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts retired load instructions that spli=
t across a cacheline boundary.",
+        "EventCode": "0xD0",
+        "Counter": "0,1,2,3",
+        "UMask": "0x41",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "MEM_INST_RETIRED.SPLIT_LOADS",
+        "SampleAfterValue": "100003",
+        "BriefDescription": "Retired load instructions that split across=
 a cacheline boundary.",
+        "Data_LA": "1"
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts retired store instructions that spl=
it across a cacheline boundary.",
+        "EventCode": "0xD0",
+        "Counter": "0,1,2,3",
+        "UMask": "0x42",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "MEM_INST_RETIRED.SPLIT_STORES",
+        "SampleAfterValue": "100003",
+        "BriefDescription": "Retired store instructions that split acros=
s a cacheline boundary.",
+        "Data_LA": "1",
+        "L1_Hit_Indication": "1"
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts all retired load instructions. This=
 event accounts for SW prefetch instructions for loads.",
+        "EventCode": "0xD0",
+        "Counter": "0,1,2,3",
+        "UMask": "0x81",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "MEM_INST_RETIRED.ALL_LOADS",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "All retired load instructions.",
+        "Data_LA": "1"
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts all retired store instructions. Thi=
s event account for SW prefetch instructions and PREFETCHW instruction fo=
r stores.",
+        "EventCode": "0xD0",
+        "Counter": "0,1,2,3",
+        "UMask": "0x82",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "MEM_INST_RETIRED.ALL_STORES",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "All retired store instructions.",
+        "Data_LA": "1",
+        "L1_Hit_Indication": "1"
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts retired load instructions with at l=
east one uop that hit in the L1 data cache. This event includes all SW pr=
efetches and lock instructions regardless of the data source.",
+        "EventCode": "0xD1",
+        "Counter": "0,1,2,3",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "MEM_LOAD_RETIRED.L1_HIT",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Retired load instructions with L1 cache hit=
s as data sources",
+        "Data_LA": "1"
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts retired load instructions with L2 c=
ache hits as data sources.",
+        "EventCode": "0xD1",
+        "Counter": "0,1,2,3",
+        "UMask": "0x2",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "MEM_LOAD_RETIRED.L2_HIT",
+        "SampleAfterValue": "100003",
+        "BriefDescription": "Retired load instructions with L2 cache hit=
s as data sources",
+        "Data_LA": "1"
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts retired load instructions with at l=
east one uop that hit in the L3 cache.",
+        "EventCode": "0xD1",
+        "Counter": "0,1,2,3",
+        "UMask": "0x4",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "MEM_LOAD_RETIRED.L3_HIT",
+        "SampleAfterValue": "50021",
+        "BriefDescription": "Retired load instructions with L3 cache hit=
s as data sources",
+        "Data_LA": "1"
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts retired load instructions with at l=
east one uop that missed in the L1 cache.",
+        "EventCode": "0xD1",
+        "Counter": "0,1,2,3",
+        "UMask": "0x8",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "MEM_LOAD_RETIRED.L1_MISS",
+        "SampleAfterValue": "100003",
+        "BriefDescription": "Retired load instructions missed L1 cache a=
s data sources",
+        "Data_LA": "1"
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts retired load instructions missed L2=
 cache as data sources.",
+        "EventCode": "0xD1",
+        "Counter": "0,1,2,3",
+        "UMask": "0x10",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "MEM_LOAD_RETIRED.L2_MISS",
+        "SampleAfterValue": "50021",
+        "BriefDescription": "Retired load instructions missed L2 cache a=
s data sources",
+        "Data_LA": "1"
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts retired load instructions with at l=
east one uop that missed in the L3 cache.",
+        "EventCode": "0xD1",
+        "Counter": "0,1,2,3",
+        "UMask": "0x20",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "MEM_LOAD_RETIRED.L3_MISS",
+        "SampleAfterValue": "100007",
+        "BriefDescription": "Retired load instructions missed L3 cache a=
s data sources",
+        "Data_LA": "1"
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts retired load instructions with at l=
east one uop was load missed in L1 but hit FB (Fill Buffers) due to prece=
ding miss to the same cache line with data not ready.",
+        "EventCode": "0xd1",
+        "Counter": "0,1,2,3",
+        "UMask": "0x40",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "MEM_LOAD_RETIRED.FB_HIT",
+        "SampleAfterValue": "100007",
+        "BriefDescription": "Number of completed demand load requests th=
at missed the L1, but hit the FB(fill buffer), because a preceding miss t=
o the same cacheline initiated the line to be brought into L1, but data i=
s not yet ready in L1.",
+        "Data_LA": "1"
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the retired load instructions whose=
 data sources were L3 hit and cross-core snoop missed in on-pkg core cach=
e.",
+        "EventCode": "0xd2",
+        "Counter": "0,1,2,3",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "MEM_LOAD_L3_HIT_RETIRED.XSNP_MISS",
+        "SampleAfterValue": "20011",
+        "BriefDescription": "Retired load instructions whose data source=
s were L3 hit and cross-core snoop missed in on-pkg core cache.",
+        "Data_LA": "1"
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts retired load instructions whose dat=
a sources were L3 and cross-core snoop hits in on-pkg core cache.",
+        "EventCode": "0xd2",
+        "Counter": "0,1,2,3",
+        "UMask": "0x2",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "MEM_LOAD_L3_HIT_RETIRED.XSNP_HIT",
+        "SampleAfterValue": "20011",
+        "BriefDescription": "Retired load instructions whose data source=
s were L3 and cross-core snoop hits in on-pkg core cache",
+        "Data_LA": "1"
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts retired load instructions whose dat=
a sources were HitM responses from shared L3.",
+        "EventCode": "0xd2",
+        "Counter": "0,1,2,3",
+        "UMask": "0x4",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "MEM_LOAD_L3_HIT_RETIRED.XSNP_HITM",
+        "SampleAfterValue": "20011",
+        "BriefDescription": "Retired load instructions whose data source=
s were HitM responses from shared L3",
+        "Data_LA": "1"
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts retired load instructions whose dat=
a sources were hits in L3 without snoops required.",
+        "EventCode": "0xd2",
+        "Counter": "0,1,2,3",
+        "UMask": "0x8",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "MEM_LOAD_L3_HIT_RETIRED.XSNP_NONE",
+        "SampleAfterValue": "100003",
+        "BriefDescription": "Retired load instructions whose data source=
s were hits in L3 without snoops required",
+        "Data_LA": "1"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of L2 cache lines fillin=
g the L2. Counting does not cover rejects.",
+        "EventCode": "0xF1",
+        "Counter": "0,1,2,3",
+        "UMask": "0x1f",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "L2_LINES_IN.ALL",
+        "SampleAfterValue": "100003",
+        "BriefDescription": "L2 cache lines filling L2"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the cycles for which the thread is =
active and the superQ cannot take any more entries.",
+        "EventCode": "0xF4",
+        "Counter": "0,1,2,3",
+        "UMask": "0x4",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "SQ_MISC.SQ_FULL",
+        "SampleAfterValue": "100003",
+        "BriefDescription": "Cycles the thread is active and superQ cann=
ot take any more entries."
+    }
+]
\ No newline at end of file
diff --git a/tools/perf/pmu-events/arch/x86/icelake/floating-point.json b=
/tools/perf/pmu-events/arch/x86/icelake/floating-point.json
new file mode 100644
index 000000000000..594c5551f610
--- /dev/null
+++ b/tools/perf/pmu-events/arch/x86/icelake/floating-point.json
@@ -0,0 +1,102 @@
+[
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts all microcode Floating Point assist=
s.",
+        "EventCode": "0xC1",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x2",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "ASSISTS.FP",
+        "SampleAfterValue": "100003",
+        "BriefDescription": "Counts all microcode FP assists.",
+        "CounterMask": "1"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts number of SSE/AVX computational sca=
lar double precision floating-point instructions retired; some instructio=
ns will count twice as noted below.  Each count represents 1 computationa=
l operation. Applies to SSE* and AVX* scalar double precision floating-po=
int instructions: ADD SUB MUL DIV MIN MAX SQRT FM(N)ADD/SUB.  FM(N)ADD/SU=
B instructions count twice as they perform 2 calculations per element.",
+        "EventCode": "0xc7",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "FP_ARITH_INST_RETIRED.SCALAR_DOUBLE",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of SSE/AVX computational scalar doub=
le precision floating-point instructions retired; some instructions will =
count twice as noted below.  Each count represents 1 computation. Applies=
 to SSE* and AVX* scalar double precision floating-point instructions: AD=
D SUB MUL DIV MIN MAX RCP14 RSQRT14 RANGE SQRT DPP FM(N)ADD/SUB.  DPP and=
 FM(N)ADD/SUB instructions count twice as they perform 2 calculations per=
 element."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts number of SSE/AVX computational sca=
lar single precision floating-point instructions retired; some instructio=
ns will count twice as noted below.  Each count represents 1 computationa=
l operation. Applies to SSE* and AVX* scalar single precision floating-po=
int instructions: ADD SUB MUL DIV MIN MAX SQRT RSQRT RCP FM(N)ADD/SUB.  F=
M(N)ADD/SUB instructions count twice as they perform 2 calculations per e=
lement.",
+        "EventCode": "0xc7",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x2",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "FP_ARITH_INST_RETIRED.SCALAR_SINGLE",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of SSE/AVX computational scalar sing=
le precision floating-point instructions retired; some instructions will =
count twice as noted below.  Each count represents 1 computation. Applies=
 to SSE* and AVX* scalar single precision floating-point instructions: AD=
D SUB MUL DIV MIN MAX RCP14 RSQRT14 RANGE SQRT DPP FM(N)ADD/SUB.  DPP and=
 FM(N)ADD/SUB instructions count twice as they perform 2 calculations per=
 element."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts number of SSE/AVX computational 128=
-bit packed double precision floating-point instructions retired; some in=
structions will count twice as noted below.  Each count represents 2 comp=
utation operations, one for each element.  Applies to SSE* and AVX* packe=
d double precision floating-point instructions: ADD SUB HADD HSUB SUBADD =
MUL DIV MIN MAX SQRT DPP FM(N)ADD/SUB.  DPP and FM(N)ADD/SUB instructions=
 count twice as they perform 2 calculations per element.",
+        "EventCode": "0xc7",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x4",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "FP_ARITH_INST_RETIRED.128B_PACKED_DOUBLE",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of SSE/AVX computational 128-bit pac=
ked double precision floating-point instructions retired; some instructio=
ns will count twice as noted below.  Each count represents 2 computation =
operations, one for each element.  Applies to SSE* and AVX* packed double=
 precision floating-point instructions: ADD SUB HADD HSUB SUBADD MUL DIV =
MIN MAX SQRT RSQRT14 RCP14 RANGE DPP FM(N)ADD/SUB.  DPP and FM(N)ADD/SUB =
instructions count twice as they perform 2 calculations per element."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts number of SSE/AVX computational 128=
-bit packed single precision floating-point instructions retired; some in=
structions will count twice as noted below.  Each count represents 4 comp=
utation operations, one for each element.  Applies to SSE* and AVX* packe=
d single precision floating-point instructions: ADD SUB HADD HSUB SUBADD =
MUL DIV MIN MAX SQRT RSQRT RCP DPP FM(N)ADD/SUB.  DPP and FM(N)ADD/SUB in=
structions count twice as they perform 2 calculations per element.",
+        "EventCode": "0xc7",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x8",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "FP_ARITH_INST_RETIRED.128B_PACKED_SINGLE",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of SSE/AVX computational 128-bit pac=
ked single precision floating-point instructions retired; some instructio=
ns will count twice as noted below.  Each count represents 4 computation =
operations, one for each element.  Applies to SSE* and AVX* packed single=
 precision floating-point instructions: ADD SUB MUL DIV MIN MAX RCP14 RSQ=
RT14 SQRT DPP FM(N)ADD/SUB.  DPP and FM(N)ADD/SUB instructions count twic=
e as they perform 2 calculations per element."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts number of SSE/AVX computational 256=
-bit packed double precision floating-point instructions retired; some in=
structions will count twice as noted below.  Each count represents 4 comp=
utation operations, one for each element.  Applies to SSE* and AVX* packe=
d double precision floating-point instructions: ADD SUB HADD HSUB SUBADD =
MUL DIV MIN MAX SQRT FM(N)ADD/SUB.  FM(N)ADD/SUB instructions count twice=
 as they perform 2 calculations per element.",
+        "EventCode": "0xc7",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x10",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "FP_ARITH_INST_RETIRED.256B_PACKED_DOUBLE",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of SSE/AVX computational 256-bit pac=
ked double precision floating-point instructions retired; some instructio=
ns will count twice as noted below.  Each count represents 4 computation =
operations, one for each element.  Applies to SSE* and AVX* packed double=
 precision floating-point instructions: ADD SUB MUL DIV MIN MAX RCP14 RSQ=
RT14 RANGE SQRT DPP FM(N)ADD/SUB.  DPP and FM(N)ADD/SUB instructions coun=
t twice as they perform 2 calculations per element."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts number of SSE/AVX computational 256=
-bit packed single precision floating-point instructions retired; some in=
structions will count twice as noted below.  Each count represents 8 comp=
utation operations, one for each element.  Applies to SSE* and AVX* packe=
d single precision floating-point instructions: ADD SUB HADD HSUB SUBADD =
MUL DIV MIN MAX SQRT RSQRT RCP DPP FM(N)ADD/SUB.  DPP and FM(N)ADD/SUB in=
structions count twice as they perform 2 calculations per element.",
+        "EventCode": "0xc7",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x20",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "FP_ARITH_INST_RETIRED.256B_PACKED_SINGLE",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of SSE/AVX computational 256-bit pac=
ked single precision floating-point instructions retired; some instructio=
ns will count twice as noted below.  Each count represents 8 computation =
operations, one for each element.  Applies to SSE* and AVX* packed single=
 precision floating-point instructions: ADD SUB MUL DIV MIN MAX RCP14 RSQ=
RT14 RANGE SQRT DPP FM(N)ADD/SUB.  DPP and FM(N)ADD/SUB instructions coun=
t twice as they perform 2 calculations per element."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts number of SSE/AVX computational 512=
-bit packed double precision floating-point instructions retired; some in=
structions will count twice as noted below.  Each count represents 8 comp=
utation operations, one for each element.  Applies to SSE* and AVX* packe=
d double precision floating-point instructions: ADD SUB MUL DIV MIN MAX S=
QRT RSQRT14 RCP14 RANGE FM(N)ADD/SUB. FM(N)ADD/SUB instructions count twi=
ce as they perform 2 calculations per element.",
+        "EventCode": "0xc7",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x40",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "FP_ARITH_INST_RETIRED.512B_PACKED_DOUBLE",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of SSE/AVX computational 512-bit pac=
ked double precision floating-point instructions retired; some instructio=
ns will count twice as noted below.  Each count represents 16 computation=
 operations, one for each element.  Applies to SSE* and AVX* packed doubl=
e precision floating-point instructions: ADD SUB MUL DIV MIN MAX SQRT RSQ=
RT14 RCP14 RANGE FM(N)ADD/SUB. FM(N)ADD/SUB instructions count twice as t=
hey perform 2 calculations per element."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts number of SSE/AVX computational 512=
-bit packed double precision floating-point instructions retired; some in=
structions will count twice as noted below.  Each count represents 16 com=
putation operations, one for each element.  Applies to SSE* and AVX* pack=
ed double precision floating-point instructions: ADD SUB MUL DIV MIN MAX =
SQRT RSQRT14 RCP14 RANGE FM(N)ADD/SUB. FM(N)ADD/SUB instructions count tw=
ice as they perform 2 calculations per element.",
+        "EventCode": "0xc7",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x80",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "FP_ARITH_INST_RETIRED.512B_PACKED_SINGLE",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of SSE/AVX computational 512-bit pac=
ked double precision floating-point instructions retired; some instructio=
ns will count twice as noted below.  Each count represents 8 computation =
operations, one for each element.  Applies to SSE* and AVX* packed double=
 precision floating-point instructions: ADD SUB MUL DIV MIN MAX SQRT RSQR=
T14 RCP14 RANGE FM(N)ADD/SUB. FM(N)ADD/SUB instructions count twice as th=
ey perform 2 calculations per element."
+    }
+]
\ No newline at end of file
diff --git a/tools/perf/pmu-events/arch/x86/icelake/frontend.json b/tools=
/perf/pmu-events/arch/x86/icelake/frontend.json
new file mode 100644
index 000000000000..9c3cfbfcec0f
--- /dev/null
+++ b/tools/perf/pmu-events/arch/x86/icelake/frontend.json
@@ -0,0 +1,424 @@
+[
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of uops delivered to Ins=
truction Decode Queue (IDQ) from the MITE path. This also means that uops=
 are not being delivered from the Decode Stream Buffer (DSB).",
+        "EventCode": "0x79",
+        "Counter": "0,1,2,3",
+        "UMask": "0x4",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "IDQ.MITE_UOPS",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Uops delivered to Instruction Decode Queue =
(IDQ) from MITE path"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of cycles where optimal =
number of uops was delivered to the Instruction Decode Queue (IDQ) from t=
he MITE (legacy decode pipeline) path. During these cycles uops are not b=
eing delivered from the Decode Stream Buffer (DSB).",
+        "EventCode": "0x79",
+        "Counter": "0,1,2,3",
+        "UMask": "0x4",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "IDQ.MITE_CYCLES_OK",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Cycles MITE is delivering optimal number of=
 Uops",
+        "CounterMask": "5"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of cycles uops were deli=
vered to the Instruction Decode Queue (IDQ) from the MITE (legacy decode =
pipeline) path. During these cycles uops are not being delivered from the=
 Decode Stream Buffer (DSB).",
+        "EventCode": "0x79",
+        "Counter": "0,1,2,3",
+        "UMask": "0x4",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "IDQ.MITE_CYCLES_ANY",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Cycles MITE is delivering any Uop",
+        "CounterMask": "1"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of uops delivered to Ins=
truction Decode Queue (IDQ) from the Decode Stream Buffer (DSB) path.",
+        "EventCode": "0x79",
+        "Counter": "0,1,2,3",
+        "UMask": "0x8",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "IDQ.DSB_UOPS",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Uops delivered to Instruction Decode Queue =
(IDQ) from the Decode Stream Buffer (DSB) path"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of cycles where optimal =
number of uops was delivered to the Instruction Decode Queue (IDQ) from t=
he MITE (legacy decode pipeline) path. During these cycles uops are not b=
eing delivered from the Decode Stream Buffer (DSB).",
+        "EventCode": "0x79",
+        "Counter": "0,1,2,3",
+        "UMask": "0x8",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "IDQ.DSB_CYCLES_OK",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Cycles DSB is delivering optimal number of =
Uops",
+        "CounterMask": "5"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of cycles uops were deli=
vered to Instruction Decode Queue (IDQ) from the Decode Stream Buffer (DS=
B) path.",
+        "EventCode": "0x79",
+        "Counter": "0,1,2,3",
+        "UMask": "0x8",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "IDQ.DSB_CYCLES_ANY",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Cycles Decode Stream Buffer (DSB) is delive=
ring any Uop",
+        "CounterMask": "1"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Number of switches from DSB (Decode Stream=
 Buffer) or MITE (legacy decode pipeline) to the Microcode Sequencer.",
+        "EventCode": "0x79",
+        "Counter": "0,1,2,3",
+        "UMask": "0x30",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "IDQ.MS_SWITCHES",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of switches from DSB or MITE to the =
MS",
+        "CounterMask": "1",
+        "EdgeDetect": "1"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the total number of uops delivered =
by the Microcode Sequencer (MS). Any instruction over 4 uops will be deli=
vered by the MS. Some instructions such as transcendentals may additional=
ly generate uops from the MS.",
+        "EventCode": "0x79",
+        "Counter": "0,1,2,3",
+        "UMask": "0x30",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "IDQ.MS_UOPS",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Uops delivered to IDQ while MS is busy"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts cycles during which uops are being =
delivered to Instruction Decode Queue (IDQ) while the Microcode Sequencer=
 (MS) is busy. Uops maybe initiated by Decode Stream Buffer (DSB) or MITE=
=2E",
+        "EventCode": "0x79",
+        "Counter": "0,1,2,3",
+        "UMask": "0x30",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "IDQ.MS_CYCLES_ANY",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Cycles when uops are being delivered to IDQ=
 while MS is busy",
+        "CounterMask": "1"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts cycles where a code line fetch is s=
talled due to an L1 instruction cache miss. The legacy decode pipeline wo=
rks at a 16 Byte granularity.",
+        "EventCode": "0x80",
+        "Counter": "0,1,2,3",
+        "UMask": "0x4",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "ICACHE_16B.IFDATA_STALL",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Cycles where a code fetch is stalled due to=
 L1 instruction cache miss."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts instruction fetch tag lookups that =
hit in the instruction cache (L1I). Counts at 64-byte cache-line granular=
ity. Accounts for both cacheable and uncacheable accesses.",
+        "EventCode": "0x83",
+        "Counter": "0,1,2,3",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "ICACHE_64B.IFTAG_HIT",
+        "SampleAfterValue": "200003",
+        "BriefDescription": "Instruction fetch tag lookups that hit in t=
he instruction cache (L1I). Counts at 64-byte cache-line granularity."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts instruction fetch tag lookups that =
miss in the instruction cache (L1I). Counts at 64-byte cache-line granula=
rity. Accounts for both cacheable and uncacheable accesses.",
+        "EventCode": "0x83",
+        "Counter": "0,1,2,3",
+        "UMask": "0x2",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "ICACHE_64B.IFTAG_MISS",
+        "SampleAfterValue": "200003",
+        "BriefDescription": "Instruction fetch tag lookups that miss in =
the instruction cache (L1I). Counts at 64-byte cache-line granularity."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts cycles where a code fetch is stalle=
d due to L1 instruction cache tag miss.",
+        "EventCode": "0x83",
+        "Counter": "0,1,2,3",
+        "UMask": "0x4",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "ICACHE_64B.IFTAG_STALL",
+        "SampleAfterValue": "200003",
+        "BriefDescription": "Cycles where a code fetch is stalled due to=
 L1 instruction cache tag miss."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of uops not delivered to=
 by the Instruction Decode Queue (IDQ) to the back-end of the pipeline wh=
en there was no back-end stalls. This event counts for one SMT thread in =
a given cycle.",
+        "EventCode": "0x9C",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "IDQ_UOPS_NOT_DELIVERED.CORE",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Uops not delivered by IDQ when backend of t=
he machine is not stalled"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of cycles when no uops w=
ere delivered by the Instruction Decode Queue (IDQ) to the back-end of th=
e pipeline when there was no back-end stalls. This event counts for one S=
MT thread in a given cycle.",
+        "EventCode": "0x9c",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "IDQ_UOPS_NOT_DELIVERED.CYCLES_0_UOPS_DELIV.CORE",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Cycles when no uops are not delivered by th=
e IDQ when backend of the machine is not stalled",
+        "CounterMask": "5"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of cycles when the optim=
al number of uops were delivered by the Instruction Decode Queue (IDQ) to=
 the back-end of the pipeline when there was no back-end stalls. This eve=
nt counts for one SMT thread in a given cycle.",
+        "EventCode": "0x9C",
+        "Invert": "1",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "IDQ_UOPS_NOT_DELIVERED.CYCLES_FE_WAS_OK",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Cycles when optimal number of uops was deli=
vered to the back-end when the back-end is not stalled",
+        "CounterMask": "1"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Decode Stream Buffer (DSB) is a Uop-cache =
that holds translations of previously fetched instructions that were deco=
ded by the legacy x86 decode pipeline (MITE). This event counts fetch pen=
alty cycles when a transition occurs from DSB to MITE.",
+        "EventCode": "0xAB",
+        "Counter": "0,1,2,3",
+        "UMask": "0x2",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "DSB2MITE_SWITCHES.PENALTY_CYCLES",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "DSB-to-MITE switch true penalty cycles."
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts retired Instructions that experienc=
ed DSB (Decode stream buffer i.e. the decoded instruction-cache) miss.",
+        "EventCode": "0xC6",
+        "MSRValue": "0x11",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "FRONTEND_RETIRED.DSB_MISS",
+        "MSRIndex": "0x3F7",
+        "SampleAfterValue": "100007",
+        "BriefDescription": "Retired Instructions who experienced DSB mi=
ss.",
+        "TakenAlone": "1"
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts retired Instructions who experience=
d Instruction L1 Cache true miss.",
+        "EventCode": "0xC6",
+        "MSRValue": "0x12",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "FRONTEND_RETIRED.L1I_MISS",
+        "MSRIndex": "0x3F7",
+        "SampleAfterValue": "100007",
+        "BriefDescription": "Retired Instructions who experienced Instru=
ction L1 Cache true miss.",
+        "TakenAlone": "1"
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts retired Instructions who experience=
d Instruction L2 Cache true miss.",
+        "EventCode": "0xC6",
+        "MSRValue": "0x13",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "FRONTEND_RETIRED.L2_MISS",
+        "MSRIndex": "0x3F7",
+        "SampleAfterValue": "100007",
+        "BriefDescription": "Retired Instructions who experienced Instru=
ction L2 Cache true miss.",
+        "TakenAlone": "1"
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts retired Instructions that experienc=
ed iTLB (Instruction TLB) true miss.",
+        "EventCode": "0xC6",
+        "MSRValue": "0x14",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "FRONTEND_RETIRED.ITLB_MISS",
+        "MSRIndex": "0x3F7",
+        "SampleAfterValue": "100007",
+        "BriefDescription": "Retired Instructions who experienced iTLB t=
rue miss.",
+        "TakenAlone": "1"
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts retired Instructions that experienc=
ed STLB (2nd level TLB) true miss.",
+        "EventCode": "0xC6",
+        "MSRValue": "0x15",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "FRONTEND_RETIRED.STLB_MISS",
+        "MSRIndex": "0x3F7",
+        "SampleAfterValue": "100007",
+        "BriefDescription": "Retired Instructions who experienced STLB (=
2nd level TLB) true miss.",
+        "TakenAlone": "1"
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts retired instructions that are fetch=
ed after an interval where the front-end delivered no uops for a period o=
f 2 cycles which was not interrupted by a back-end stall.",
+        "EventCode": "0xC6",
+        "MSRValue": "0x500206",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "FRONTEND_RETIRED.LATENCY_GE_2",
+        "MSRIndex": "0x3F7",
+        "SampleAfterValue": "100007",
+        "BriefDescription": "Retired instructions that are fetched after=
 an interval where the front-end delivered no uops for a period of 2 cycl=
es which was not interrupted by a back-end stall.",
+        "TakenAlone": "1"
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts retired instructions that are fetch=
ed after an interval where the front-end delivered no uops for a period o=
f 4 cycles which was not interrupted by a back-end stall.",
+        "EventCode": "0xC6",
+        "MSRValue": "0x500406",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "FRONTEND_RETIRED.LATENCY_GE_4",
+        "MSRIndex": "0x3F7",
+        "SampleAfterValue": "100007",
+        "BriefDescription": "Retired instructions that are fetched after=
 an interval where the front-end delivered no uops for a period of 4 cycl=
es which was not interrupted by a back-end stall.",
+        "TakenAlone": "1"
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts retired instructions that are deliv=
ered to the back-end after a front-end stall of at least 8 cycles. During=
 this period the front-end delivered no uops.",
+        "EventCode": "0xC6",
+        "MSRValue": "0x500806",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "FRONTEND_RETIRED.LATENCY_GE_8",
+        "MSRIndex": "0x3F7",
+        "SampleAfterValue": "100007",
+        "BriefDescription": "Retired instructions that are fetched after=
 an interval where the front-end delivered no uops for a period of 8 cycl=
es which was not interrupted by a back-end stall.",
+        "TakenAlone": "1"
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts retired instructions that are deliv=
ered to the back-end after a front-end stall of at least 16 cycles. Durin=
g this period the front-end delivered no uops.",
+        "EventCode": "0xC6",
+        "MSRValue": "0x501006",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "FRONTEND_RETIRED.LATENCY_GE_16",
+        "MSRIndex": "0x3F7",
+        "SampleAfterValue": "100007",
+        "BriefDescription": "Retired instructions that are fetched after=
 an interval where the front-end delivered no uops for a period of 16 cyc=
les which was not interrupted by a back-end stall.",
+        "TakenAlone": "1"
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts retired instructions that are deliv=
ered to the back-end after a front-end stall of at least 32 cycles. Durin=
g this period the front-end delivered no uops.",
+        "EventCode": "0xC6",
+        "MSRValue": "0x502006",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "FRONTEND_RETIRED.LATENCY_GE_32",
+        "MSRIndex": "0x3F7",
+        "SampleAfterValue": "100007",
+        "BriefDescription": "Retired instructions that are fetched after=
 an interval where the front-end delivered no uops for a period of 32 cyc=
les which was not interrupted by a back-end stall.",
+        "TakenAlone": "1"
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts retired instructions that are fetch=
ed after an interval where the front-end delivered no uops for a period o=
f 64 cycles which was not interrupted by a back-end stall.",
+        "EventCode": "0xC6",
+        "MSRValue": "0x504006",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "FRONTEND_RETIRED.LATENCY_GE_64",
+        "MSRIndex": "0x3F7",
+        "SampleAfterValue": "100007",
+        "BriefDescription": "Retired instructions that are fetched after=
 an interval where the front-end delivered no uops for a period of 64 cyc=
les which was not interrupted by a back-end stall.",
+        "TakenAlone": "1"
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts retired instructions that are fetch=
ed after an interval where the front-end delivered no uops for a period o=
f 128 cycles which was not interrupted by a back-end stall.",
+        "EventCode": "0xC6",
+        "MSRValue": "0x508006",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "FRONTEND_RETIRED.LATENCY_GE_128",
+        "MSRIndex": "0x3F7",
+        "SampleAfterValue": "100007",
+        "BriefDescription": "Retired instructions that are fetched after=
 an interval where the front-end delivered no uops for a period of 128 cy=
cles which was not interrupted by a back-end stall.",
+        "TakenAlone": "1"
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts retired instructions that are fetch=
ed after an interval where the front-end delivered no uops for a period o=
f 256 cycles which was not interrupted by a back-end stall.",
+        "EventCode": "0xC6",
+        "MSRValue": "0x510006",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "FRONTEND_RETIRED.LATENCY_GE_256",
+        "MSRIndex": "0x3F7",
+        "SampleAfterValue": "100007",
+        "BriefDescription": "Retired instructions that are fetched after=
 an interval where the front-end delivered no uops for a period of 256 cy=
cles which was not interrupted by a back-end stall.",
+        "TakenAlone": "1"
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts retired instructions that are fetch=
ed after an interval where the front-end delivered no uops for a period o=
f 512 cycles which was not interrupted by a back-end stall.",
+        "EventCode": "0xC6",
+        "MSRValue": "0x520006",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "FRONTEND_RETIRED.LATENCY_GE_512",
+        "MSRIndex": "0x3F7",
+        "SampleAfterValue": "100007",
+        "BriefDescription": "Retired instructions that are fetched after=
 an interval where the front-end delivered no uops for a period of 512 cy=
cles which was not interrupted by a back-end stall.",
+        "TakenAlone": "1"
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts retired instructions that are deliv=
ered to the back-end after the front-end had at least 1 bubble-slot for a=
 period of 2 cycles. A bubble-slot is an empty issue-pipeline slot while =
there was no RAT stall.",
+        "EventCode": "0xC6",
+        "MSRValue": "0x100206",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "FRONTEND_RETIRED.LATENCY_GE_2_BUBBLES_GE_1",
+        "MSRIndex": "0x3F7",
+        "SampleAfterValue": "100007",
+        "BriefDescription": "Retired instructions that are fetched after=
 an interval where the front-end had at least 1 bubble-slot for a period =
of 2 cycles which was not interrupted by a back-end stall.",
+        "TakenAlone": "1"
+    }
+]
\ No newline at end of file
diff --git a/tools/perf/pmu-events/arch/x86/icelake/memory.json b/tools/p=
erf/pmu-events/arch/x86/icelake/memory.json
new file mode 100644
index 000000000000..f158366b9dd6
--- /dev/null
+++ b/tools/perf/pmu-events/arch/x86/icelake/memory.json
@@ -0,0 +1,410 @@
+[
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of times a TSX line had =
a cache conflict.",
+        "EventCode": "0x54",
+        "Counter": "0,1,2,3",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "TX_MEM.ABORT_CONFLICT",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of times a transactional abort was s=
ignaled due to a data conflict on a transactionally accessed address"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Speculatively counts the number Transactio=
nal Synchronization Extensions (TSX) Aborts due to a data capacity limita=
tion for transactional writes.",
+        "EventCode": "0x54",
+        "Counter": "0,1,2,3",
+        "UMask": "0x2",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "TX_MEM.ABORT_CAPACITY_WRITE",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Speculatively counts the number TSX Aborts =
due to a data capacity limitation for transactional writes."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of times a TSX Abort was=
 triggered due to a non-release/commit store to lock.",
+        "EventCode": "0x54",
+        "Counter": "0,1,2,3",
+        "UMask": "0x4",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "TX_MEM.ABORT_HLE_STORE_TO_ELIDED_LOCK",
+        "SampleAfterValue": "100003",
+        "BriefDescription": "Number of times a HLE transactional region =
aborted due to a non XRELEASE prefixed instruction writing to an elided l=
ock in the elision buffer"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of times a TSX Abort was=
 triggered due to commit but Lock Buffer not empty.",
+        "EventCode": "0x54",
+        "Counter": "0,1,2,3",
+        "UMask": "0x8",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "TX_MEM.ABORT_HLE_ELISION_BUFFER_NOT_EMPTY",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of times an HLE transactional execut=
ion aborted due to NoAllocatedElisionBuffer being non-zero."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of times a TSX Abort was=
 triggered due to release/commit but data and address mismatch.",
+        "EventCode": "0x54",
+        "Counter": "0,1,2,3",
+        "UMask": "0x10",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "TX_MEM.ABORT_HLE_ELISION_BUFFER_MISMATCH",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of times an HLE transactional execut=
ion aborted due to XRELEASE lock not satisfying the address and value req=
uirements in the elision buffer"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of times a TSX Abort was=
 triggered due to attempting an unsupported alignment from Lock Buffer.",=

+        "EventCode": "0x54",
+        "Counter": "0,1,2,3",
+        "UMask": "0x20",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "TX_MEM.ABORT_HLE_ELISION_BUFFER_UNSUPPORTED_ALIGNM=
ENT",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of times an HLE transactional execut=
ion aborted due to an unsupported read alignment from the elision buffer.=
"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of times we could not al=
locate Lock Buffer.",
+        "EventCode": "0x54",
+        "Counter": "0,1,2,3",
+        "UMask": "0x40",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "TX_MEM.HLE_ELISION_BUFFER_FULL",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of times HLE lock could not be elide=
d due to ElisionBufferAvailable being zero."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts Unfriendly TSX abort triggered by a=
 vzeroupper instruction.",
+        "EventCode": "0x5d",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x2",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "TX_EXEC.MISC2",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Counts the number of times a class of instr=
uctions that may cause a transactional abort was executed inside a transa=
ctional region"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts Unfriendly TSX abort triggered by a=
 nest count that is too deep.",
+        "EventCode": "0x5d",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x4",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "TX_EXEC.MISC3",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of times an instruction execution ca=
used the transactional nest count supported to be exceeded"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "EventCode": "0xA3",
+        "Counter": "0,1,2,3",
+        "UMask": "0x2",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "CYCLE_ACTIVITY.CYCLES_L3_MISS",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Cycles while L3 cache miss demand load is o=
utstanding.",
+        "CounterMask": "2"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "EventCode": "0xA3",
+        "Counter": "0,1,2,3",
+        "UMask": "0x6",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "CYCLE_ACTIVITY.STALLS_L3_MISS",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Execution stalls while L3 cache miss demand=
 load is outstanding.",
+        "CounterMask": "6"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Demand Data Read requests who miss L3 cach=
e.",
+        "EventCode": "0xB0",
+        "Counter": "0,1,2,3",
+        "UMask": "0x10",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "OFFCORE_REQUESTS.L3_MISS_DEMAND_DATA_RD",
+        "SampleAfterValue": "100003",
+        "BriefDescription": "Demand Data Read requests who miss L3 cache=
"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of Machine Clears detect=
ed dye to memory ordering. Memory Ordering Machine Clears may apply when =
a memory read may not conform to the memory ordering rules of the x86 arc=
hitecture",
+        "EventCode": "0xc3",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x2",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "MACHINE_CLEARS.MEMORY_ORDERING",
+        "SampleAfterValue": "100003",
+        "BriefDescription": "Number of machine clears due to memory orde=
ring conflicts."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of times we entered an H=
LE region. Does not count nested transactions.",
+        "EventCode": "0xC8",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "HLE_RETIRED.START",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of times an HLE execution started."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of times HLE commit succ=
eeded.",
+        "EventCode": "0xC8",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x2",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "HLE_RETIRED.COMMIT",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of times an HLE execution successful=
ly committed",
+        "Data_LA": "1"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of times HLE abort was t=
riggered.",
+        "EventCode": "0xc8",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x4",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "HLE_RETIRED.ABORTED",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of times an HLE execution aborted du=
e to any reasons (multiple categories may count as one)."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of times an HLE executio=
n aborted due to various memory events (e.g., read/write capacity and con=
flicts).",
+        "EventCode": "0xC8",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x8",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "HLE_RETIRED.ABORTED_MEM",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of times an HLE execution aborted du=
e to various memory events (e.g., read/write capacity and conflicts)."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of times an HLE executio=
n aborted due to HLE-unfriendly instructions and certain unfriendly event=
s (such as AD assists etc.).",
+        "EventCode": "0xC8",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x20",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "HLE_RETIRED.ABORTED_UNFRIENDLY",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of times an HLE execution aborted du=
e to HLE-unfriendly instructions and certain unfriendly events (such as A=
D assists etc.)."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of times an HLE executio=
n aborted due to unfriendly events (such as interrupts).",
+        "EventCode": "0xC8",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x80",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "HLE_RETIRED.ABORTED_EVENTS",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of times an HLE execution aborted du=
e to unfriendly events (such as interrupts)."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of times we entered an R=
TM region. Does not count nested transactions.",
+        "EventCode": "0xC9",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "RTM_RETIRED.START",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of times an RTM execution started."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of times RTM commit succ=
eeded.",
+        "EventCode": "0xC9",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x2",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "RTM_RETIRED.COMMIT",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of times an RTM execution successful=
ly committed"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of times RTM abort was t=
riggered.",
+        "EventCode": "0xc9",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x4",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "RTM_RETIRED.ABORTED",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of times an RTM execution aborted.",=

+        "Data_LA": "1"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of times an RTM executio=
n aborted due to various memory events (e.g. read/write capacity and conf=
licts).",
+        "EventCode": "0xC9",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x8",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "RTM_RETIRED.ABORTED_MEM",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of times an RTM execution aborted du=
e to various memory events (e.g. read/write capacity and conflicts)"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of times an RTM executio=
n aborted due to HLE-unfriendly instructions.",
+        "EventCode": "0xC9",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x20",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "RTM_RETIRED.ABORTED_UNFRIENDLY",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of times an RTM execution aborted du=
e to HLE-unfriendly instructions"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of times an RTM executio=
n aborted due to incompatible memory type.",
+        "EventCode": "0xC9",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x40",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "RTM_RETIRED.ABORTED_MEMTYPE",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of times an RTM execution aborted du=
e to incompatible memory type"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of times an RTM executio=
n aborted due to none of the previous 4 categories (e.g. interrupt).",
+        "EventCode": "0xC9",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x80",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "RTM_RETIRED.ABORTED_EVENTS",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of times an RTM execution aborted du=
e to none of the previous 4 categories (e.g. interrupt)"
+    },
+    {
+        "PEBS": "2",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts randomly selected loads when the la=
tency from first dispatch to completion is greater than 4 cycles.  Report=
ed latency may be longer than just the memory latency.",
+        "EventCode": "0xcd",
+        "MSRValue": "0x4",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_4",
+        "MSRIndex": "0x3F6",
+        "SampleAfterValue": "100003",
+        "BriefDescription": "Counts randomly selected loads when the lat=
ency from first dispatch to completion is greater than 4 cycles.",
+        "TakenAlone": "1"
+    },
+    {
+        "PEBS": "2",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts randomly selected loads when the la=
tency from first dispatch to completion is greater than 8 cycles.  Report=
ed latency may be longer than just the memory latency.",
+        "EventCode": "0xcd",
+        "MSRValue": "0x8",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_8",
+        "MSRIndex": "0x3F6",
+        "SampleAfterValue": "50021",
+        "BriefDescription": "Counts randomly selected loads when the lat=
ency from first dispatch to completion is greater than 8 cycles.",
+        "TakenAlone": "1"
+    },
+    {
+        "PEBS": "2",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts randomly selected loads when the la=
tency from first dispatch to completion is greater than 16 cycles.  Repor=
ted latency may be longer than just the memory latency.",
+        "EventCode": "0xcd",
+        "MSRValue": "0x10",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_16",
+        "MSRIndex": "0x3F6",
+        "SampleAfterValue": "20011",
+        "BriefDescription": "Counts randomly selected loads when the lat=
ency from first dispatch to completion is greater than 16 cycles.",
+        "TakenAlone": "1"
+    },
+    {
+        "PEBS": "2",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts randomly selected loads when the la=
tency from first dispatch to completion is greater than 32 cycles.  Repor=
ted latency may be longer than just the memory latency.",
+        "EventCode": "0xcd",
+        "MSRValue": "0x20",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_32",
+        "MSRIndex": "0x3F6",
+        "SampleAfterValue": "100007",
+        "BriefDescription": "Counts randomly selected loads when the lat=
ency from first dispatch to completion is greater than 32 cycles.",
+        "TakenAlone": "1"
+    },
+    {
+        "PEBS": "2",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts randomly selected loads when the la=
tency from first dispatch to completion is greater than 64 cycles.  Repor=
ted latency may be longer than just the memory latency.",
+        "EventCode": "0xcd",
+        "MSRValue": "0x40",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_64",
+        "MSRIndex": "0x3F6",
+        "SampleAfterValue": "2003",
+        "BriefDescription": "Counts randomly selected loads when the lat=
ency from first dispatch to completion is greater than 64 cycles.",
+        "TakenAlone": "1"
+    },
+    {
+        "PEBS": "2",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts randomly selected loads when the la=
tency from first dispatch to completion is greater than 128 cycles.  Repo=
rted latency may be longer than just the memory latency.",
+        "EventCode": "0xcd",
+        "MSRValue": "0x80",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_128",
+        "MSRIndex": "0x3F6",
+        "SampleAfterValue": "1009",
+        "BriefDescription": "Counts randomly selected loads when the lat=
ency from first dispatch to completion is greater than 128 cycles.",
+        "TakenAlone": "1"
+    },
+    {
+        "PEBS": "2",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts randomly selected loads when the la=
tency from first dispatch to completion is greater than 256 cycles.  Repo=
rted latency may be longer than just the memory latency.",
+        "EventCode": "0xcd",
+        "MSRValue": "0x100",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_256",
+        "MSRIndex": "0x3F6",
+        "SampleAfterValue": "503",
+        "BriefDescription": "Counts randomly selected loads when the lat=
ency from first dispatch to completion is greater than 256 cycles.",
+        "TakenAlone": "1"
+    },
+    {
+        "PEBS": "2",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts randomly selected loads when the la=
tency from first dispatch to completion is greater than 512 cycles.  Repo=
rted latency may be longer than just the memory latency.",
+        "EventCode": "0xcd",
+        "MSRValue": "0x200",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_512",
+        "MSRIndex": "0x3F6",
+        "SampleAfterValue": "101",
+        "BriefDescription": "Counts randomly selected loads when the lat=
ency from first dispatch to completion is greater than 512 cycles.",
+        "TakenAlone": "1"
+    }
+]
\ No newline at end of file
diff --git a/tools/perf/pmu-events/arch/x86/icelake/other.json b/tools/pe=
rf/pmu-events/arch/x86/icelake/other.json
new file mode 100644
index 000000000000..f8dfdb847224
--- /dev/null
+++ b/tools/perf/pmu-events/arch/x86/icelake/other.json
@@ -0,0 +1,121 @@
+[
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of available slots for a=
n unhalted logical processor. The event increments by machine-width of th=
e narrowest pipeline as employed by the Top-down Microarchitecture Analys=
is method. The count is distributed among unhalted logical processors (hy=
per-threads) who share the same physical core. Software can use this even=
t as the denominator for the top-level metrics of the Top-down Microarchi=
tecture Analysis method. This event is counted on a designated fixed coun=
ter (Fixed Counter 3) and is an architectural event.",
+        "Counter": "35",
+        "UMask": "0x4",
+        "PEBScounters": "35",
+        "EventName": "TOPDOWN.SLOTS",
+        "SampleAfterValue": "10000003",
+        "BriefDescription": "Counts the number of available slots for an=
 unhalted logical processor."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts Core cycles where the core was runn=
ing with power-delivery for baseline license level 0.  This includes non-=
AVX codes, SSE, AVX 128-bit, and low-current AVX 256-bit codes.",
+        "EventCode": "0x28",
+        "Counter": "0,1,2,3",
+        "UMask": "0x7",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "CORE_POWER.LVL0_TURBO_LICENSE",
+        "SampleAfterValue": "200003",
+        "BriefDescription": "Core cycles where the core was running in a=
 manner where Turbo may be clipped to the Non-AVX turbo schedule."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts Core cycles where the core was runn=
ing with power-delivery for license level 1.  This includes high current =
AVX 256-bit instructions as well as low current AVX 512-bit instructions.=
",
+        "EventCode": "0x28",
+        "Counter": "0,1,2,3",
+        "UMask": "0x18",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "CORE_POWER.LVL1_TURBO_LICENSE",
+        "SampleAfterValue": "200003",
+        "BriefDescription": "Core cycles where the core was running in a=
 manner where Turbo may be clipped to the AVX2 turbo schedule."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Core cycles where the core was running wit=
h power-delivery for license level 2 (introduced in Skylake Server microa=
rchtecture).  This includes high current AVX 512-bit instructions.",
+        "EventCode": "0x28",
+        "Counter": "0,1,2,3",
+        "UMask": "0x20",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "CORE_POWER.LVL2_TURBO_LICENSE",
+        "SampleAfterValue": "200003",
+        "BriefDescription": "Core cycles where the core was running in a=
 manner where Turbo may be clipped to the AVX512 turbo schedule."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of PREFETCHNTA instructi=
ons executed.",
+        "EventCode": "0x32",
+        "Counter": "0,1,2,3",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "SW_PREFETCH_ACCESS.NTA",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of PREFETCHNTA instructions executed=
=2E"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of PREFETCHT0 instructio=
ns executed.",
+        "EventCode": "0x32",
+        "Counter": "0,1,2,3",
+        "UMask": "0x2",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "SW_PREFETCH_ACCESS.T0",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of PREFETCHT0 instructions executed.=
"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of PREFETCHT1 or PREFETC=
HT2 instructions executed.",
+        "EventCode": "0x32",
+        "Counter": "0,1,2,3",
+        "UMask": "0x4",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "SW_PREFETCH_ACCESS.T1_T2",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of PREFETCHT1 or PREFETCHT2 instruct=
ions executed."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of PREFETCHW instruction=
s executed.",
+        "EventCode": "0x32",
+        "Counter": "0,1,2,3",
+        "UMask": "0x8",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "SW_PREFETCH_ACCESS.PREFETCHW",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of PREFETCHW instructions executed."=

+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of available slots for a=
n unhalted logical processor. The event increments by machine-width of th=
e narrowest pipeline as employed by the Top-down Microarchitecture Analys=
is method. The count is distributed among unhalted logical processors (hy=
per-threads) who share the same physical core.",
+        "EventCode": "0xa4",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "TOPDOWN.SLOTS_P",
+        "SampleAfterValue": "10000003",
+        "BriefDescription": "Counts the number of available slots for an=
 unhalted logical processor."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "EventCode": "0xA4",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x2",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "TOPDOWN.BACKEND_BOUND_SLOTS",
+        "SampleAfterValue": "10000003",
+        "BriefDescription": "Issue slots where no uops were being issued=
 due to lack of back end resources."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of occurrences where a m=
icrocode assist is invoked by hardware Examples include AD (page Access D=
irty), FP and AVX related assists.",
+        "EventCode": "0xc1",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x7",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "ASSISTS.ANY",
+        "SampleAfterValue": "100003",
+        "BriefDescription": "Number of occurrences where a microcode ass=
ist is invoked by hardware."
+    }
+]
\ No newline at end of file
diff --git a/tools/perf/pmu-events/arch/x86/icelake/pipeline.json b/tools=
/perf/pmu-events/arch/x86/icelake/pipeline.json
new file mode 100644
index 000000000000..6d8311e634aa
--- /dev/null
+++ b/tools/perf/pmu-events/arch/x86/icelake/pipeline.json
@@ -0,0 +1,892 @@
+[
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of X86 instructions reti=
red - an Architectural PerfMon event. Counting continues during hardware =
interrupts, traps, and inside interrupt handlers. Notes: INST_RETIRED.ANY=
 is counted by a designated fixed counter freeing up programmable counter=
s to count other events. INST_RETIRED.ANY_P is counted by a programmable =
counter.",
+        "Counter": "32",
+        "UMask": "0x1",
+        "PEBScounters": "32",
+        "EventName": "INST_RETIRED.ANY",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of instructions retired. Fixed Count=
er - architectural event"
+    },
+    {
+        "PEBS": "2",
+        "CollectPEBSRecord": "3",
+        "PublicDescription": "A version of INST_RETIRED that allows for =
a more unbiased distribution of samples across instructions retired. It u=
tilizes the Precise Distribution of Instructions Retired (PDIR) feature t=
o mitigate some bias in how retired instructions get sampled. Use on Fixe=
d Counter 0.",
+        "Counter": "32",
+        "UMask": "0x1",
+        "PEBScounters": "32",
+        "EventName": "INST_RETIRED.PREC_DIST",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Precise instruction retired event with a re=
duced effect of PEBS shadow in IP distribution"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of core cycles while the=
 thread is not in a halt state. The thread enters the halt state when it =
is running the HLT instruction. This event is a component in many key eve=
nt ratios. The core frequency may change from time to time due to transit=
ions associated with Enhanced Intel SpeedStep Technology or TM2. For this=
 reason this event may have a changing ratio with regards to time. When t=
he core frequency is constant, this event can approximate elapsed time wh=
ile the core was not in the halt state. It is counted on a dedicated fixe=
d counter, leaving the four (eight when Hyperthreading is disabled) progr=
ammable counters available for other events.",
+        "Counter": "33",
+        "UMask": "0x2",
+        "PEBScounters": "33",
+        "EventName": "CPU_CLK_UNHALTED.THREAD",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Core cycles when the thread is not in halt =
state"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of reference cycles when=
 the core is not in a halt state. The core enters the halt state when it =
is running the HLT instruction or the MWAIT instruction. This event is no=
t affected by core frequency changes (for example, P states, TM2 transiti=
ons) but has the same incrementing frequency as the time stamp counter. T=
his event can approximate elapsed time while the core was not in a halt s=
tate. This event has a constant ratio with the CPU_CLK_UNHALTED.REF_XCLK =
event. It is counted on a dedicated fixed counter, leaving the four (eigh=
t when Hyperthreading is disabled) programmable counters available for ot=
her events. Note: On all current platforms this event stops counting duri=
ng 'throttling (TM)' states duty off periods the processor is 'halted'.  =
The counter update is done at a lower clock rate then the core clock the =
overflow status bit for this counter may appear 'sticky'.  After the coun=
ter has overflowed and software clears the overflow status bit and resets=
 the counter to less than MAX. The reset value to the counter is not cloc=
ked immediately so the overflow status bit will flip 'high (1)' and gener=
ate another PMI (if enabled) after which the reset value gets clocked int=
o the counter. Therefore, software will get the interrupt, read the overf=
low status bit '1 for bit 34 while the counter value is less than MAX. So=
ftware should ignore this case.",
+        "Counter": "34",
+        "UMask": "0x3",
+        "PEBScounters": "34",
+        "EventName": "CPU_CLK_UNHALTED.REF_TSC",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Reference cycles when the core is not in ha=
lt state."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of times the load operat=
ion got the true Block-on-Store blocking code preventing store forwarding=
=2E This includes cases when: a. preceding store conflicts with the load =
(incomplete overlap),b. store forwarding is impossible due to u-arch limi=
tations, c. preceding lock RMW operations are not forwarded, d. store has=
 the no-forward bit set (uncacheable/page-split/masked stores), e. all-bl=
ocking stores are used (mostly, fences and port I/O), and others. The mos=
t common case is a load blocked due to its address range overlapping with=
 a preceding smaller uncompleted store. Note: This event does not take in=
to account cases of out-of-SW-control (for example, SbTailHit), unknown p=
hysical STA, and cases of blocking loads on store due to being non-WB mem=
ory type or a lock. These cases are covered by other events. See the tabl=
e of not supported store forwards in the Optimization Guide.",
+        "EventCode": "0x03",
+        "Counter": "0,1,2,3",
+        "UMask": "0x2",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "LD_BLOCKS.STORE_FORWARD",
+        "SampleAfterValue": "100003",
+        "BriefDescription": "Loads blocked by overlapping with store buf=
fer that cannot be forwarded."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of times that split load=
 operations are temporarily blocked because all resources for handling th=
e split accesses are in use.",
+        "EventCode": "0x03",
+        "Counter": "0,1,2,3",
+        "UMask": "0x8",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "LD_BLOCKS.NO_SR",
+        "SampleAfterValue": "100003",
+        "BriefDescription": "The number of times that split load operati=
ons are temporarily blocked because all resources for handling the split =
accesses are in use."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of times a load got bloc=
ked due to false dependencies in MOB due to partial compare on address.",=

+        "EventCode": "0x07",
+        "Counter": "0,1,2,3",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "LD_BLOCKS_PARTIAL.ADDRESS_ALIAS",
+        "SampleAfterValue": "100003",
+        "BriefDescription": "False dependencies in MOB due to partial co=
mpare on address."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts core cycles when the Resource alloc=
ator was stalled due to recovery from an earlier branch misprediction or =
machine clear event.",
+        "EventCode": "0x0D",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "INT_MISC.RECOVERY_CYCLES",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Core cycles the allocator was stalled due t=
o recovery from earlier clear event for this thread"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts cycles the Backend cluster is recov=
ering after a miss-speculation or a Store Buffer or Load Buffer drain sta=
ll.",
+        "EventCode": "0x0D",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x3",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "INT_MISC.ALL_RECOVERY_CYCLES",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Cycles the Backend cluster is recovering af=
ter a miss-speculation or a Store Buffer or Load Buffer drain stall.",
+        "CounterMask": "1"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Cycles after recovery from a branch mispre=
diction or machine clear till the first uop is issued from the resteered =
path.",
+        "EventCode": "0x0d",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x80",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "INT_MISC.CLEAR_RESTEER_CYCLES",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Counts cycles after recovery from a branch =
misprediction or machine clear till the first uop is issued from the rest=
eered path."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of uops that the Resourc=
e Allocation Table (RAT) issues to the Reservation Station (RS).",
+        "EventCode": "0x0E",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "UOPS_ISSUED.ANY",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Uops that RAT issues to RS"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts cycles during which the Resource Al=
location Table (RAT) does not issue any Uops to the reservation station (=
RS) for the current thread.",
+        "EventCode": "0x0E",
+        "Invert": "1",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "UOPS_ISSUED.STALL_CYCLES",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Cycles when RAT does not issue Uops to RS f=
or the thread",
+        "CounterMask": "1"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts cycles when divide unit is busy exe=
cuting divide or square root operations. Accounts for integer and floatin=
g-point operations.",
+        "EventCode": "0x14",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x9",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "ARITH.DIVIDER_ACTIVE",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Cycles when divide unit is busy executing d=
ivide or square root operations.",
+        "CounterMask": "1"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "This is an architectural event that counts=
 the number of thread cycles while the thread is not in a halt state. The=
 thread enters the halt state when it is running the HLT instruction. The=
 core frequency may change from time to time due to power or thermal thro=
ttling. For this reason, this event may have a changing ratio with regard=
s to wall clock time.",
+        "EventCode": "0x3C",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "CPU_CLK_UNHALTED.THREAD_P",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Thread cycles when thread is not in halt st=
ate"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts core crystal clock cycles when the =
thread is unhalted.",
+        "EventCode": "0x3C",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "CPU_CLK_UNHALTED.REF_XCLK",
+        "SampleAfterValue": "25003",
+        "BriefDescription": "Core crystal clock cycles when the thread i=
s unhalted."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts Core crystal clock cycles when curr=
ent thread is unhalted and the other thread is halted.",
+        "EventCode": "0x3C",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x2",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "CPU_CLK_UNHALTED.ONE_THREAD_ACTIVE",
+        "SampleAfterValue": "25003",
+        "BriefDescription": "Core crystal clock cycles when this thread =
is unhalted and the other thread is halted."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts all not software-prefetch load disp=
atches that hit the fill buffer (FB) allocated for the software prefetch.=
 It can also be incremented by some lock instructions. So it should only =
be used with profiling so that the locks can be excluded by ASM (Assembly=
 File) inspection of the nearby instructions.",
+        "EventCode": "0x4c",
+        "Counter": "0,1,2,3",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "LOAD_HIT_PREFETCH.SWPF",
+        "SampleAfterValue": "100003",
+        "BriefDescription": "Counts the number of demand load dispatches=
 that hit L1D fill buffer (FB) allocated for software prefetch."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts cycles during which the reservation=
 station (RS) is empty for this logical processor. This is usually caused=
 when the front-end pipeline runs into stravation periods (e.g. branch mi=
spredictions or i-cache misses)",
+        "EventCode": "0x5E",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "RS_EVENTS.EMPTY_CYCLES",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Cycles when Reservation Station (RS) is emp=
ty for the thread"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts end of periods where the Reservatio=
n Station (RS) was empty. Could be useful to closely sample on front-end =
latency issues (see the FRONTEND_RETIRED event of designated precise even=
ts)",
+        "EventCode": "0x5E",
+        "Invert": "1",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "RS_EVENTS.EMPTY_END",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Counts end of periods where the Reservation=
 Station (RS) was empty.",
+        "CounterMask": "1",
+        "EdgeDetect": "1"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts cycles that the Instruction Length =
decoder (ILD) stalls occurred due to dynamically changing prefix length o=
f the decoded instruction (by operand size prefix instruction 0x66, addre=
ss size prefix instruction 0x67 or REX.W for Intel64). Count is proportio=
nal to the number of prefixes in a 16B-line. This may result in a three-c=
ycle penalty for each LCP (Length changing prefix) in a 16-byte chunk.",
+        "EventCode": "0x87",
+        "Counter": "0,1,2,3",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "ILD_STALL.LCP",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Stalls caused by changing prefix length of =
the instruction."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts, on the per-thread basis, cycles du=
ring which at least one uop is dispatched from the Reservation Station (R=
S) to port 0.",
+        "EventCode": "0xa1",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "UOPS_DISPATCHED.PORT_0",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of uops executed on port 0"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts, on the per-thread basis, cycles du=
ring which at least one uop is dispatched from the Reservation Station (R=
S) to port 1.",
+        "EventCode": "0xa1",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x2",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "UOPS_DISPATCHED.PORT_1",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of uops executed on port 1"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts, on the per-thread basis, cycles du=
ring which at least one uop is dispatched from the Reservation Station (R=
S) to ports 2 and 3.",
+        "EventCode": "0xa1",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x4",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "UOPS_DISPATCHED.PORT_2_3",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of uops executed on port 2 and 3"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts, on the per-thread basis, cycles du=
ring which at least one uop is dispatched from the Reservation Station (R=
S) to ports 5 and 9.",
+        "EventCode": "0xa1",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x10",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "UOPS_DISPATCHED.PORT_4_9",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of uops executed on port 4 and 9"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts, on the per-thread basis, cycles du=
ring which at least one uop is dispatched from the Reservation Station (R=
S) to port 5.",
+        "EventCode": "0xa1",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x20",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "UOPS_DISPATCHED.PORT_5",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of uops executed on port 5"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts, on the per-thread basis, cycles du=
ring which at least one uop is dispatched from the Reservation Station (R=
S) to port 6.",
+        "EventCode": "0xa1",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x40",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "UOPS_DISPATCHED.PORT_6",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of uops executed on port 6"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts, on the per-thread basis, cycles du=
ring which at least one uop is dispatched from the Reservation Station (R=
S) to ports 7 and 8.",
+        "EventCode": "0xa1",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x80",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "UOPS_DISPATCHED.PORT_7_8",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of uops executed on port 7 and 8"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "EventCode": "0xa2",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x2",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "RESOURCE_STALLS.SCOREBOARD",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Counts cycles where the pipeline is stalled=
 due to serializing operations."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts allocation stall cycles caused by t=
he store buffer (SB) being full. This counts cycles that the pipeline bac=
k-end blocked uop delivery from the front-end.",
+        "EventCode": "0xA2",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x8",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "RESOURCE_STALLS.SB",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Cycles stalled due to no store buffers avai=
lable. (not including draining form sync)."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "EventCode": "0xA3",
+        "Counter": "0,1,2,3",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "CYCLE_ACTIVITY.CYCLES_L2_MISS",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Cycles while L2 cache miss demand load is o=
utstanding.",
+        "CounterMask": "1"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "EventCode": "0xA3",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x4",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "CYCLE_ACTIVITY.STALLS_TOTAL",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Total execution stalls.",
+        "CounterMask": "4"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "EventCode": "0xA3",
+        "Counter": "0,1,2,3",
+        "UMask": "0x5",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "CYCLE_ACTIVITY.STALLS_L2_MISS",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Execution stalls while L2 cache miss demand=
 load is outstanding.",
+        "CounterMask": "5"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "EventCode": "0xA3",
+        "Counter": "0,1,2,3",
+        "UMask": "0x8",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "CYCLE_ACTIVITY.CYCLES_L1D_MISS",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Cycles while L1 cache miss demand load is o=
utstanding.",
+        "CounterMask": "8"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "EventCode": "0xA3",
+        "Counter": "0,1,2,3",
+        "UMask": "0xc",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "CYCLE_ACTIVITY.STALLS_L1D_MISS",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Execution stalls while L1 cache miss demand=
 load is outstanding.",
+        "CounterMask": "12"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "EventCode": "0xA3",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x10",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "CYCLE_ACTIVITY.CYCLES_MEM_ANY",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Cycles while memory subsystem has an outsta=
nding load.",
+        "CounterMask": "16"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "EventCode": "0xA3",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x14",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "CYCLE_ACTIVITY.STALLS_MEM_ANY",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Execution stalls while memory subsystem has=
 an outstanding load.",
+        "CounterMask": "20"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts cycles during which a total of 1 uo=
p was executed on all ports and Reservation Station (RS) was not empty.",=

+        "EventCode": "0xa6",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x2",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "EXE_ACTIVITY.1_PORTS_UTIL",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Cycles total of 1 uop is executed on all po=
rts and Reservation Station was not empty."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts cycles during which a total of 2 uo=
ps were executed on all ports and Reservation Station (RS) was not empty.=
",
+        "EventCode": "0xa6",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x4",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "EXE_ACTIVITY.2_PORTS_UTIL",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Cycles total of 2 uops are executed on all =
ports and Reservation Station was not empty."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts cycles where the Store Buffer was f=
ull and no loads caused an execution stall.",
+        "EventCode": "0xA6",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x40",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "EXE_ACTIVITY.BOUND_ON_STORES",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Cycles where the Store Buffer was full and =
no loads caused an execution stall.",
+        "CounterMask": "2"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts cycles during which no uops were ex=
ecuted on all ports and Reservation Station (RS) was not empty.",
+        "EventCode": "0xa6",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x80",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "EXE_ACTIVITY.EXE_BOUND_0_PORTS",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Cycles where no uops were executed, the Res=
ervation Station was not empty, the Store Buffer was full and there was n=
o outstanding load."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of uops delivered to the=
 back-end by the LSD(Loop Stream Detector).",
+        "EventCode": "0xA8",
+        "Counter": "0,1,2,3",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "LSD.UOPS",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of Uops delivered by the LSD."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the cycles when at least one uop is=
 delivered by the LSD (Loop-stream detector).",
+        "EventCode": "0xA8",
+        "Counter": "0,1,2,3",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "LSD.CYCLES_ACTIVE",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Cycles Uops delivered by the LSD, but didn'=
t come from the decoder.",
+        "CounterMask": "1"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the cycles when optimal number of u=
ops is delivered by the LSD (Loop-stream detector).",
+        "EventCode": "0xa8",
+        "Counter": "0,1,2,3",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "LSD.CYCLES_OK",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Cycles optimal number of Uops delivered by =
the LSD, but did not come from the decoder.",
+        "CounterMask": "5"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "EventCode": "0xB1",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "UOPS_EXECUTED.THREAD",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Counts the number of uops to be executed pe=
r-thread each cycle."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts cycles during which no uops were di=
spatched from the Reservation Station (RS) per thread.",
+        "EventCode": "0xB1",
+        "Invert": "1",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "UOPS_EXECUTED.STALL_CYCLES",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Counts number of cycles no uops were dispat=
ched to be executed on this thread.",
+        "CounterMask": "1"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Cycles where at least 1 uop was executed p=
er-thread.",
+        "EventCode": "0xb1",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "UOPS_EXECUTED.CYCLES_GE_1",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Cycles where at least 1 uop was executed pe=
r-thread",
+        "CounterMask": "1"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Cycles where at least 2 uops were executed=
 per-thread.",
+        "EventCode": "0xb1",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "UOPS_EXECUTED.CYCLES_GE_2",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Cycles where at least 2 uops were executed =
per-thread",
+        "CounterMask": "2"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Cycles where at least 3 uops were executed=
 per-thread.",
+        "EventCode": "0xb1",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "UOPS_EXECUTED.CYCLES_GE_3",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Cycles where at least 3 uops were executed =
per-thread",
+        "CounterMask": "3"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Cycles where at least 4 uops were executed=
 per-thread.",
+        "EventCode": "0xb1",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "UOPS_EXECUTED.CYCLES_GE_4",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Cycles where at least 4 uops were executed =
per-thread",
+        "CounterMask": "4"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of uops executed from an=
y thread.",
+        "EventCode": "0xB1",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x2",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "UOPS_EXECUTED.CORE",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of uops executed on the core."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts cycles when at least 1 micro-op is =
executed from any thread on physical core.",
+        "EventCode": "0xB1",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x2",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "UOPS_EXECUTED.CORE_CYCLES_GE_1",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Cycles at least 1 micro-op is executed from=
 any thread on physical core.",
+        "CounterMask": "1"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts cycles when at least 2 micro-ops ar=
e executed from any thread on physical core.",
+        "EventCode": "0xB1",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x2",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "UOPS_EXECUTED.CORE_CYCLES_GE_2",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Cycles at least 2 micro-op is executed from=
 any thread on physical core.",
+        "CounterMask": "2"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts cycles when at least 3 micro-ops ar=
e executed from any thread on physical core.",
+        "EventCode": "0xB1",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x2",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "UOPS_EXECUTED.CORE_CYCLES_GE_3",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Cycles at least 3 micro-op is executed from=
 any thread on physical core.",
+        "CounterMask": "3"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts cycles when at least 4 micro-ops ar=
e executed from any thread on physical core.",
+        "EventCode": "0xB1",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x2",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "UOPS_EXECUTED.CORE_CYCLES_GE_4",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Cycles at least 4 micro-op is executed from=
 any thread on physical core.",
+        "CounterMask": "4"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of x87 uops executed.",
+        "EventCode": "0xB1",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x10",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "UOPS_EXECUTED.X87",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Counts the number of x87 uops dispatched."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of X86 instructions reti=
red - an Architectural PerfMon event. Counting continues during hardware =
interrupts, traps, and inside interrupt handlers. Notes: INST_RETIRED.ANY=
 is counted by a designated fixed counter freeing up programmable counter=
s to count other events. INST_RETIRED.ANY_P is counted by a programmable =
counter.",
+        "EventCode": "0xC0",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "INST_RETIRED.ANY_P",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of instructions retired. General Cou=
nter - architectural event"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of cycles using always t=
rue condition (uops_ret &amp;lt; 16) applied to non PEBS uops retired eve=
nt.",
+        "EventCode": "0xC2",
+        "Invert": "1",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x2",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "UOPS_RETIRED.TOTAL_CYCLES",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Cycles with less than 10 actually retired u=
ops.",
+        "CounterMask": "10"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the retirement slots used each cycl=
e.",
+        "EventCode": "0xc2",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x2",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "UOPS_RETIRED.SLOTS",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Retirement slots used."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of machine clears (nukes=
) of any type.",
+        "EventCode": "0xC3",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "MACHINE_CLEARS.COUNT",
+        "SampleAfterValue": "100003",
+        "BriefDescription": "Number of machine clears (nukes) of any typ=
e.",
+        "CounterMask": "1",
+        "EdgeDetect": "1"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts self-modifying code (SMC) detected,=
 which causes a machine clear.",
+        "EventCode": "0xC3",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x4",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "MACHINE_CLEARS.SMC",
+        "SampleAfterValue": "100003",
+        "BriefDescription": "Self-modifying code (SMC) detected."
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts all branch instructions retired.",
+        "EventCode": "0xC4",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "BR_INST_RETIRED.ALL_BRANCHES",
+        "SampleAfterValue": "400009",
+        "BriefDescription": "All branch instructions retired."
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts taken conditional branch instructio=
ns retired.",
+        "EventCode": "0xc4",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "BR_INST_RETIRED.COND_TAKEN",
+        "SampleAfterValue": "400009",
+        "BriefDescription": "Taken conditional branch instructions retir=
ed."
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts both direct and indirect near call =
instructions retired.",
+        "EventCode": "0xC4",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x2",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "BR_INST_RETIRED.NEAR_CALL",
+        "SampleAfterValue": "100007",
+        "BriefDescription": "Direct and indirect near call instructions =
retired."
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts return instructions retired.",
+        "EventCode": "0xC4",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x8",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "BR_INST_RETIRED.NEAR_RETURN",
+        "SampleAfterValue": "100007",
+        "BriefDescription": "Return instructions retired."
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts not taken branch instructions retir=
ed.",
+        "EventCode": "0xC4",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x10",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "BR_INST_RETIRED.COND_NTAKEN",
+        "SampleAfterValue": "400009",
+        "BriefDescription": "Not taken branch instructions retired."
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts conditional branch instructions ret=
ired.",
+        "EventCode": "0xc4",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x11",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "BR_INST_RETIRED.COND",
+        "SampleAfterValue": "400009",
+        "BriefDescription": "Conditional branch instructions retired."
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts taken branch instructions retired."=
,
+        "EventCode": "0xC4",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x20",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "BR_INST_RETIRED.NEAR_TAKEN",
+        "SampleAfterValue": "400009",
+        "BriefDescription": "Taken branch instructions retired."
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts far branch instructions retired.",
+        "EventCode": "0xC4",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x40",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "BR_INST_RETIRED.FAR_BRANCH",
+        "SampleAfterValue": "100007",
+        "BriefDescription": "Far branch instructions retired."
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts all indirect branch instructions re=
tired (excluding RETs. TSX aborts is considered indirect branch).",
+        "EventCode": "0xc4",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x80",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "BR_INST_RETIRED.INDIRECT",
+        "SampleAfterValue": "100003",
+        "BriefDescription": "All indirect branch instructions retired (e=
xcluding RETs. TSX aborts are considered indirect branch)."
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts all the retired branch instructions=
 that were mispredicted by the processor. A branch misprediction occurs w=
hen the processor incorrectly predicts the destination of the branch.  Wh=
en the misprediction is discovered at execution, all the instructions exe=
cuted in the wrong (speculative) path must be discarded, and the processo=
r must start fetching from the correct path.",
+        "EventCode": "0xC5",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "BR_MISP_RETIRED.ALL_BRANCHES",
+        "SampleAfterValue": "400009",
+        "BriefDescription": "All mispredicted branch instructions retire=
d.",
+        "Data_LA": "1"
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts taken conditional mispredicted bran=
ch instructions retired.",
+        "EventCode": "0xc5",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "BR_MISP_RETIRED.COND_TAKEN",
+        "SampleAfterValue": "400009",
+        "BriefDescription": "number of branch instructions retired that =
were mispredicted and taken. Non PEBS",
+        "Data_LA": "1"
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts mispredicted conditional branch ins=
tructions retired.",
+        "EventCode": "0xc5",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x11",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "BR_MISP_RETIRED.COND",
+        "SampleAfterValue": "400009",
+        "BriefDescription": "Mispredicted conditional branch instruction=
s retired.",
+        "Data_LA": "1"
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts number of near branch instructions =
retired that were mispredicted and taken.",
+        "EventCode": "0xC5",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x20",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "BR_MISP_RETIRED.NEAR_TAKEN",
+        "SampleAfterValue": "400009",
+        "BriefDescription": "Number of near branch instructions retired =
that were mispredicted and taken.",
+        "Data_LA": "1"
+    },
+    {
+        "PEBS": "1",
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts all miss-predicted indirect branch =
instructions retired (excluding RETs. TSX aborts is considered indirect b=
ranch).",
+        "EventCode": "0xC5",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x80",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "BR_MISP_RETIRED.INDIRECT",
+        "SampleAfterValue": "100003",
+        "BriefDescription": "All miss-predicted indirect branch instruct=
ions retired (excluding RETs. TSX aborts is considered indirect branch)."=
,
+        "Data_LA": "1"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Increments when an entry is added to the L=
ast Branch Record (LBR) array (or removed from the array in case of RETUR=
Ns in call stack mode). The event requires LBR enable via IA32_DEBUGCTL M=
SR and branch type selection via MSR_LBR_SELECT.",
+        "EventCode": "0xcc",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x20",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "MISC_RETIRED.LBR_INSERTS",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Increments whenever there is an update to t=
he LBR array."
+    },
+    {
+        "PublicDescription": "Counts number of retired PAUSE instruction=
s (that do not end up with a VMExit to the VMM; TSX aborted Instructions =
may be counted).",
+        "EventCode": "0xcc",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x40",
+        "EventName": "MISC_RETIRED.PAUSE_INST",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of retired PAUSE instructions."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of times the front-end i=
s resteered when it finds a branch instruction in a fetch line. This occu=
rs for the first time a branch instruction is fetched or when the branch =
is not tracked by the BPU (Branch Prediction Unit) anymore.",
+        "EventCode": "0xE6",
+        "Counter": "0,1,2,3",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "BACLEARS.ANY",
+        "SampleAfterValue": "100003",
+        "BriefDescription": "Counts the total number when the front end =
is resteered, mainly when the BPU cannot provide a correct prediction and=
 this is corrected by other branch handling mechanisms at the front end."=

+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "This event distributes cycle counts betwee=
n active hyperthreads, i.e., those in C0.  A hyperthread becomes inactive=
 when it executes the HLT or MWAIT instructions.  If all other hyperthrea=
ds are inactive (or disabled or do not exist), all counts are attributed =
to this hyperthread. To obtain the full count when the Core is active, su=
m the counts from each hyperthread.",
+        "EventCode": "0xec",
+        "Counter": "0,1,2,3,4,5,6,7",
+        "UMask": "0x2",
+        "PEBScounters": "0,1,2,3,4,5,6,7",
+        "EventName": "CPU_CLK_UNHALTED.DISTRIBUTED",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Cycle counts are evenly distributed between=
 active threads in the Core."
+    }
+]
\ No newline at end of file
diff --git a/tools/perf/pmu-events/arch/x86/icelake/virtual-memory.json b=
/tools/perf/pmu-events/arch/x86/icelake/virtual-memory.json
new file mode 100644
index 000000000000..7180a900c175
--- /dev/null
+++ b/tools/perf/pmu-events/arch/x86/icelake/virtual-memory.json
@@ -0,0 +1,236 @@
+[
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts page walks completed due to demand =
data loads whose address translations missed in the TLB and were mapped t=
o 4K pages.  The page walks can end with or without a page fault.",
+        "EventCode": "0x08",
+        "Counter": "0,1,2,3",
+        "UMask": "0x2",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "DTLB_LOAD_MISSES.WALK_COMPLETED_4K",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Page walks completed due to a demand data l=
oad to a 4K page."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts page walks completed due to demand =
data loads whose address translations missed in the TLB and were mapped t=
o 2M/4M pages.  The page walks can end with or without a page fault.",
+        "EventCode": "0x08",
+        "Counter": "0,1,2,3",
+        "UMask": "0x4",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "DTLB_LOAD_MISSES.WALK_COMPLETED_2M_4M",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Page walks completed due to a demand data l=
oad to a 2M/4M page."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts demand data loads that caused a com=
pleted page walk of any page size (4K/2M/4M/1G). This implies it missed i=
n all TLB levels. The page walk can end with or without a fault.",
+        "EventCode": "0x08",
+        "Counter": "0,1,2,3",
+        "UMask": "0xe",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "DTLB_LOAD_MISSES.WALK_COMPLETED",
+        "SampleAfterValue": "100003",
+        "BriefDescription": "Load miss in all TLB levels causes a page w=
alk that completes. (All page sizes)"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of page walks outstandin=
g for a demand load in the PMH (Page Miss Handler) each cycle.",
+        "EventCode": "0x08",
+        "Counter": "0,1,2,3",
+        "UMask": "0x10",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "DTLB_LOAD_MISSES.WALK_PENDING",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of page walks outstanding for a dema=
nd load in the PMH each cycle."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts cycles when at least one PMH (Page =
Miss Handler) is busy with a page walk for a demand load.",
+        "EventCode": "0x08",
+        "Counter": "0,1,2,3",
+        "UMask": "0x10",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "DTLB_LOAD_MISSES.WALK_ACTIVE",
+        "SampleAfterValue": "100003",
+        "BriefDescription": "Cycles when at least one PMH is busy with a=
 page walk for a demand load.",
+        "CounterMask": "1"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts loads that miss the DTLB (Data TLB)=
 and hit the STLB (Second level TLB).",
+        "EventCode": "0x08",
+        "Counter": "0,1,2,3",
+        "UMask": "0x20",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "DTLB_LOAD_MISSES.STLB_HIT",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Loads that miss the DTLB and hit the STLB."=

+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts page walks completed due to demand =
data stores whose address translations missed in the TLB and were mapped =
to 4K pages.  The page walks can end with or without a page fault.",
+        "EventCode": "0x49",
+        "Counter": "0,1,2,3",
+        "UMask": "0x2",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "DTLB_STORE_MISSES.WALK_COMPLETED_4K",
+        "SampleAfterValue": "100003",
+        "BriefDescription": "Page walks completed due to a demand data s=
tore to a 4K page."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts page walks completed due to demand =
data stores whose address translations missed in the TLB and were mapped =
to 2M/4M pages.  The page walks can end with or without a page fault.",
+        "EventCode": "0x49",
+        "Counter": "0,1,2,3",
+        "UMask": "0x4",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "DTLB_STORE_MISSES.WALK_COMPLETED_2M_4M",
+        "SampleAfterValue": "100003",
+        "BriefDescription": "Page walks completed due to a demand data s=
tore to a 2M/4M page."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts demand data stores that caused a co=
mpleted page walk of any page size (4K/2M/4M/1G). This implies it missed =
in all TLB levels. The page walk can end with or without a fault.",
+        "EventCode": "0x49",
+        "Counter": "0,1,2,3",
+        "UMask": "0xe",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "DTLB_STORE_MISSES.WALK_COMPLETED",
+        "SampleAfterValue": "100003",
+        "BriefDescription": "Store misses in all TLB levels causes a pag=
e walk that completes. (All page sizes)"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of page walks outstandin=
g for a store in the PMH (Page Miss Handler) each cycle.",
+        "EventCode": "0x49",
+        "Counter": "0,1,2,3",
+        "UMask": "0x10",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "DTLB_STORE_MISSES.WALK_PENDING",
+        "SampleAfterValue": "2000003",
+        "BriefDescription": "Number of page walks outstanding for a stor=
e in the PMH each cycle."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts cycles when at least one PMH (Page =
Miss Handler) is busy with a page walk for a store.",
+        "EventCode": "0x49",
+        "Counter": "0,1,2,3",
+        "UMask": "0x10",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "DTLB_STORE_MISSES.WALK_ACTIVE",
+        "SampleAfterValue": "100003",
+        "BriefDescription": "Cycles when at least one PMH is busy with a=
 page walk for a store.",
+        "CounterMask": "1"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts stores that miss the DTLB (Data TLB=
) and hit the STLB (2nd Level TLB).",
+        "EventCode": "0x49",
+        "Counter": "0,1,2,3",
+        "UMask": "0x20",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "DTLB_STORE_MISSES.STLB_HIT",
+        "SampleAfterValue": "100003",
+        "BriefDescription": "Stores that miss the DTLB and hit the STLB.=
"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts completed page walks (4K page size)=
 caused by a code fetch. This implies it missed in the ITLB and further l=
evels of TLB. The page walk can end with or without a fault.",
+        "EventCode": "0x85",
+        "Counter": "0,1,2,3",
+        "UMask": "0x2",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "ITLB_MISSES.WALK_COMPLETED_4K",
+        "SampleAfterValue": "100003",
+        "BriefDescription": "Code miss in all TLB levels causes a page w=
alk that completes. (4K)"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts code misses in all ITLB (Instructio=
n TLB) levels that caused a completed page walk (2M and 4M page sizes). T=
he page walk can end with or without a fault.",
+        "EventCode": "0x85",
+        "Counter": "0,1,2,3",
+        "UMask": "0x4",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "ITLB_MISSES.WALK_COMPLETED_2M_4M",
+        "SampleAfterValue": "100003",
+        "BriefDescription": "Code miss in all TLB levels causes a page w=
alk that completes. (2M/4M)"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts completed page walks (2M and 4M pag=
e sizes) caused by a code fetch. This implies it missed in the ITLB (Inst=
ruction TLB) and further levels of TLB. The page walk can end with or wit=
hout a fault.",
+        "EventCode": "0x85",
+        "Counter": "0,1,2,3",
+        "UMask": "0xe",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "ITLB_MISSES.WALK_COMPLETED",
+        "SampleAfterValue": "100003",
+        "BriefDescription": "Code miss in all TLB levels causes a page w=
alk that completes. (All page sizes)"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of page walks outstandin=
g for an outstanding code (instruction fetch) request in the PMH (Page Mi=
ss Handler) each cycle.",
+        "EventCode": "0x85",
+        "Counter": "0,1,2,3",
+        "UMask": "0x10",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "ITLB_MISSES.WALK_PENDING",
+        "SampleAfterValue": "100003",
+        "BriefDescription": "Number of page walks outstanding for an out=
standing code request in the PMH each cycle."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts cycles when at least one PMH (Page =
Miss Handler) is busy with a page walk for a code (instruction fetch) req=
uest.",
+        "EventCode": "0x85",
+        "Counter": "0,1,2,3",
+        "UMask": "0x10",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "ITLB_MISSES.WALK_ACTIVE",
+        "SampleAfterValue": "100003",
+        "BriefDescription": "Cycles when at least one PMH is busy with a=
 page walk for code (instruction fetch) request.",
+        "CounterMask": "1"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts instruction fetch requests that mis=
s the ITLB (Instruction TLB) and hit the STLB (Second-level TLB).",
+        "EventCode": "0x85",
+        "Counter": "0,1,2,3",
+        "UMask": "0x20",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "ITLB_MISSES.STLB_HIT",
+        "SampleAfterValue": "100003",
+        "BriefDescription": "Instruction fetch requests that miss the IT=
LB and hit the STLB."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of flushes of the big or=
 small ITLB pages. Counting include both TLB Flush (covering all sets) an=
d TLB Set Clear (set-specific).",
+        "EventCode": "0xAE",
+        "Counter": "0,1,2,3",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "ITLB.ITLB_FLUSH",
+        "SampleAfterValue": "100007",
+        "BriefDescription": "Flushing of the Instruction TLB (ITLB) page=
s, includes 4k/2M/4M pages."
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of DTLB flush attempts o=
f the thread-specific entries.",
+        "EventCode": "0xBD",
+        "Counter": "0,1,2,3",
+        "UMask": "0x1",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "TLB_FLUSH.DTLB_THREAD",
+        "SampleAfterValue": "100007",
+        "BriefDescription": "DTLB flush attempts of the thread-specific =
entries"
+    },
+    {
+        "CollectPEBSRecord": "2",
+        "PublicDescription": "Counts the number of any STLB flush attemp=
ts (such as entire, VPID, PCID, InvPage, CR3 write, etc.).",
+        "EventCode": "0xBD",
+        "Counter": "0,1,2,3",
+        "UMask": "0x20",
+        "PEBScounters": "0,1,2,3",
+        "EventName": "TLB_FLUSH.STLB_ANY",
+        "SampleAfterValue": "100007",
+        "BriefDescription": "STLB flush attempts"
+    }
+]
\ No newline at end of file
diff --git a/tools/perf/pmu-events/arch/x86/mapfile.csv b/tools/perf/pmu-=
events/arch/x86/mapfile.csv
index d6984a3017e0..b90e5fec2f32 100644
--- a/tools/perf/pmu-events/arch/x86/mapfile.csv
+++ b/tools/perf/pmu-events/arch/x86/mapfile.csv
@@ -33,4 +33,6 @@ GenuineIntel-6-25,v2,westmereep-sp,core
 GenuineIntel-6-2F,v2,westmereex,core
 GenuineIntel-6-55-[01234],v1,skylakex,core
 GenuineIntel-6-55-[56789ABCDEF],v1,cascadelakex,core
+GenuineIntel-6-7D,v1,icelake,core
+GenuineIntel-6-7E,v1,icelake,core
 AuthenticAMD-23-[[:xdigit:]]+,v1,amdfam17h,core
--=20
2.11.0


--------------B6D82FEC6D7B90C545327241--
